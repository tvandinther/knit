import knit.helm

"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""

schema Values(helm.Values):
    r"""
    Values

    Attributes
    ----------
    apiVersionOverrides : ValuesApiVersionOverrides, required, default is {}
        Override APIVersions
        # If you want to template helm charts but cannot access k8s API server
        # you can set api versions here
    applicationSet : ValuesApplicationSet, optional
        # ApplicationSet controller
    configs : ValuesConfigs, optional
        # Argo Configs
    controller : ValuesController, optional
        # Application controller
    crds : ValuesCrds, optional
        # Custom resource configuration
    createAggregateRoles : bool, required, default is False
        -- Create aggregated roles that extend existing cluster roles to interact with argo-cd resources
        ## Ref: https://kubernetes.io/docs/reference/access-authn-authz/rbac/#aggregated-clusterroles
    createClusterRoles : bool, required, default is True
        -- Create cluster roles for cluster-wide installation.
        ## Used when you manage applications in the same cluster where Argo CD runs
    dex : ValuesDex, optional
        # Dex
    externalRedis : ValuesExternalRedis, optional
        External Redis parameters
    extraObjects : [any], required, default is []
        -- Array of extra K8s manifests to deploy
        ## Note: Supports use of custom Helm templates
        - apiVersion: secrets-store.csi.x-k8s.io/v1
        #   kind: SecretProviderClass
        #   metadata:
        #     name: argocd-secrets-store
        #   spec:
        #     provider: aws
        #     parameters:
        #       objects: |
        #         - objectName: "argocd"
        #           objectType: "secretsmanager"
        #           jmesPath:
        #               - path: "client_id"
        #                 objectAlias: "client_id"
        #               - path: "client_secret"
        #                 objectAlias: "client_secret"
        #     secretObjects:
        #     - data:
        #       - key: client_id
        #         objectName: client_id
        #       - key: client_secret
        #         objectName: client_secret
        #       secretName: argocd-secrets-store
        #       type: Opaque
        #       labels:
        #         app.kubernetes.io/part-of: argocd
    fullnameOverride : str, required, default is ""
        -- String to fully override `"argo-cd.fullname"`
    global : ValuesGlobal, optional
        # Globally shared configuration
    kubeVersionOverride : str, required, default is ""
        -- Override the Kubernetes version, which is used to evaluate certain manifests
    nameOverride : str, required, default is "argocd"
        -- Provide a name in place of `argocd`
    namespaceOverride : str, required, default is ""
        -- Override the namespace
        # @default -- `.Release.Namespace`
    notifications : ValuesNotifications, optional
        # Notifications controller
    openshift : ValuesOpenshift, optional
    redis : ValuesRedis, optional
        # Redis
    "redis-ha" : ValuesRedisHa, optional
        # Redis-HA subchart replaces custom redis deployment when `redis-ha.enabled=true`
        # Ref: https://github.com/DandyDeveloper/charts/blob/master/charts/redis-ha/values.yaml
    redisSecretInit : ValuesRedisSecretInit, optional
    repoServer : ValuesRepoServer, optional
        # Repo Server
    server : ValuesServer, optional
        # Server
    """
    apiVersionOverrides: ValuesApiVersionOverrides = {}
    applicationSet?: ValuesApplicationSet
    configs?: ValuesConfigs
    controller?: ValuesController
    crds?: ValuesCrds
    createAggregateRoles: bool = False
    createClusterRoles: bool = True
    dex?: ValuesDex
    externalRedis?: ValuesExternalRedis
    extraObjects: [any] = []
    fullnameOverride: str = ""
    global?: ValuesGlobal
    kubeVersionOverride: str = ""
    nameOverride: str = "argocd"
    namespaceOverride: str = ""
    notifications?: ValuesNotifications
    openshift?: ValuesOpenshift
    redis?: ValuesRedis
    "redis-ha"?: ValuesRedisHa
    redisSecretInit?: ValuesRedisSecretInit
    repoServer?: ValuesRepoServer
    server?: ValuesServer

schema ValuesApiVersionOverrides:
    r"""
    Override APIVersions
    # If you want to template helm charts but cannot access k8s API server
    # you can set api versions here
    """
    [...str]: any

schema ValuesApplicationSet:
    r"""
    # ApplicationSet controller

    Attributes
    ----------
    affinity : ValuesApplicationSetAffinity, required, default is {}
        -- Assign custom [affinity] rules
        # @default -- `{}` (defaults to global.affinity preset)
    allowAnyNamespace : bool, required, default is False
        -- Enable ApplicationSet in any namespace feature
    automountServiceAccountToken : bool, required, default is True
        -- Automount API credentials for the Service Account into the pod.
    certificate : ValuesApplicationSetCertificate, optional
        TLS certificate configuration via cert-manager
        ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/#tls-configuration
    containerPorts : ValuesApplicationSetContainerPorts, optional
        ApplicationSet controller container ports
    containerSecurityContext : ValuesApplicationSetContainerSecurityContext, optional
        -- ApplicationSet controller container-level security context
        # @default -- See [values.yaml]
    deploymentAnnotations : ValuesApplicationSetDeploymentAnnotations, required, default is {}
        -- Annotations to be added to ApplicationSet controller Deployment
    deploymentStrategy : ValuesApplicationSetDeploymentStrategy, required, default is {}
        -- Deployment strategy to be added to the ApplicationSet controller Deployment
        type: RollingUpdate
        # rollingUpdate:
        #   maxSurge: 25%
        #   maxUnavailable: 25%
    dnsConfig : ValuesApplicationSetDnsConfig, required, default is {}
        -- [DNS configuration]
    dnsPolicy : str, required, default is "ClusterFirst"
        -- Alternative DNS policy for ApplicationSet controller pods
    emptyDir : ValuesApplicationSetEmptyDir, optional
        # ApplicationSet controller emptyDir volumes
    extraArgs : [any], required, default is []
        -- ApplicationSet controller command line flags
    extraContainers : [any], required, default is []
        -- Additional containers to be added to the ApplicationSet controller pod
        ## Note: Supports use of custom Helm templates
    extraEnv : [any], required, default is []
        -- Environment variables to pass to the ApplicationSet controller
        - name: "MY_VAR"
        #   value: "value"
    extraEnvFrom : [any], required, default is []
        -- envFrom to pass to the ApplicationSet controller
        # @default -- `[]` (See [values.yaml])
        - configMapRef:
        #     name: config-map-name
        # - secretRef:
        #     name: secret-name
    extraVolumeMounts : [any], required, default is []
        -- List of extra mounts to add (normally used with extraVolumes)
    extraVolumes : [any], required, default is []
        -- List of extra volumes to add
    image : ValuesApplicationSetImage, optional
        # ApplicationSet controller image
    imagePullSecrets : [any], required, default is []
        -- If defined, uses a Secret to pull an image from a private Docker registry or repository.
        # @default -- `[]` (defaults to global.imagePullSecrets)
    ingress : ValuesApplicationSetIngress, optional
        # Ingress for the Git Generator webhook
        ## Ref: https://argocd-applicationset.readthedocs.io/en/master/Generators-Git/#webhook-configuration)
    initContainers : [any], required, default is []
        -- Init containers to add to the ApplicationSet controller pod
        ## Note: Supports use of custom Helm templates
    livenessProbe : ValuesApplicationSetLivenessProbe, optional
    metrics : ValuesApplicationSetMetrics, optional
        # Metrics service configuration
    name : str, required, default is "applicationset-controller"
        -- ApplicationSet controller name string
    nodeSelector : ValuesApplicationSetNodeSelector, required, default is {}
        -- [Node selector]
        # @default -- `{}` (defaults to global.nodeSelector)
    pdb : ValuesApplicationSetPdb, optional
        # ApplicationSet controller Pod Disruption Budget
        ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
    podAnnotations : ValuesApplicationSetPodAnnotations, required, default is {}
        -- Annotations for the ApplicationSet controller pods
    podLabels : ValuesApplicationSetPodLabels, required, default is {}
        -- Labels for the ApplicationSet controller pods
    priorityClassName : str, required, default is ""
        -- Priority class for the ApplicationSet controller pods
        # @default -- `""` (defaults to global.priorityClassName)
    readinessProbe : ValuesApplicationSetReadinessProbe, optional
        # Probes for ApplicationSet controller (optional)
        ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    replicas : int, required, default is 1
        -- The number of ApplicationSet controller pods to run
    resources : ValuesApplicationSetResources, required, default is {}
        -- Resource limits and requests for the ApplicationSet controller pods.
        limits:
        #   cpu: 100m
        #   memory: 128Mi
        # requests:
        #   cpu: 100m
        #   memory: 128Mi
    runtimeClassName : str, required, default is ""
        -- Runtime class name for the ApplicationSet controller
        # @default -- `""` (defaults to global.runtimeClassName)
    service : ValuesApplicationSetService, optional
        # ApplicationSet service configuration
    serviceAccount : ValuesApplicationSetServiceAccount, optional
    terminationGracePeriodSeconds : int, required, default is 30
        -- terminationGracePeriodSeconds for container lifecycle hook
    tolerations : [any], required, default is []
        -- [Tolerations] for use with node taints
        # @default -- `[]` (defaults to global.tolerations)
    topologySpreadConstraints : [any], required, default is []
        -- Assign custom [TopologySpreadConstraints] rules to the ApplicationSet controller
        # @default -- `[]` (defaults to global.topologySpreadConstraints)
        ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
        ## If labelSelector is left out, it will default to the labelSelector configuration of the deployment
        - maxSkew: 1
        #   topologyKey: topology.kubernetes.io/zone
        #   whenUnsatisfiable: DoNotSchedule
    """
    affinity: ValuesApplicationSetAffinity = {}
    allowAnyNamespace: bool = False
    automountServiceAccountToken: bool = True
    certificate?: ValuesApplicationSetCertificate
    containerPorts?: ValuesApplicationSetContainerPorts
    containerSecurityContext?: ValuesApplicationSetContainerSecurityContext
    deploymentAnnotations: ValuesApplicationSetDeploymentAnnotations = {}
    deploymentStrategy: ValuesApplicationSetDeploymentStrategy = {}
    dnsConfig: ValuesApplicationSetDnsConfig = {}
    dnsPolicy: str = "ClusterFirst"
    emptyDir?: ValuesApplicationSetEmptyDir
    extraArgs: [any] = []
    extraContainers: [any] = []
    extraEnv: [any] = []
    extraEnvFrom: [any] = []
    extraVolumeMounts: [any] = []
    extraVolumes: [any] = []
    image?: ValuesApplicationSetImage
    imagePullSecrets: [any] = []
    ingress?: ValuesApplicationSetIngress
    initContainers: [any] = []
    livenessProbe?: ValuesApplicationSetLivenessProbe
    metrics?: ValuesApplicationSetMetrics
    name: str = "applicationset-controller"
    nodeSelector: ValuesApplicationSetNodeSelector = {}
    pdb?: ValuesApplicationSetPdb
    podAnnotations: ValuesApplicationSetPodAnnotations = {}
    podLabels: ValuesApplicationSetPodLabels = {}
    priorityClassName: str = ""
    readinessProbe?: ValuesApplicationSetReadinessProbe
    replicas: int = 1
    resources: ValuesApplicationSetResources = {}
    runtimeClassName: str = ""
    service?: ValuesApplicationSetService
    serviceAccount?: ValuesApplicationSetServiceAccount
    terminationGracePeriodSeconds: int = 30
    tolerations: [any] = []
    topologySpreadConstraints: [any] = []

schema ValuesApplicationSetAffinity:
    r"""
    -- Assign custom [affinity] rules
    # @default -- `{}` (defaults to global.affinity preset)
    """
    [...str]: any

schema ValuesApplicationSetCertificate:
    r"""
    TLS certificate configuration via cert-manager
    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/#tls-configuration

    Attributes
    ----------
    additionalHosts : [any], required, default is []
        -- Certificate Subject Alternate Names (SANs)
    annotations : ValuesApplicationSetCertificateAnnotations, required, default is {}
        -- Annotations to be applied to the ApplicationSet Certificate
    domain : str, required, default is ""
        -- Certificate primary domain (commonName)
        # @default -- `""` (defaults to global.domain)
    duration : str, required, default is ""
        -- The requested 'duration' (i.e. lifetime) of the certificate.
        # @default -- `""` (defaults to 2160h = 90d if not specified)
        ## Ref: https://cert-manager.io/docs/usage/certificate/#renewal
    enabled : bool, required, default is False
        -- Deploy a Certificate resource (requires cert-manager)
    issuer : ValuesApplicationSetCertificateIssuer, optional
        Certificate issuer
        ## Ref: https://cert-manager.io/docs/concepts/issuer
    privateKey : ValuesApplicationSetCertificatePrivateKey, optional
        Private key of the certificate
    renewBefore : str, required, default is ""
        -- How long before the expiry a certificate should be renewed.
        # @default -- `""` (defaults to 360h = 15d if not specified)
        ## Ref: https://cert-manager.io/docs/usage/certificate/#renewal
    """
    additionalHosts: [any] = []
    annotations: ValuesApplicationSetCertificateAnnotations = {}
    domain: str = ""
    duration: str = ""
    enabled: bool = False
    issuer?: ValuesApplicationSetCertificateIssuer
    privateKey?: ValuesApplicationSetCertificatePrivateKey
    renewBefore: str = ""

schema ValuesApplicationSetCertificateAnnotations:
    r"""
    -- Annotations to be applied to the ApplicationSet Certificate
    """
    [...str]: any

schema ValuesApplicationSetCertificateIssuer:
    r"""
    Certificate issuer
    ## Ref: https://cert-manager.io/docs/concepts/issuer

    Attributes
    ----------
    group : str, required, default is ""
        -- Certificate issuer group. Set if using an external issuer. Eg. `cert-manager.io`
    kind : str, required, default is ""
        -- Certificate issuer kind. Either `Issuer` or `ClusterIssuer`
    name : str, required, default is ""
        -- Certificate issuer name. Eg. `letsencrypt`
    """
    group: str = ""
    kind: str = ""
    name: str = ""

schema ValuesApplicationSetCertificatePrivateKey:
    r"""
    Private key of the certificate

    Attributes
    ----------
    algorithm : str, required, default is "RSA"
        -- Algorithm used to generate certificate private key. One of: `RSA`, `Ed25519` or `ECDSA`
    encoding : str, required, default is "PKCS1"
        -- The private key cryptography standards (PKCS) encoding for private key. Either: `PCKS1` or `PKCS8`
    rotationPolicy : str, required, default is "Never"
        -- Rotation policy of private key when certificate is re-issued. Either: `Never` or `Always`
    size : int, required, default is 2048
        -- Key bit size of the private key. If algorithm is set to `Ed25519`, size is ignored.
    """
    algorithm: str = "RSA"
    encoding: str = "PKCS1"
    rotationPolicy: str = "Never"
    size: int = 2048

schema ValuesApplicationSetContainerPorts:
    r"""
    ApplicationSet controller container ports

    Attributes
    ----------
    metrics : int, required, default is 8080
        -- Metrics container port
    probe : int, required, default is 8081
        -- Probe container port
    webhook : int, required, default is 7000
        -- Webhook container port
    """
    metrics: int = 8080
    probe: int = 8081
    webhook: int = 7000

schema ValuesApplicationSetContainerSecurityContext:
    r"""
    -- ApplicationSet controller container-level security context
    # @default -- See [values.yaml]

    Attributes
    ----------
    allowPrivilegeEscalation : bool, required, default is False
    capabilities : ValuesApplicationSetContainerSecurityContextCapabilities, optional
    readOnlyRootFilesystem : bool, required, default is True
    runAsNonRoot : bool, required, default is True
    seccompProfile : ValuesApplicationSetContainerSecurityContextSeccompProfile, optional
    """
    allowPrivilegeEscalation: bool = False
    capabilities?: ValuesApplicationSetContainerSecurityContextCapabilities
    readOnlyRootFilesystem: bool = True
    runAsNonRoot: bool = True
    seccompProfile?: ValuesApplicationSetContainerSecurityContextSeccompProfile

schema ValuesApplicationSetContainerSecurityContextCapabilities:
    r"""
    ValuesApplicationSetContainerSecurityContextCapabilities

    Attributes
    ----------
    drop : [str], optional
    """
    drop?: [str]

schema ValuesApplicationSetContainerSecurityContextSeccompProfile:
    r"""
    ValuesApplicationSetContainerSecurityContextSeccompProfile

    Attributes
    ----------
    $type : str, required, default is "RuntimeDefault"
    """
    $type: str = "RuntimeDefault"

schema ValuesApplicationSetDeploymentAnnotations:
    r"""
    -- Annotations to be added to ApplicationSet controller Deployment
    """
    [...str]: any

schema ValuesApplicationSetDeploymentStrategy:
    r"""
    -- Deployment strategy to be added to the ApplicationSet controller Deployment
    type: RollingUpdate
    # rollingUpdate:
    #   maxSurge: 25%
    #   maxUnavailable: 25%
    """
    [...str]: any

schema ValuesApplicationSetDnsConfig:
    r"""
    -- [DNS configuration]
    """
    [...str]: any

schema ValuesApplicationSetEmptyDir:
    r"""
    # ApplicationSet controller emptyDir volumes

    Attributes
    ----------
    sizeLimit : str, required, default is ""
        -- EmptyDir size limit for applicationSet controller
        # @default -- `""` (defaults not set if not specified i.e. no size limit)
        sizeLimit: "1Gi"
    """
    sizeLimit: str = ""

schema ValuesApplicationSetImage:
    r"""
    # ApplicationSet controller image

    Attributes
    ----------
    imagePullPolicy : str, required, default is ""
        -- Image pull policy for the ApplicationSet controller
        # @default -- `""` (defaults to global.image.imagePullPolicy)
    repository : str, required, default is ""
        -- Repository to use for the ApplicationSet controller
        # @default -- `""` (defaults to global.image.repository)
    tag : str, required, default is ""
        -- Tag to use for the ApplicationSet controller
        # @default -- `""` (defaults to global.image.tag)
    """
    imagePullPolicy: str = ""
    repository: str = ""
    tag: str = ""

schema ValuesApplicationSetIngress:
    r"""
    # Ingress for the Git Generator webhook
    ## Ref: https://argocd-applicationset.readthedocs.io/en/master/Generators-Git/#webhook-configuration)

    Attributes
    ----------
    annotations : ValuesApplicationSetIngressAnnotations, required, default is {}
        -- Additional ingress annotations
    enabled : bool, required, default is False
        -- Enable an ingress resource for ApplicationSet webhook
    extraHosts : [any], required, default is []
        -- The list of additional hostnames to be covered by ingress record
        # @default -- `[]` (See [values.yaml])
        - name: argocd.example.com
        #   path: /
    extraPaths : [any], required, default is []
        -- Additional ingress paths
        # @default -- `[]` (See [values.yaml])
        - path: /*
        #   pathType: Prefix
        #   backend:
        #     service:
        #       name: ssl-redirect
        #       port:
        #         name: use-annotation
    extraRules : [any], required, default is []
        -- Additional ingress rules
        # @default -- `[]` (See [values.yaml])
        ## Note: Supports use of custom Helm templates
        - http:
        #    paths:
        #    - path: /api/webhook
        #      pathType: Prefix
        #      backend:
        #        service:
        #          name: '{{ include "argo-cd.applicationSet.fullname" . }}'
        #          port:
        #            name: '{{ .Values.applicationSet.service.portName }}'
    extraTls : [any], required, default is []
        -- Additional ingress TLS configuration
        # @default -- `[]` (See [values.yaml])
        - secretName: argocd-applicationset-tls
        #   hosts:
        #     - argocd-applicationset.example.com
    hostname : str, required, default is ""
        -- Argo CD ApplicationSet hostname
        # @default -- `""` (defaults to global.domain)
    ingressClassName : str, required, default is ""
        -- Defines which ingress ApplicationSet controller will implement the resource
    labels : ValuesApplicationSetIngressLabels, required, default is {}
        -- Additional ingress labels
    path : str, required, default is "/api/webhook"
        -- List of ingress paths
    pathType : str, required, default is "Prefix"
        -- Ingress path type. One of `Exact`, `Prefix` or `ImplementationSpecific`
    tls : bool, required, default is False
        -- Enable TLS configuration for the hostname defined at `applicationSet.webhook.ingress.hostname`
        ## TLS certificate will be retrieved from a TLS secret with name:`argocd-applicationset-controller-tls`
    """
    annotations: ValuesApplicationSetIngressAnnotations = {}
    enabled: bool = False
    extraHosts: [any] = []
    extraPaths: [any] = []
    extraRules: [any] = []
    extraTls: [any] = []
    hostname: str = ""
    ingressClassName: str = ""
    labels: ValuesApplicationSetIngressLabels = {}
    path: str = "/api/webhook"
    pathType: str = "Prefix"
    tls: bool = False

schema ValuesApplicationSetIngressAnnotations:
    r"""
    -- Additional ingress annotations
    """
    [...str]: any

schema ValuesApplicationSetIngressLabels:
    r"""
    -- Additional ingress labels
    """
    [...str]: any

schema ValuesApplicationSetLivenessProbe:
    r"""
    ValuesApplicationSetLivenessProbe

    Attributes
    ----------
    enabled : bool, required, default is False
        -- Enable Kubernetes liveness probe for ApplicationSet controller
    failureThreshold : int, required, default is 3
        -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
    initialDelaySeconds : int, required, default is 10
        -- Number of seconds after the container has started before [probe] is initiated
    periodSeconds : int, required, default is 10
        -- How often (in seconds) to perform the [probe]
    successThreshold : int, required, default is 1
        -- Minimum consecutive successes for the [probe] to be considered successful after having failed
    timeoutSeconds : int, required, default is 1
        -- Number of seconds after which the [probe] times out
    """
    enabled: bool = False
    failureThreshold: int = 3
    initialDelaySeconds: int = 10
    periodSeconds: int = 10
    successThreshold: int = 1
    timeoutSeconds: int = 1

schema ValuesApplicationSetMetrics:
    r"""
    # Metrics service configuration

    Attributes
    ----------
    enabled : bool, required, default is False
        -- Deploy metrics service
    service : ValuesApplicationSetMetricsService, optional
    serviceMonitor : ValuesApplicationSetMetricsServiceMonitor, optional
    """
    enabled: bool = False
    service?: ValuesApplicationSetMetricsService
    serviceMonitor?: ValuesApplicationSetMetricsServiceMonitor

schema ValuesApplicationSetMetricsService:
    r"""
    ValuesApplicationSetMetricsService

    Attributes
    ----------
    annotations : ValuesApplicationSetMetricsServiceAnnotations, required, default is {}
        -- Metrics service annotations
    clusterIP : str, required, default is ""
        -- Metrics service clusterIP. `None` makes a "headless service" (no virtual IP)
    labels : ValuesApplicationSetMetricsServiceLabels, required, default is {}
        -- Metrics service labels
    portName : str, required, default is "http-metrics"
        -- Metrics service port name
    servicePort : int, required, default is 8080
        -- Metrics service port
    $type : str, required, default is "ClusterIP"
        -- Metrics service type
    """
    annotations: ValuesApplicationSetMetricsServiceAnnotations = {}
    clusterIP: str = ""
    labels: ValuesApplicationSetMetricsServiceLabels = {}
    portName: str = "http-metrics"
    servicePort: int = 8080
    $type: str = "ClusterIP"

schema ValuesApplicationSetMetricsServiceAnnotations:
    r"""
    -- Metrics service annotations
    """
    [...str]: any

schema ValuesApplicationSetMetricsServiceLabels:
    r"""
    -- Metrics service labels
    """
    [...str]: any

schema ValuesApplicationSetMetricsServiceMonitor:
    r"""
    ValuesApplicationSetMetricsServiceMonitor

    Attributes
    ----------
    additionalLabels : ValuesApplicationSetMetricsServiceMonitorAdditionalLabels, required, default is {}
        -- Prometheus ServiceMonitor labels
    annotations : ValuesApplicationSetMetricsServiceMonitorAnnotations, required, default is {}
        -- Prometheus ServiceMonitor annotations
    enabled : bool, required, default is False
        -- Enable a prometheus ServiceMonitor
    honorLabels : bool, required, default is False
        -- When true, honorLabels preserves the metric’s labels when they collide with the target’s labels.
    interval : str, required, default is "30s"
        -- Prometheus ServiceMonitor interval
    metricRelabelings : [any], required, default is []
        -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
    namespace : str, required, default is ""
        -- Prometheus ServiceMonitor namespace
        monitoring
    relabelings : [any], required, default is []
        -- Prometheus [RelabelConfigs] to apply to samples before scraping
    scheme : str, required, default is ""
        -- Prometheus ServiceMonitor scheme
    scrapeTimeout : str, required, default is ""
        -- Prometheus ServiceMonitor scrapeTimeout. If empty, Prometheus uses the global scrape timeout unless it is less than the target's scrape interval value in which the latter is used.
    selector : ValuesApplicationSetMetricsServiceMonitorSelector, required, default is {}
        -- Prometheus ServiceMonitor selector
        prometheus: kube-prometheus
    tlsConfig : ValuesApplicationSetMetricsServiceMonitorTlsConfig, required, default is {}
        -- Prometheus ServiceMonitor tlsConfig
    """
    additionalLabels: ValuesApplicationSetMetricsServiceMonitorAdditionalLabels = {}
    annotations: ValuesApplicationSetMetricsServiceMonitorAnnotations = {}
    enabled: bool = False
    honorLabels: bool = False
    interval: str = "30s"
    metricRelabelings: [any] = []
    namespace: str = ""
    relabelings: [any] = []
    scheme: str = ""
    scrapeTimeout: str = ""
    selector: ValuesApplicationSetMetricsServiceMonitorSelector = {}
    tlsConfig: ValuesApplicationSetMetricsServiceMonitorTlsConfig = {}

schema ValuesApplicationSetMetricsServiceMonitorAdditionalLabels:
    r"""
    -- Prometheus ServiceMonitor labels
    """
    [...str]: any

schema ValuesApplicationSetMetricsServiceMonitorAnnotations:
    r"""
    -- Prometheus ServiceMonitor annotations
    """
    [...str]: any

schema ValuesApplicationSetMetricsServiceMonitorSelector:
    r"""
    -- Prometheus ServiceMonitor selector
    prometheus: kube-prometheus
    """
    [...str]: any

schema ValuesApplicationSetMetricsServiceMonitorTlsConfig:
    r"""
    -- Prometheus ServiceMonitor tlsConfig
    """
    [...str]: any

schema ValuesApplicationSetNodeSelector:
    r"""
    -- [Node selector]
    # @default -- `{}` (defaults to global.nodeSelector)
    """
    [...str]: any

schema ValuesApplicationSetPdb:
    r"""
    # ApplicationSet controller Pod Disruption Budget
    ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/

    Attributes
    ----------
    annotations : ValuesApplicationSetPdbAnnotations, required, default is {}
        -- Annotations to be added to ApplicationSet controller pdb
    enabled : bool, required, default is False
        -- Deploy a [PodDisruptionBudget] for the ApplicationSet controller
    labels : ValuesApplicationSetPdbLabels, required, default is {}
        -- Labels to be added to ApplicationSet controller pdb
    maxUnavailable : str, required, default is ""
        -- Number of pods that are unavailable after eviction as number or percentage (eg.: 50%).
        ## Has higher precedence over `applicationSet.pdb.minAvailable`
    minAvailable : str, required, default is ""
        -- Number of pods that are available after eviction as number or percentage (eg.: 50%)
        # @default -- `""` (defaults to 0 if not specified)
    """
    annotations: ValuesApplicationSetPdbAnnotations = {}
    enabled: bool = False
    labels: ValuesApplicationSetPdbLabels = {}
    maxUnavailable: str = ""
    minAvailable: str = ""

schema ValuesApplicationSetPdbAnnotations:
    r"""
    -- Annotations to be added to ApplicationSet controller pdb
    """
    [...str]: any

schema ValuesApplicationSetPdbLabels:
    r"""
    -- Labels to be added to ApplicationSet controller pdb
    """
    [...str]: any

schema ValuesApplicationSetPodAnnotations:
    r"""
    -- Annotations for the ApplicationSet controller pods
    """
    [...str]: any

schema ValuesApplicationSetPodLabels:
    r"""
    -- Labels for the ApplicationSet controller pods
    """
    [...str]: any

schema ValuesApplicationSetReadinessProbe:
    r"""
    # Probes for ApplicationSet controller (optional)
    ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/

    Attributes
    ----------
    enabled : bool, required, default is False
        -- Enable Kubernetes liveness probe for ApplicationSet controller
    failureThreshold : int, required, default is 3
        -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
    initialDelaySeconds : int, required, default is 10
        -- Number of seconds after the container has started before [probe] is initiated
    periodSeconds : int, required, default is 10
        -- How often (in seconds) to perform the [probe]
    successThreshold : int, required, default is 1
        -- Minimum consecutive successes for the [probe] to be considered successful after having failed
    timeoutSeconds : int, required, default is 1
        -- Number of seconds after which the [probe] times out
    """
    enabled: bool = False
    failureThreshold: int = 3
    initialDelaySeconds: int = 10
    periodSeconds: int = 10
    successThreshold: int = 1
    timeoutSeconds: int = 1

schema ValuesApplicationSetResources:
    r"""
    -- Resource limits and requests for the ApplicationSet controller pods.
    limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
    """
    [...str]: any

schema ValuesApplicationSetService:
    r"""
    # ApplicationSet service configuration

    Attributes
    ----------
    annotations : ValuesApplicationSetServiceAnnotations, required, default is {}
        -- ApplicationSet service annotations
    labels : ValuesApplicationSetServiceLabels, required, default is {}
        -- ApplicationSet service labels
    port : int, required, default is 7000
        -- ApplicationSet service port
    portName : str, required, default is "http-webhook"
        -- ApplicationSet service port name
    $type : str, required, default is "ClusterIP"
        -- ApplicationSet service type
    """
    annotations: ValuesApplicationSetServiceAnnotations = {}
    labels: ValuesApplicationSetServiceLabels = {}
    port: int = 7000
    portName: str = "http-webhook"
    $type: str = "ClusterIP"

schema ValuesApplicationSetServiceAccount:
    r"""
    ValuesApplicationSetServiceAccount

    Attributes
    ----------
    annotations : ValuesApplicationSetServiceAccountAnnotations, required, default is {}
        -- Annotations applied to created service account
    automountServiceAccountToken : bool, required, default is True
        -- Automount API credentials for the Service Account
    create : bool, required, default is True
        -- Create ApplicationSet controller service account
    labels : ValuesApplicationSetServiceAccountLabels, required, default is {}
        -- Labels applied to created service account
    name : str, required, default is "argocd-applicationset-controller"
        -- ApplicationSet controller service account name
    """
    annotations: ValuesApplicationSetServiceAccountAnnotations = {}
    automountServiceAccountToken: bool = True
    create: bool = True
    labels: ValuesApplicationSetServiceAccountLabels = {}
    name: str = "argocd-applicationset-controller"

schema ValuesApplicationSetServiceAccountAnnotations:
    r"""
    -- Annotations applied to created service account
    """
    [...str]: any

schema ValuesApplicationSetServiceAccountLabels:
    r"""
    -- Labels applied to created service account
    """
    [...str]: any

schema ValuesApplicationSetServiceAnnotations:
    r"""
    -- ApplicationSet service annotations
    """
    [...str]: any

schema ValuesApplicationSetServiceLabels:
    r"""
    -- ApplicationSet service labels
    """
    [...str]: any

schema ValuesConfigs:
    r"""
    # Argo Configs

    Attributes
    ----------
    clusterCredentials : ValuesConfigsClusterCredentials, required, default is {}
        -- Provide one or multiple [external cluster credentials]
        # @default -- `{}` (See [values.yaml])
        ## Ref:
        ## - https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#clusters
        ## - https://argo-cd.readthedocs.io/en/stable/operator-manual/security/#external-cluster-credentials
        ## - https://argo-cd.readthedocs.io/en/stable/user-guide/projects/#project-scoped-repositories-and-clusters
        mycluster:
        #   server: https://mycluster.example.com
        #   labels: {}
        #   annotations: {}
        #   config:
        #     bearerToken: "<authentication token>"
        #     tlsClientConfig:
        #       insecure: false
        #       caData: "<base64 encoded certificate>"
        # mycluster2:
        #   server: https://mycluster2.example.com
        #   labels: {}
        #   annotations: {}
        #   namespaces: namespace1,namespace2
        #   clusterResources: true
        #   config:
        #     bearerToken: "<authentication token>"
        #     tlsClientConfig:
        #       insecure: false
        #       caData: "<base64 encoded certificate>"
        # mycluster3-project-scoped:
        #   server: https://mycluster3.example.com
        #   labels: {}
        #   annotations: {}
        #   project: my-project1
        #   config:
        #     bearerToken: "<authentication token>"
        #     tlsClientConfig:
        #       insecure: false
        #       caData: "<base64 encoded certificate>"
        # mycluster4-sharded:
        #   shard: 1
        #   server: https://mycluster4.example.com
        #   labels: {}
        #   annotations: {}
        #   config:
        #     bearerToken: "<authentication token>"
        #     tlsClientConfig:
        #       insecure: false
        #       caData: "<base64 encoded certificate>"
    cm : ValuesConfigsCm, optional
        General Argo CD configuration
        ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml
    cmp : ValuesConfigsCmp, optional
        ConfigMap for Config Management Plugins
        # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/
        --- Second plugin
        # my-plugin2:
        #   init:
        #     command: [sh]
        #     args: [-c, 'echo "Initializing..."']
        #   generate:
        #     command: [sh, -c]
        #     args:
        #       - |
        #         echo "{\"kind\": \"ConfigMap\", \"apiVersion\": \"v1\", \"metadata\": { \"name\": \"$ARGOCD_APP_NAME\", \"namespace\": \"$ARGOCD_APP_NAMESPACE\", \"annotations\": {\"Foo\": \"$ARGOCD_ENV_FOO\", \"KubeVersion\": \"$KUBE_VERSION\", \"KubeApiVersion\": \"$KUBE_API_VERSIONS\",\"Bar\": \"baz\"}}}"
        #   discover:
        #     fileName: "./subdir/s*.yaml"
        #     find:
        #       glob: "**/Chart.yaml"
        #       command: [sh, -c, find . -name env.yaml]
    credentialTemplates : ValuesConfigsCredentialTemplates, required, default is {}
        -- Repository credentials to be used as Templates for other repos
        ## Creates a secret for each key/value specified below to create repository credentials
        github-enterprise-creds-1:
        #   url: https://github.com/argoproj
        #   githubAppID: 1
        #   githubAppInstallationID: 2
        #   githubAppEnterpriseBaseUrl: https://ghe.example.com/api/v3
        #   githubAppPrivateKey: |
        #     -----BEGIN OPENSSH PRIVATE KEY-----
        #     ...
        #     -----END OPENSSH PRIVATE KEY-----
        # https-creds:
        #   url: https://github.com/argoproj
        #   password: my-password
        #   username: my-username
        # ssh-creds:
        #  url: git@github.com:argoproj-labs
        #  sshPrivateKey: |
        #    -----BEGIN OPENSSH PRIVATE KEY-----
        #    ...
        #    -----END OPENSSH PRIVATE KEY-----
    credentialTemplatesAnnotations : ValuesConfigsCredentialTemplatesAnnotations, required, default is {}
        -- Annotations to be added to `configs.credentialTemplates` Secret
    gpg : ValuesConfigsGpg, optional
        GnuPG public keys for commit verification
        ## Ref: https://argo-cd.readthedocs.io/en/stable/user-guide/gpg-verification/
    params : ValuesConfigsParams, optional
        Argo CD configuration parameters
        ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cmd-params-cm.yaml
    rbac : ValuesConfigsRbac, optional
        Argo CD RBAC policy configuration
        ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md
    repositories : ValuesConfigsRepositories, required, default is {}
        -- Repositories list to be used by applications
        ## Creates a secret for each key/value specified below to create repositories
        ## Note: the last example in the list would use a repository credential template, configured under "configs.credentialTemplates".
        istio-helm-repo:
        #   url: https://storage.googleapis.com/istio-prerelease/daily-build/master-latest-daily/charts
        #   name: istio.io
        #   type: helm
        # private-helm-repo:
        #   url: https://my-private-chart-repo.internal
        #   name: private-repo
        #   type: helm
        #   password: my-password
        #   username: my-username
        # private-repo:
        #   url: https://github.com/argoproj/private-repo
    repositoriesAnnotations : ValuesConfigsRepositoriesAnnotations, required, default is {}
        -- Annotations to be added to `configs.repositories` Secret
    secret : ValuesConfigsSecret, optional
        Argo CD sensitive data
        # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#sensitive-data-and-sso-client-secrets
    ssh : ValuesConfigsSsh, optional
        SSH known hosts for Git repositories
        ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#ssh-known-host-public-keys
    styles : str, required, default is ""
        -- Define custom [CSS styles] for your argo instance.
        # This setting will automatically mount the provided CSS and reference it in the argo configuration.
        # @default -- `""` (See [values.yaml])
        ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/custom-styles/
        styles: |
        #  .sidebar {
        #    background: linear-gradient(to bottom, #999, #777, #333, #222, #111);
        #  }
    tls : ValuesConfigsTls, optional
        Repository TLS certificates
        # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#repositories-using-self-signed-tls-certificates-or-are-signed-by-custom-ca
    """
    clusterCredentials: ValuesConfigsClusterCredentials = {}
    cm?: ValuesConfigsCm
    cmp?: ValuesConfigsCmp
    credentialTemplates: ValuesConfigsCredentialTemplates = {}
    credentialTemplatesAnnotations: ValuesConfigsCredentialTemplatesAnnotations = {}
    gpg?: ValuesConfigsGpg
    params?: ValuesConfigsParams
    rbac?: ValuesConfigsRbac
    repositories: ValuesConfigsRepositories = {}
    repositoriesAnnotations: ValuesConfigsRepositoriesAnnotations = {}
    secret?: ValuesConfigsSecret
    ssh?: ValuesConfigsSsh
    styles: str = ""
    tls?: ValuesConfigsTls

schema ValuesConfigsClusterCredentials:
    r"""
    -- Provide one or multiple [external cluster credentials]
    # @default -- `{}` (See [values.yaml])
    ## Ref:
    ## - https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#clusters
    ## - https://argo-cd.readthedocs.io/en/stable/operator-manual/security/#external-cluster-credentials
    ## - https://argo-cd.readthedocs.io/en/stable/user-guide/projects/#project-scoped-repositories-and-clusters
    mycluster:
    #   server: https://mycluster.example.com
    #   labels: {}
    #   annotations: {}
    #   config:
    #     bearerToken: "<authentication token>"
    #     tlsClientConfig:
    #       insecure: false
    #       caData: "<base64 encoded certificate>"
    # mycluster2:
    #   server: https://mycluster2.example.com
    #   labels: {}
    #   annotations: {}
    #   namespaces: namespace1,namespace2
    #   clusterResources: true
    #   config:
    #     bearerToken: "<authentication token>"
    #     tlsClientConfig:
    #       insecure: false
    #       caData: "<base64 encoded certificate>"
    # mycluster3-project-scoped:
    #   server: https://mycluster3.example.com
    #   labels: {}
    #   annotations: {}
    #   project: my-project1
    #   config:
    #     bearerToken: "<authentication token>"
    #     tlsClientConfig:
    #       insecure: false
    #       caData: "<base64 encoded certificate>"
    # mycluster4-sharded:
    #   shard: 1
    #   server: https://mycluster4.example.com
    #   labels: {}
    #   annotations: {}
    #   config:
    #     bearerToken: "<authentication token>"
    #     tlsClientConfig:
    #       insecure: false
    #       caData: "<base64 encoded certificate>"
    """
    [...str]: any

schema ValuesConfigsCm:
    r"""
    General Argo CD configuration
    ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml

    Attributes
    ----------
    "admin.enabled" : bool, required, default is True
        -- Enable local admin user
        ## Ref: https://argo-cd.readthedocs.io/en/latest/faq/#how-to-disable-admin-user
    annotations : ValuesConfigsCmAnnotations, required, default is {}
        -- Annotations to be added to argocd-cm configmap
    "application.instanceLabelKey" : str, required, default is "argocd.argoproj.io/instance"
        -- The name of tracking label used by Argo CD for resource pruning
    create : bool, required, default is True
        -- Create the argocd-cm configmap for [declarative setup]
    "exec.enabled" : bool, required, default is False
        -- Enable exec feature in Argo UI
        ## Ref: https://argo-cd.readthedocs.io/en/latest/operator-manual/rbac/#exec-resource
    "server.rbac.log.enforce.enable" : bool, required, default is False
        -- Enable logs RBAC enforcement
        ## Ref: https://argo-cd.readthedocs.io/en/latest/operator-manual/upgrading/2.3-2.4/#enable-logs-rbac-enforcement
    "statusbadge.enabled" : bool, required, default is False
        -- Enable Status Badge
        ## Ref: https://argo-cd.readthedocs.io/en/stable/user-guide/status-badge/
        Dex configuration
        # dex.config: |
        #   connectors:
        #     # GitHub example
        #     - type: github
        #       id: github
        #       name: GitHub
        #       config:
        #         clientID: aabbccddeeff00112233
        #         clientSecret: $dex.github.clientSecret # Alternatively $<some_K8S_secret>:dex.github.clientSecret
        #         orgs:
        #         - name: your-github-org

        # OIDC configuration as an alternative to dex (optional).
        # oidc.config: |
        #   name: AzureAD
        #   issuer: https://login.microsoftonline.com/TENANT_ID/v2.0
        #   clientID: CLIENT_ID
        #   clientSecret: $oidc.azuread.clientSecret
        #   rootCA: |
        #     -----BEGIN CERTIFICATE-----
        #     ... encoded certificate data here ...
        #     -----END CERTIFICATE-----
        #   requestedIDTokenClaims:
        #     groups:
        #       essential: true
        #   requestedScopes:
        #     - openid
        #     - profile
        #     - email

        # Extension Configuration
        ## Ref: https://argo-cd.readthedocs.io/en/latest/developer-guide/extensions/proxy-extensions/
        # extension.config: |
        #   extensions:
        #   - name: httpbin
        #     backend:
        #       connectionTimeout: 2s
        #       keepAlive: 15s
        #       idleConnectionTimeout: 60s
        #       maxIdleConnections: 30
        #       services:
        #       - url: http://httpbin.org
        #         headers:
        #         - name: some-header
        #           value: '$some.argocd.secret.key'
        #         cluster:
        #           name: some-cluster
        #           server: https://some-cluster
    "timeout.hard.reconciliation" : str, required, default is "0s"
        -- Timeout to refresh application data as well as target manifests cache
    "timeout.reconciliation" : str, required, default is "180s"
        -- Timeout to discover if a new manifests version got published to the repository
    """
    "admin.enabled": bool = True
    annotations: ValuesConfigsCmAnnotations = {}
    "application.instanceLabelKey": str = "argocd.argoproj.io/instance"
    create: bool = True
    "exec.enabled": bool = False
    "server.rbac.log.enforce.enable": bool = False
    "statusbadge.enabled": bool = False
    "timeout.hard.reconciliation": str = "0s"
    "timeout.reconciliation": str = "180s"

schema ValuesConfigsCmAnnotations:
    r"""
    -- Annotations to be added to argocd-cm configmap
    """
    [...str]: any

schema ValuesConfigsCmp:
    r"""
    ConfigMap for Config Management Plugins
    # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/
    --- Second plugin
    # my-plugin2:
    #   init:
    #     command: [sh]
    #     args: [-c, 'echo "Initializing..."']
    #   generate:
    #     command: [sh, -c]
    #     args:
    #       - |
    #         echo "{\"kind\": \"ConfigMap\", \"apiVersion\": \"v1\", \"metadata\": { \"name\": \"$ARGOCD_APP_NAME\", \"namespace\": \"$ARGOCD_APP_NAMESPACE\", \"annotations\": {\"Foo\": \"$ARGOCD_ENV_FOO\", \"KubeVersion\": \"$KUBE_VERSION\", \"KubeApiVersion\": \"$KUBE_API_VERSIONS\",\"Bar\": \"baz\"}}}"
    #   discover:
    #     fileName: "./subdir/s*.yaml"
    #     find:
    #       glob: "**/Chart.yaml"
    #       command: [sh, -c, find . -name env.yaml]

    Attributes
    ----------
    annotations : ValuesConfigsCmpAnnotations, required, default is {}
        -- Annotations to be added to argocd-cmp-cm configmap
    create : bool, required, default is False
        -- Create the argocd-cmp-cm configmap
    plugins : ValuesConfigsCmpPlugins, required, default is {}
        -- Plugin yaml files to be added to argocd-cmp-cm
        --- First plugin
        # my-plugin:
        #   init:
        #     command: [sh]
        #     args: [-c, 'echo "Initializing..."']
        #   generate:
        #     command: [sh, -c]
        #     args:
        #       - |
        #         echo "{\"kind\": \"ConfigMap\", \"apiVersion\": \"v1\", \"metadata\": { \"name\": \"$ARGOCD_APP_NAME\", \"namespace\": \"$ARGOCD_APP_NAMESPACE\", \"annotations\": {\"Foo\": \"$ARGOCD_ENV_FOO\", \"KubeVersion\": \"$KUBE_VERSION\", \"KubeApiVersion\": \"$KUBE_API_VERSIONS\",\"Bar\": \"baz\"}}}"
        #   discover:
        #     fileName: "./subdir/s*.yaml"
        #     find:
        #       glob: "**/Chart.yaml"
        #       command: [sh, -c, find . -name env.yaml]
    """
    annotations: ValuesConfigsCmpAnnotations = {}
    create: bool = False
    plugins: ValuesConfigsCmpPlugins = {}

schema ValuesConfigsCmpAnnotations:
    r"""
    -- Annotations to be added to argocd-cmp-cm configmap
    """
    [...str]: any

schema ValuesConfigsCmpPlugins:
    r"""
    -- Plugin yaml files to be added to argocd-cmp-cm
    --- First plugin
    # my-plugin:
    #   init:
    #     command: [sh]
    #     args: [-c, 'echo "Initializing..."']
    #   generate:
    #     command: [sh, -c]
    #     args:
    #       - |
    #         echo "{\"kind\": \"ConfigMap\", \"apiVersion\": \"v1\", \"metadata\": { \"name\": \"$ARGOCD_APP_NAME\", \"namespace\": \"$ARGOCD_APP_NAMESPACE\", \"annotations\": {\"Foo\": \"$ARGOCD_ENV_FOO\", \"KubeVersion\": \"$KUBE_VERSION\", \"KubeApiVersion\": \"$KUBE_API_VERSIONS\",\"Bar\": \"baz\"}}}"
    #   discover:
    #     fileName: "./subdir/s*.yaml"
    #     find:
    #       glob: "**/Chart.yaml"
    #       command: [sh, -c, find . -name env.yaml]
    """
    [...str]: any

schema ValuesConfigsCredentialTemplates:
    r"""
    -- Repository credentials to be used as Templates for other repos
    ## Creates a secret for each key/value specified below to create repository credentials
    github-enterprise-creds-1:
    #   url: https://github.com/argoproj
    #   githubAppID: 1
    #   githubAppInstallationID: 2
    #   githubAppEnterpriseBaseUrl: https://ghe.example.com/api/v3
    #   githubAppPrivateKey: |
    #     -----BEGIN OPENSSH PRIVATE KEY-----
    #     ...
    #     -----END OPENSSH PRIVATE KEY-----
    # https-creds:
    #   url: https://github.com/argoproj
    #   password: my-password
    #   username: my-username
    # ssh-creds:
    #  url: git@github.com:argoproj-labs
    #  sshPrivateKey: |
    #    -----BEGIN OPENSSH PRIVATE KEY-----
    #    ...
    #    -----END OPENSSH PRIVATE KEY-----
    """
    [...str]: any

schema ValuesConfigsCredentialTemplatesAnnotations:
    r"""
    -- Annotations to be added to `configs.credentialTemplates` Secret
    """
    [...str]: any

schema ValuesConfigsGpg:
    r"""
    GnuPG public keys for commit verification
    ## Ref: https://argo-cd.readthedocs.io/en/stable/user-guide/gpg-verification/

    Attributes
    ----------
    annotations : ValuesConfigsGpgAnnotations, required, default is {}
        -- Annotations to be added to argocd-gpg-keys-cm configmap
    keys : ValuesConfigsGpgKeys, required, default is {}
        -- [GnuPG] public keys to add to the keyring
        # @default -- `{}` (See [values.yaml])
        ## Note: Public keys should be exported with `gpg --export --armor <KEY>`
        4AEE18F83AFDEB23: |
        #   -----BEGIN PGP PUBLIC KEY BLOCK-----
        #   ...
        #   -----END PGP PUBLIC KEY BLOCK-----
    """
    annotations: ValuesConfigsGpgAnnotations = {}
    keys: ValuesConfigsGpgKeys = {}

schema ValuesConfigsGpgAnnotations:
    r"""
    -- Annotations to be added to argocd-gpg-keys-cm configmap
    """
    [...str]: any

schema ValuesConfigsGpgKeys:
    r"""
    -- [GnuPG] public keys to add to the keyring
    # @default -- `{}` (See [values.yaml])
    ## Note: Public keys should be exported with `gpg --export --armor <KEY>`
    4AEE18F83AFDEB23: |
    #   -----BEGIN PGP PUBLIC KEY BLOCK-----
    #   ...
    #   -----END PGP PUBLIC KEY BLOCK-----
    """
    [...str]: any

schema ValuesConfigsParams:
    r"""
    Argo CD configuration parameters
    ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cmd-params-cm.yaml

    Attributes
    ----------
    annotations : ValuesConfigsParamsAnnotations, required, default is {}
        -- Annotations to be added to the argocd-cmd-params-cm ConfigMap
    "application.namespaces" : str, required, default is ""
        -- Enables [Applications in any namespace]
        ## List of additional namespaces where applications may be created in and reconciled from.
        ## The namespace where Argo CD is installed to will always be allowed.
        ## Set comma-separated list. (e.g. app-team-one, app-team-two)
    "applicationsetcontroller.enable.progressive.syncs" : bool, required, default is False
        -- Enables use of the Progressive Syncs capability
    "applicationsetcontroller.namespaces" : str, required, default is ""
        -- A list of glob patterns specifying where to look for ApplicationSet resources. (e.g. `"argocd,argocd-appsets-*"`)
        # @default -- `""` (default is only the ns where the controller is installed)
        ## For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Appset-Any-Namespace/
    "applicationsetcontroller.policy" : str, required, default is "sync"
        # ApplicationSet Properties
        # -- Modify how application is synced between the generator and the cluster. One of: `sync`, `create-only`, `create-update`, `create-delete`
    "controller.ignore.normalizer.jq.timeout" : str, required, default is "1s"
        -- JQ Path expression timeout
        ## By default, the evaluation of a JQPathExpression is limited to one second.
        ## If you encounter a "JQ patch execution timed out" error message due to a complex JQPathExpression
        ## that requires more time to evaluate, you can extend the timeout period.
    "controller.operation.processors" : int, required, default is 10
        -- Number of application operation processors
    "controller.repo.server.timeout.seconds" : int, required, default is 60
        -- Repo server RPC call timeout seconds.
    "controller.self.heal.timeout.seconds" : int, required, default is 5
        -- Specifies timeout between application self heal attempts
    "controller.status.processors" : int, required, default is 20
        # Controller Properties
        # -- Number of application status processors
    create : bool, required, default is True
        -- Create the argocd-cmd-params-cm configmap
        # If false, it is expected the configmap will be created by something else.
    "otlp.address" : str, required, default is ""
        # Generic parameters
        # -- Open-Telemetry collector address: (e.g. "otel-collector:4317")
    "reposerver.parallelism.limit" : int, required, default is 0
        # Repo-server properties
        # -- Limit on number of concurrent manifests generate requests. Any value less the 1 means no limit.
    "server.basehref" : str, required, default is "/"
        -- Value for base href in index.html. Used if Argo CD is running behind reverse proxy under subpath different from /
    "server.disable.auth" : bool, required, default is False
        -- Disable Argo CD RBAC for user authentication
    "server.enable.gzip" : bool, required, default is True
        -- Enable GZIP compression
    "server.enable.proxy.extension" : bool, required, default is False
        -- Enable proxy extension feature. (proxy extension is in Alpha phase)
    "server.insecure" : bool, required, default is False
        # Server properties
        # -- Run server without TLS
        ## NOTE: This value should be set when you generate params by other means as it changes ports used by ingress template.
    "server.rootpath" : str, required, default is ""
        -- Used if Argo CD is running behind reverse proxy under subpath different from /
    "server.staticassets" : str, required, default is "/shared/app"
        -- Directory path that contains additional static assets
    "server.x.frame.options" : str, required, default is "sameorigin"
        -- Set X-Frame-Options header in HTTP responses to value. To disable, set to "".
    """
    annotations: ValuesConfigsParamsAnnotations = {}
    "application.namespaces": str = ""
    "applicationsetcontroller.enable.progressive.syncs": bool = False
    "applicationsetcontroller.namespaces": str = ""
    "applicationsetcontroller.policy": str = "sync"
    "controller.ignore.normalizer.jq.timeout": str = "1s"
    "controller.operation.processors": int = 10
    "controller.repo.server.timeout.seconds": int = 60
    "controller.self.heal.timeout.seconds": int = 5
    "controller.status.processors": int = 20
    create: bool = True
    "otlp.address": str = ""
    "reposerver.parallelism.limit": int = 0
    "server.basehref": str = "/"
    "server.disable.auth": bool = False
    "server.enable.gzip": bool = True
    "server.enable.proxy.extension": bool = False
    "server.insecure": bool = False
    "server.rootpath": str = ""
    "server.staticassets": str = "/shared/app"
    "server.x.frame.options": str = "sameorigin"

schema ValuesConfigsParamsAnnotations:
    r"""
    -- Annotations to be added to the argocd-cmd-params-cm ConfigMap
    """
    [...str]: any

schema ValuesConfigsRbac:
    r"""
    Argo CD RBAC policy configuration
    ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md

    Attributes
    ----------
    annotations : ValuesConfigsRbacAnnotations, required, default is {}
        -- Annotations to be added to argocd-rbac-cm configmap
    create : bool, required, default is True
        -- Create the argocd-rbac-cm configmap with ([Argo CD RBAC policy]) definitions.
        # If false, it is expected the configmap will be created by something else.
        # Argo CD will not work if there is no configmap created with the name above.
    "policy.csv" : str, required, default is ""
        -- File containing user-defined policies and role definitions.
        # @default -- `''` (See [values.yaml])
        Policy rules are in the form:
        #  p, subject, resource, action, object, effect
        # Role definitions and bindings are in the form:
        #  g, subject, inherited-subject
        # policy.csv: |
        #   p, role:org-admin, applications, *, */*, allow
        #   p, role:org-admin, clusters, get, *, allow
        #   p, role:org-admin, repositories, *, *, allow
        #   p, role:org-admin, logs, get, *, allow
        #   p, role:org-admin, exec, create, */*, allow
        #   g, your-github-org:your-team, role:org-admin
    "policy.default" : str, required, default is ""
        -- The name of the default role which Argo CD will falls back to, when authorizing API requests (optional).
        # If omitted or empty, users may be still be able to login, but will see no apps, projects, etc...
    "policy.matchMode" : str, required, default is "glob"
        -- Matcher function for Casbin, `glob` for glob matcher and `regex` for regex matcher.
    scopes : str, required, default is "[groups]"
        -- OIDC scopes to examine during rbac enforcement (in addition to `sub` scope).
        # The scope value can be a string, or a list of strings.
    """
    annotations: ValuesConfigsRbacAnnotations = {}
    create: bool = True
    "policy.csv": str = ""
    "policy.default": str = ""
    "policy.matchMode": str = "glob"
    scopes: str = "[groups]"

schema ValuesConfigsRbacAnnotations:
    r"""
    -- Annotations to be added to argocd-rbac-cm configmap
    """
    [...str]: any

schema ValuesConfigsRepositories:
    r"""
    -- Repositories list to be used by applications
    ## Creates a secret for each key/value specified below to create repositories
    ## Note: the last example in the list would use a repository credential template, configured under "configs.credentialTemplates".
    istio-helm-repo:
    #   url: https://storage.googleapis.com/istio-prerelease/daily-build/master-latest-daily/charts
    #   name: istio.io
    #   type: helm
    # private-helm-repo:
    #   url: https://my-private-chart-repo.internal
    #   name: private-repo
    #   type: helm
    #   password: my-password
    #   username: my-username
    # private-repo:
    #   url: https://github.com/argoproj/private-repo
    """
    [...str]: any

schema ValuesConfigsRepositoriesAnnotations:
    r"""
    -- Annotations to be added to `configs.repositories` Secret
    """
    [...str]: any

schema ValuesConfigsSecret:
    r"""
    Argo CD sensitive data
    # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#sensitive-data-and-sso-client-secrets

    Attributes
    ----------
    annotations : ValuesConfigsSecretAnnotations, required, default is {}
        -- Annotations to be added to argocd-secret
    argocdServerAdminPassword : str, required, default is ""
        -- Bcrypt hashed admin password
        ## Argo expects the password in the secret to be bcrypt hashed. You can create this hash with
        ## `htpasswd -nbBC 10 "" $ARGO_PWD | tr -d ':\n' | sed 's/$2y/$2a/'`
    argocdServerAdminPasswordMtime : str, required, default is ""
        -- Admin password modification time. Eg. `"2006-01-02T15:04:05Z"`
        # @default -- `""` (defaults to current time)
    azureDevops : ValuesConfigsSecretAzureDevops, optional
        # Azure DevOps
    bitbucketServerSecret : str, required, default is ""
        -- Shared secret for authenticating BitbucketServer webhook events
    bitbucketUUID : str, required, default is ""
        -- UUID for authenticating Bitbucket webhook events
    createSecret : bool, required, default is True
        -- Create the argocd-secret
    extra : ValuesConfigsSecretExtra, required, default is {}
        -- add additional secrets to be added to argocd-secret
        ## Custom secrets. Useful for injecting SSO secrets into environment variables.
        ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#sensitive-data-and-sso-client-secrets
        ## Note that all values must be non-empty.
        LDAP_PASSWORD: "mypassword"
    githubSecret : str, required, default is ""
        -- Shared secret for authenticating GitHub webhook events
    gitlabSecret : str, required, default is ""
        -- Shared secret for authenticating GitLab webhook events
    gogsSecret : str, required, default is ""
        -- Shared secret for authenticating Gogs webhook events
    labels : ValuesConfigsSecretLabels, required, default is {}
        -- Labels to be added to argocd-secret
    """
    annotations: ValuesConfigsSecretAnnotations = {}
    argocdServerAdminPassword: str = ""
    argocdServerAdminPasswordMtime: str = ""
    azureDevops?: ValuesConfigsSecretAzureDevops
    bitbucketServerSecret: str = ""
    bitbucketUUID: str = ""
    createSecret: bool = True
    extra: ValuesConfigsSecretExtra = {}
    githubSecret: str = ""
    gitlabSecret: str = ""
    gogsSecret: str = ""
    labels: ValuesConfigsSecretLabels = {}

schema ValuesConfigsSecretAnnotations:
    r"""
    -- Annotations to be added to argocd-secret
    """
    [...str]: any

schema ValuesConfigsSecretAzureDevops:
    r"""
    # Azure DevOps

    Attributes
    ----------
    password : str, required, default is ""
        -- Shared secret password for authenticating Azure DevOps webhook events
    username : str, required, default is ""
        -- Shared secret username for authenticating Azure DevOps webhook events
    """
    password: str = ""
    username: str = ""

schema ValuesConfigsSecretExtra:
    r"""
    -- add additional secrets to be added to argocd-secret
    ## Custom secrets. Useful for injecting SSO secrets into environment variables.
    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#sensitive-data-and-sso-client-secrets
    ## Note that all values must be non-empty.
    LDAP_PASSWORD: "mypassword"
    """
    [...str]: any

schema ValuesConfigsSecretLabels:
    r"""
    -- Labels to be added to argocd-secret
    """
    [...str]: any

schema ValuesConfigsSsh:
    r"""
    SSH known hosts for Git repositories
    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#ssh-known-host-public-keys

    Attributes
    ----------
    annotations : ValuesConfigsSshAnnotations, required, default is {}
        -- Annotations to be added to argocd-ssh-known-hosts-cm configmap
    create : bool, required, default is True
        -- Specifies if the argocd-ssh-known-hosts-cm configmap should be created by Helm.
    extraHosts : str, required, default is ""
        -- Additional known hosts for private repositories
    knownHosts : str, required, default is r"""
    [ssh.github.com]
    -sha2 - nistp256
    


ssh - ed25519
AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl

ssh - rsa

bitbucket.org
ecdsa - sha2 - nistp256

bitbucket.org
ssh - ed25519
AAAAC3NzaC1lZDI1NTE5AAAAIIazEu89wgQZ4bqs3d63QSMzYVa0MuJ2e2gKTKqu + UUO
bitbucket.org
ssh - rsa

github.com
ecdsa - sha2 - nistp256

github.com
ssh - ed25519
AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
github.com
ssh - rsa

gitlab.com
ecdsa - sha2 - nistp256
AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY = 
gitlab.com
ssh - ed25519
AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn / nOeHHE5UOzRdf
gitlab.com
ssh - rsa
AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ + jqCMRgBqB98u3z + +J1sKlXHWfM9dyhSevkMwSbhoR8XIq / U0tCNyokEi / ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT / ia1NEKjunUqu1xOB / StKDHMoX4 / OKyIzuS0q / T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB + MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl + siMkPGbO5xR / En4iEY6K2XPASUEMaieWVNTRCtJ4S8H + 9
ssh.dev.azure.com
ssh - rsa
AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0 / QUfTTqeu + tm22gOsv + VrVTMk6vwRU75gY / y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf + FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3 / QpyNLHbWDdzwtrlS + ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21 + nZcmCTISQBtdcyPaEno7fFQMDD26 / s0lfKob4Kw8H
vs - ssh.visualstudio.com
ssh - rsa
AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0 / QUfTTqeu + tm22gOsv + VrVTMk6vwRU75gY / y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf + FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3 / QpyNLHbWDdzwtrlS + ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21 + nZcmCTISQBtdcyPaEno7fFQMDD26 / s0lfKob4Kw8H
"""
        -- Known hosts to be added to the known host list by default.
        # @default -- See [values.yaml]
    """

annotations: ValuesConfigsSshAnnotations = {}
create: bool = True
extraHosts: str = ""
knownHosts: str = r"""[ssh.github.com]:443 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=
[ssh.github.com]:443 ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
[ssh.github.com]:443 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=
bitbucket.org ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBPIQmuzMBuKdWeF4+a2sjSSpBK0iqitSQ+5BM9KhpexuGt20JpTVM7u5BDZngncgrqDMbWdxMWWOGtZ9UgbqgZE=
bitbucket.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIazEu89wgQZ4bqs3d63QSMzYVa0MuJ2e2gKTKqu+UUO
bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDQeJzhupRu0u0cdegZIa8e86EG2qOCsIsD1Xw0xSeiPDlCr7kq97NLmMbpKTX6Esc30NuoqEEHCuc7yWtwp8dI76EEEB1VqY9QJq6vk+aySyboD5QF61I/1WeTwu+deCbgKMGbUijeXhtfbxSxm6JwGrXrhBdofTsbKRUsrN1WoNgUa8uqN1Vx6WAJw1JHPhglEGGHea6QICwJOAr/6mrui/oB7pkaWKHj3z7d1IC4KWLtY47elvjbaTlkN04Kc/5LFEirorGYVbt15kAUlqGM65pk6ZBxtaO3+30LVlORZkxOh+LKL/BvbZ/iRNhItLqNyieoQj/uh/7Iv4uyH/cV/0b4WDSd3DptigWq84lJubb9t/DnZlrJazxyDCulTmKdOR7vs9gMTo+uoIrPSb8ScTtvw65+odKAlBj59dhnVp9zd7QUojOpXlL62Aw56U4oO+FALuevvMjiWeavKhJqlR7i5n9srYcrNV7ttmDw7kf/97P5zauIhxcjX+xHv4M=
github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=
github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
github.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=
gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=
gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf
gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9
ssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
vs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
"""

schema ValuesConfigsSshAnnotations:
    r"""
    -- Annotations to be added to argocd-ssh-known-hosts-cm configmap
    """
    [...str]: any

schema ValuesConfigsTls:
    r"""
    Repository TLS certificates
    # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#repositories-using-self-signed-tls-certificates-or-are-signed-by-custom-ca

    Attributes
    ----------
    annotations : ValuesConfigsTlsAnnotations, required, default is {}
        -- Annotations to be added to argocd-tls-certs-cm configmap
    certificates : ValuesConfigsTlsCertificates, required, default is {}
        -- TLS certificates for Git repositories
        # @default -- `{}` (See [values.yaml])
        server.example.com: |
        #   -----BEGIN CERTIFICATE-----
        #   ...
        #   -----END CERTIFICATE-----
    """
    annotations: ValuesConfigsTlsAnnotations = {}
    certificates: ValuesConfigsTlsCertificates = {}

schema ValuesConfigsTlsAnnotations:
    r"""
    -- Annotations to be added to argocd-tls-certs-cm configmap
    """
    [...str]: any

schema ValuesConfigsTlsCertificates:
    r"""
    -- TLS certificates for Git repositories
    # @default -- `{}` (See [values.yaml])
    server.example.com: |
    #   -----BEGIN CERTIFICATE-----
    #   ...
    #   -----END CERTIFICATE-----
    """
    [...str]: any

schema ValuesController:
    r"""
    # Application controller

    Attributes
    ----------
    affinity : ValuesControllerAffinity, required, default is {}
        -- Assign custom [affinity] rules to the deployment
        # @default -- `{}` (defaults to global.affinity preset)
    automountServiceAccountToken : bool, required, default is True
        -- Automount API credentials for the Service Account into the pod.
    clusterRoleRules : ValuesControllerClusterRoleRules, optional
        # Enable this and set the rules: to whatever custom rules you want for the Cluster Role resource.
        ## Defaults to off
    containerPorts : ValuesControllerContainerPorts, optional
        Application controller container ports
    containerSecurityContext : ValuesControllerContainerSecurityContext, optional
        -- Application controller container-level security context
        # @default -- See [values.yaml]
    deploymentAnnotations : ValuesControllerDeploymentAnnotations, required, default is {}
        -- Annotations for the application controller Deployment
    dnsConfig : ValuesControllerDnsConfig, required, default is {}
        -- [DNS configuration]
    dnsPolicy : str, required, default is "ClusterFirst"
        -- Alternative DNS policy for application controller pods
    dynamicClusterDistribution : bool, required, default is False
        -- Enable dynamic cluster distribution (alpha)
        # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/dynamic-cluster-distribution
        ## This is done using a deployment instead of a statefulSet
        ## When replicas are added or removed, the sharding algorithm is re-run to ensure that the
        ## clusters are distributed according to the algorithm. If the algorithm is well-balanced,
        ## like round-robin, then the shards will be well-balanced.
    emptyDir : ValuesControllerEmptyDir, optional
        # Application controller emptyDir volumes
    env : [any], required, default is []
        -- Environment variables to pass to application controller
    envFrom : [any], required, default is []
        -- envFrom to pass to application controller
        # @default -- `[]` (See [values.yaml])
        - configMapRef:
        #     name: config-map-name
        # - secretRef:
        #     name: secret-name
    extraArgs : [any], required, default is []
        -- Additional command line arguments to pass to application controller
    extraContainers : [any], required, default is []
        -- Additional containers to be added to the application controller pod
        ## Note: Supports use of custom Helm templates
    heartbeatTime : int, required, default is 10
        -- Application controller heartbeat time
        # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/dynamic-cluster-distribution/#working-of-dynamic-distribution
    hostNetwork : bool, required, default is False
        -- Host Network for application controller pods
    image : ValuesControllerImage, optional
        # Application controller image
    imagePullSecrets : [any], required, default is []
        -- Secrets with credentials to pull images from a private registry
        # @default -- `[]` (defaults to global.imagePullSecrets)
    initContainers : [any], required, default is []
        -- Init containers to add to the application controller pod
        ## If your target Kubernetes cluster(s) require a custom credential (exec) plugin
        ## you could use this (and the same in the server pod) to provide such executable
        ## Ref: https://kubernetes.io/docs/reference/access-authn-authz/authentication/#client-go-credential-plugins
        ## Note: Supports use of custom Helm templates
        - name: download-tools
        #    image: alpine:3
        #    command: [sh, -c]
        #    args:
        #      - wget -qO kubelogin.zip https://github.com/Azure/kubelogin/releases/download/v0.0.25/kubelogin-linux-amd64.zip &&
        #        unzip kubelogin.zip && mv bin/linux_amd64/kubelogin /custom-tools/
        #    volumeMounts:
        #      - mountPath: /custom-tools
        #        name: custom-tools
    metrics : ValuesControllerMetrics, optional
        # Application controller metrics configuration
    name : str, required, default is "application-controller"
        -- Application controller name string
    nodeSelector : ValuesControllerNodeSelector, required, default is {}
        -- [Node selector]
        # @default -- `{}` (defaults to global.nodeSelector)
    pdb : ValuesControllerPdb, optional
        # Application controller Pod Disruption Budget
        ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
    podAnnotations : ValuesControllerPodAnnotations, required, default is {}
        -- Annotations to be added to application controller pods
    podLabels : ValuesControllerPodLabels, required, default is {}
        -- Labels to be added to application controller pods
    priorityClassName : str, required, default is ""
        -- Priority class for the application controller pods
        # @default -- `""` (defaults to global.priorityClassName)
    readinessProbe : ValuesControllerReadinessProbe, optional
        Readiness probe for application controller
        ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    replicas : int, required, default is 1
        -- The number of application controller pods to run.
        # Additional replicas will cause sharding of managed clusters across number of replicas.
        ## With dynamic cluster distribution turned on, sharding of the clusters will gracefully
        ## rebalance if the number of replica's changes or one becomes unhealthy. (alpha)
    resources : ValuesControllerResources, required, default is {}
        -- Resource limits and requests for the application controller pods
        limits:
        #    cpu: 500m
        #    memory: 512Mi
        #  requests:
        #    cpu: 250m
        #    memory: 256Mi
    revisionHistoryLimit : int, required, default is 5
        -- Maximum number of controller revisions that will be maintained in StatefulSet history
    runtimeClassName : str, required, default is ""
        -- Runtime class name for the application controller
        # @default -- `""` (defaults to global.runtimeClassName)
    serviceAccount : ValuesControllerServiceAccount, optional
    statefulsetAnnotations : ValuesControllerStatefulsetAnnotations, required, default is {}
        -- Annotations for the application controller StatefulSet
    terminationGracePeriodSeconds : int, required, default is 30
        -- terminationGracePeriodSeconds for container lifecycle hook
    tolerations : [any], required, default is []
        -- [Tolerations] for use with node taints
        # @default -- `[]` (defaults to global.tolerations)
    topologySpreadConstraints : [any], required, default is []
        -- Assign custom [TopologySpreadConstraints] rules to the application controller
        # @default -- `[]` (defaults to global.topologySpreadConstraints)
        ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/
        ## If labelSelector is left out, it will default to the labelSelector configuration of the deployment
        - maxSkew: 1
        #   topologyKey: topology.kubernetes.io/zone
        #   whenUnsatisfiable: DoNotSchedule
    volumeMounts : [any], required, default is []
        -- Additional volumeMounts to the application controller main container
        - mountPath: /usr/local/bin/kubelogin
        #    name: custom-tools
        #    subPath: kubelogin
    volumes : [any], required, default is []
        -- Additional volumes to the application controller pod
        - name: custom-tools
        #    emptyDir: {}
    """
    affinity: ValuesControllerAffinity = {}
    automountServiceAccountToken: bool = True
    clusterRoleRules?: ValuesControllerClusterRoleRules
    containerPorts?: ValuesControllerContainerPorts
    containerSecurityContext?: ValuesControllerContainerSecurityContext
    deploymentAnnotations: ValuesControllerDeploymentAnnotations = {}
    dnsConfig: ValuesControllerDnsConfig = {}
    dnsPolicy: str = "ClusterFirst"
    dynamicClusterDistribution: bool = False
    emptyDir?: ValuesControllerEmptyDir
    env: [any] = []
    envFrom: [any] = []
    extraArgs: [any] = []
    extraContainers: [any] = []
    heartbeatTime: int = 10
    hostNetwork: bool = False
    image?: ValuesControllerImage
    imagePullSecrets: [any] = []
    initContainers: [any] = []
    metrics?: ValuesControllerMetrics
    name: str = "application-controller"
    nodeSelector: ValuesControllerNodeSelector = {}
    pdb?: ValuesControllerPdb
    podAnnotations: ValuesControllerPodAnnotations = {}
    podLabels: ValuesControllerPodLabels = {}
    priorityClassName: str = ""
    readinessProbe?: ValuesControllerReadinessProbe
    replicas: int = 1
    resources: ValuesControllerResources = {}
    revisionHistoryLimit: int = 5
    runtimeClassName: str = ""
    serviceAccount?: ValuesControllerServiceAccount
    statefulsetAnnotations: ValuesControllerStatefulsetAnnotations = {}
    terminationGracePeriodSeconds: int = 30
    tolerations: [any] = []
    topologySpreadConstraints: [any] = []
    volumeMounts: [any] = []
    volumes: [any] = []

schema ValuesControllerAffinity:
    r"""
    -- Assign custom [affinity] rules to the deployment
    # @default -- `{}` (defaults to global.affinity preset)
    """
    [...str]: any

schema ValuesControllerClusterRoleRules:
    r"""
    # Enable this and set the rules: to whatever custom rules you want for the Cluster Role resource.
    ## Defaults to off

    Attributes
    ----------
    enabled : bool, required, default is False
        -- Enable custom rules for the application controller's ClusterRole resource
    rules : [any], required, default is []
        -- List of custom rules for the application controller's ClusterRole resource
    """
    enabled: bool = False
    rules: [any] = []

schema ValuesControllerContainerPorts:
    r"""
    Application controller container ports

    Attributes
    ----------
    metrics : int, required, default is 8082
        -- Metrics container port
    """
    metrics: int = 8082

schema ValuesControllerContainerSecurityContext:
    r"""
    -- Application controller container-level security context
    # @default -- See [values.yaml]

    Attributes
    ----------
    allowPrivilegeEscalation : bool, required, default is False
    capabilities : ValuesControllerContainerSecurityContextCapabilities, optional
    readOnlyRootFilesystem : bool, required, default is True
    runAsNonRoot : bool, required, default is True
    seccompProfile : ValuesControllerContainerSecurityContextSeccompProfile, optional
    """
    allowPrivilegeEscalation: bool = False
    capabilities?: ValuesControllerContainerSecurityContextCapabilities
    readOnlyRootFilesystem: bool = True
    runAsNonRoot: bool = True
    seccompProfile?: ValuesControllerContainerSecurityContextSeccompProfile

schema ValuesControllerContainerSecurityContextCapabilities:
    r"""
    ValuesControllerContainerSecurityContextCapabilities

    Attributes
    ----------
    drop : [str], optional
    """
    drop?: [str]

schema ValuesControllerContainerSecurityContextSeccompProfile:
    r"""
    ValuesControllerContainerSecurityContextSeccompProfile

    Attributes
    ----------
    $type : str, required, default is "RuntimeDefault"
    """
    $type: str = "RuntimeDefault"

schema ValuesControllerDeploymentAnnotations:
    r"""
    -- Annotations for the application controller Deployment
    """
    [...str]: any

schema ValuesControllerDnsConfig:
    r"""
    -- [DNS configuration]
    """
    [...str]: any

schema ValuesControllerEmptyDir:
    r"""
    # Application controller emptyDir volumes

    Attributes
    ----------
    sizeLimit : str, required, default is ""
        -- EmptyDir size limit for application controller
        # @default -- `""` (defaults not set if not specified i.e. no size limit)
        sizeLimit: "1Gi"
    """
    sizeLimit: str = ""

schema ValuesControllerImage:
    r"""
    # Application controller image

    Attributes
    ----------
    imagePullPolicy : str, required, default is ""
        -- Image pull policy for the application controller
        # @default -- `""` (defaults to global.image.imagePullPolicy)
    repository : str, required, default is ""
        -- Repository to use for the application controller
        # @default -- `""` (defaults to global.image.repository)
    tag : str, required, default is ""
        -- Tag to use for the application controller
        # @default -- `""` (defaults to global.image.tag)
    """
    imagePullPolicy: str = ""
    repository: str = ""
    tag: str = ""

schema ValuesControllerMetrics:
    r"""
    # Application controller metrics configuration

    Attributes
    ----------
    applicationLabels : ValuesControllerMetricsApplicationLabels, optional
    enabled : bool, required, default is False
        -- Deploy metrics service
    rules : ValuesControllerMetricsRules, optional
    scrapeTimeout : str, required, default is ""
        -- Prometheus ServiceMonitor scrapeTimeout. If empty, Prometheus uses the global scrape timeout unless it is less than the target's scrape interval value in which the latter is used.
    service : ValuesControllerMetricsService, optional
    serviceMonitor : ValuesControllerMetricsServiceMonitor, optional
    """
    applicationLabels?: ValuesControllerMetricsApplicationLabels
    enabled: bool = False
    rules?: ValuesControllerMetricsRules
    scrapeTimeout: str = ""
    service?: ValuesControllerMetricsService
    serviceMonitor?: ValuesControllerMetricsServiceMonitor

schema ValuesControllerMetricsApplicationLabels:
    r"""
    ValuesControllerMetricsApplicationLabels

    Attributes
    ----------
    enabled : bool, required, default is False
        -- Enables additional labels in argocd_app_labels metric
    labels : [any], required, default is []
        -- Additional labels
    """
    enabled: bool = False
    labels: [any] = []

schema ValuesControllerMetricsRules:
    r"""
    ValuesControllerMetricsRules

    Attributes
    ----------
    additionalLabels : ValuesControllerMetricsRulesAdditionalLabels, required, default is {}
        -- PrometheusRule labels
    annotations : ValuesControllerMetricsRulesAnnotations, required, default is {}
        -- PrometheusRule annotations
    enabled : bool, required, default is False
        -- Deploy a PrometheusRule for the application controller
    namespace : str, required, default is ""
        -- PrometheusRule namespace
        "monitoring"
    selector : ValuesControllerMetricsRulesSelector, required, default is {}
        -- PrometheusRule selector
        prometheus: kube-prometheus
    spec : [any], required, default is []
        -- PrometheusRule.Spec for the application controller
        - alert: ArgoAppMissing
        #   expr: |
        #     absent(argocd_app_info) == 1
        #   for: 15m
        #   labels:
        #     severity: critical
        #   annotations:
        #     summary: "[Argo CD] No reported applications"
        #     description: >
        #       Argo CD has not reported any applications data for the past 15 minutes which
        #       means that it must be down or not functioning properly.  This needs to be
        #       resolved for this cloud to continue to maintain state.
        # - alert: ArgoAppNotSynced
        #   expr: |
        #     argocd_app_info{sync_status!="Synced"} == 1
        #   for: 12h
        #   labels:
        #     severity: warning
        #   annotations:
        #     summary: "[{{`{{$labels.name}}`}}] Application not synchronized"
        #     description: >
        #       The application [{{`{{$labels.name}}`}} has not been synchronized for over
        #       12 hours which means that the state of this cloud has drifted away from the
        #       state inside Git.
    """
    additionalLabels: ValuesControllerMetricsRulesAdditionalLabels = {}
    annotations: ValuesControllerMetricsRulesAnnotations = {}
    enabled: bool = False
    namespace: str = ""
    selector: ValuesControllerMetricsRulesSelector = {}
    spec: [any] = []

schema ValuesControllerMetricsRulesAdditionalLabels:
    r"""
    -- PrometheusRule labels
    """
    [...str]: any

schema ValuesControllerMetricsRulesAnnotations:
    r"""
    -- PrometheusRule annotations
    """
    [...str]: any

schema ValuesControllerMetricsRulesSelector:
    r"""
    -- PrometheusRule selector
    prometheus: kube-prometheus
    """
    [...str]: any

schema ValuesControllerMetricsService:
    r"""
    ValuesControllerMetricsService

    Attributes
    ----------
    annotations : ValuesControllerMetricsServiceAnnotations, required, default is {}
        -- Metrics service annotations
    clusterIP : str, required, default is ""
        -- Metrics service clusterIP. `None` makes a "headless service" (no virtual IP)
    labels : ValuesControllerMetricsServiceLabels, required, default is {}
        -- Metrics service labels
    portName : str, required, default is "http-metrics"
        -- Metrics service port name
    servicePort : int, required, default is 8082
        -- Metrics service port
    $type : str, required, default is "ClusterIP"
        -- Metrics service type
    """
    annotations: ValuesControllerMetricsServiceAnnotations = {}
    clusterIP: str = ""
    labels: ValuesControllerMetricsServiceLabels = {}
    portName: str = "http-metrics"
    servicePort: int = 8082
    $type: str = "ClusterIP"

schema ValuesControllerMetricsServiceAnnotations:
    r"""
    -- Metrics service annotations
    """
    [...str]: any

schema ValuesControllerMetricsServiceLabels:
    r"""
    -- Metrics service labels
    """
    [...str]: any

schema ValuesControllerMetricsServiceMonitor:
    r"""
    ValuesControllerMetricsServiceMonitor

    Attributes
    ----------
    additionalLabels : ValuesControllerMetricsServiceMonitorAdditionalLabels, required, default is {}
        -- Prometheus ServiceMonitor labels
    annotations : ValuesControllerMetricsServiceMonitorAnnotations, required, default is {}
        -- Prometheus ServiceMonitor annotations
    enabled : bool, required, default is False
        -- Enable a prometheus ServiceMonitor
    honorLabels : bool, required, default is False
        -- When true, honorLabels preserves the metric’s labels when they collide with the target’s labels.
    interval : str, required, default is "30s"
        -- Prometheus ServiceMonitor interval
    metricRelabelings : [any], required, default is []
        -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
    namespace : str, required, default is ""
        -- Prometheus ServiceMonitor namespace
        "monitoring"
    relabelings : [any], required, default is []
        -- Prometheus [RelabelConfigs] to apply to samples before scraping
    scheme : str, required, default is ""
        -- Prometheus ServiceMonitor scheme
    selector : ValuesControllerMetricsServiceMonitorSelector, required, default is {}
        -- Prometheus ServiceMonitor selector
        prometheus: kube-prometheus
    tlsConfig : ValuesControllerMetricsServiceMonitorTlsConfig, required, default is {}
        -- Prometheus ServiceMonitor tlsConfig
    """
    additionalLabels: ValuesControllerMetricsServiceMonitorAdditionalLabels = {}
    annotations: ValuesControllerMetricsServiceMonitorAnnotations = {}
    enabled: bool = False
    honorLabels: bool = False
    interval: str = "30s"
    metricRelabelings: [any] = []
    namespace: str = ""
    relabelings: [any] = []
    scheme: str = ""
    selector: ValuesControllerMetricsServiceMonitorSelector = {}
    tlsConfig: ValuesControllerMetricsServiceMonitorTlsConfig = {}

schema ValuesControllerMetricsServiceMonitorAdditionalLabels:
    r"""
    -- Prometheus ServiceMonitor labels
    """
    [...str]: any

schema ValuesControllerMetricsServiceMonitorAnnotations:
    r"""
    -- Prometheus ServiceMonitor annotations
    """
    [...str]: any

schema ValuesControllerMetricsServiceMonitorSelector:
    r"""
    -- Prometheus ServiceMonitor selector
    prometheus: kube-prometheus
    """
    [...str]: any

schema ValuesControllerMetricsServiceMonitorTlsConfig:
    r"""
    -- Prometheus ServiceMonitor tlsConfig
    """
    [...str]: any

schema ValuesControllerNodeSelector:
    r"""
    -- [Node selector]
    # @default -- `{}` (defaults to global.nodeSelector)
    """
    [...str]: any

schema ValuesControllerPdb:
    r"""
    # Application controller Pod Disruption Budget
    ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/

    Attributes
    ----------
    annotations : ValuesControllerPdbAnnotations, required, default is {}
        -- Annotations to be added to application controller pdb
    enabled : bool, required, default is False
        -- Deploy a [PodDisruptionBudget] for the application controller
    labels : ValuesControllerPdbLabels, required, default is {}
        -- Labels to be added to application controller pdb
    maxUnavailable : str, required, default is ""
        -- Number of pods that are unavailable after eviction as number or percentage (eg.: 50%).
        ## Has higher precedence over `controller.pdb.minAvailable`
    minAvailable : str, required, default is ""
        -- Number of pods that are available after eviction as number or percentage (eg.: 50%)
        # @default -- `""` (defaults to 0 if not specified)
    """
    annotations: ValuesControllerPdbAnnotations = {}
    enabled: bool = False
    labels: ValuesControllerPdbLabels = {}
    maxUnavailable: str = ""
    minAvailable: str = ""

schema ValuesControllerPdbAnnotations:
    r"""
    -- Annotations to be added to application controller pdb
    """
    [...str]: any

schema ValuesControllerPdbLabels:
    r"""
    -- Labels to be added to application controller pdb
    """
    [...str]: any

schema ValuesControllerPodAnnotations:
    r"""
    -- Annotations to be added to application controller pods
    """
    [...str]: any

schema ValuesControllerPodLabels:
    r"""
    -- Labels to be added to application controller pods
    """
    [...str]: any

schema ValuesControllerReadinessProbe:
    r"""
    Readiness probe for application controller
    ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/

    Attributes
    ----------
    failureThreshold : int, required, default is 3
        -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
    initialDelaySeconds : int, required, default is 10
        -- Number of seconds after the container has started before [probe] is initiated
    periodSeconds : int, required, default is 10
        -- How often (in seconds) to perform the [probe]
    successThreshold : int, required, default is 1
        -- Minimum consecutive successes for the [probe] to be considered successful after having failed
    timeoutSeconds : int, required, default is 1
        -- Number of seconds after which the [probe] times out
    """
    failureThreshold: int = 3
    initialDelaySeconds: int = 10
    periodSeconds: int = 10
    successThreshold: int = 1
    timeoutSeconds: int = 1

schema ValuesControllerResources:
    r"""
    -- Resource limits and requests for the application controller pods
    limits:
    #    cpu: 500m
    #    memory: 512Mi
    #  requests:
    #    cpu: 250m
    #    memory: 256Mi
    """
    [...str]: any

schema ValuesControllerServiceAccount:
    r"""
    ValuesControllerServiceAccount

    Attributes
    ----------
    annotations : ValuesControllerServiceAccountAnnotations, required, default is {}
        -- Annotations applied to created service account
    automountServiceAccountToken : bool, required, default is True
        -- Automount API credentials for the Service Account
    create : bool, required, default is True
        -- Create a service account for the application controller
    labels : ValuesControllerServiceAccountLabels, required, default is {}
        -- Labels applied to created service account
    name : str, required, default is "argocd-application-controller"
        -- Service account name
    """
    annotations: ValuesControllerServiceAccountAnnotations = {}
    automountServiceAccountToken: bool = True
    create: bool = True
    labels: ValuesControllerServiceAccountLabels = {}
    name: str = "argocd-application-controller"

schema ValuesControllerServiceAccountAnnotations:
    r"""
    -- Annotations applied to created service account
    """
    [...str]: any

schema ValuesControllerServiceAccountLabels:
    r"""
    -- Labels applied to created service account
    """
    [...str]: any

schema ValuesControllerStatefulsetAnnotations:
    r"""
    -- Annotations for the application controller StatefulSet
    """
    [...str]: any

schema ValuesCrds:
    r"""
    # Custom resource configuration

    Attributes
    ----------
    additionalLabels : ValuesCrdsAdditionalLabels, required, default is {}
        -- Addtional labels to be added to all CRDs
    annotations : ValuesCrdsAnnotations, required, default is {}
        -- Annotations to be added to all CRDs
    install : bool, required, default is True
        -- Install and upgrade CRDs
    keep : bool, required, default is True
        -- Keep CRDs on chart uninstall
    """
    additionalLabels: ValuesCrdsAdditionalLabels = {}
    annotations: ValuesCrdsAnnotations = {}
    install: bool = True
    keep: bool = True

schema ValuesCrdsAdditionalLabels:
    r"""
    -- Addtional labels to be added to all CRDs
    """
    [...str]: any

schema ValuesCrdsAnnotations:
    r"""
    -- Annotations to be added to all CRDs
    """
    [...str]: any

schema ValuesDex:
    r"""
    # Dex

    Attributes
    ----------
    affinity : ValuesDexAffinity, required, default is {}
        -- Assign custom [affinity] rules to the deployment
        # @default -- `{}` (defaults to global.affinity preset)
    automountServiceAccountToken : bool, required, default is True
        -- Automount API credentials for the Service Account into the pod.
    certificateSecret : ValuesDexCertificateSecret, optional
        TLS certificate configuration via Secret
        ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/#configuring-tls-to-argocd-dex-server
        ## Note: Issuing certificates via cert-manager in not supported right now because it's not possible to restart Dex automatically without extra controllers.
    containerPorts : ValuesDexContainerPorts, optional
        Dex container ports
        # NOTE: These ports are currently hardcoded and cannot be changed
    containerSecurityContext : ValuesDexContainerSecurityContext, optional
        -- Dex container-level security context
        # @default -- See [values.yaml]
    deploymentAnnotations : ValuesDexDeploymentAnnotations, required, default is {}
        -- Annotations to be added to the Dex server Deployment
    deploymentStrategy : ValuesDexDeploymentStrategy, required, default is {}
        -- Deployment strategy to be added to the Dex server Deployment
        type: RollingUpdate
        # rollingUpdate:
        #   maxSurge: 25%
        #   maxUnavailable: 25%
    dnsConfig : ValuesDexDnsConfig, required, default is {}
        -- [DNS configuration]
    dnsPolicy : str, required, default is "ClusterFirst"
        -- Alternative DNS policy for Dex server pods
    emptyDir : ValuesDexEmptyDir, optional
        # Dex server emptyDir volumes
    enabled : bool, required, default is True
        -- Enable dex
    env : [any], required, default is []
        -- Environment variables to pass to the Dex server
    envFrom : [any], required, default is []
        -- envFrom to pass to the Dex server
        # @default -- `[]` (See [values.yaml])
        - configMapRef:
        #     name: config-map-name
        # - secretRef:
        #     name: secret-name
    extraArgs : [any], required, default is []
        -- Additional command line arguments to pass to the Dex server
    extraContainers : [any], required, default is []
        -- Additional containers to be added to the dex pod
        ## Note: Supports use of custom Helm templates
    image : ValuesDexImage, optional
        # Dex image
    imagePullSecrets : [any], required, default is []
        -- Secrets with credentials to pull images from a private registry
        # @default -- `[]` (defaults to global.imagePullSecrets)
    initContainers : [any], required, default is []
        -- Init containers to add to the dex pod
        ## Note: Supports use of custom Helm templates
    initImage : ValuesDexInitImage, optional
        Argo CD init image that creates Dex config
    livenessProbe : ValuesDexLivenessProbe, optional
        # Probes for Dex server
        ## Supported from Dex >= 2.28.0
    logFormat : str, required, default is ""
        -- Dex log format. Either `text` or `json`
        # @default -- `""` (defaults to global.logging.format)
    logLevel : str, required, default is ""
        -- Dex log level. One of: `debug`, `info`, `warn`, `error`
        # @default -- `""` (defaults to global.logging.level)
    metrics : ValuesDexMetrics, optional
    name : str, required, default is "dex-server"
        -- Dex name
    nodeSelector : ValuesDexNodeSelector, required, default is {}
        -- [Node selector]
        # @default -- `{}` (defaults to global.nodeSelector)
    pdb : ValuesDexPdb, optional
        # Dex Pod Disruption Budget
        ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
    podAnnotations : ValuesDexPodAnnotations, required, default is {}
        -- Annotations to be added to the Dex server pods
    podLabels : ValuesDexPodLabels, required, default is {}
        -- Labels to be added to the Dex server pods
    priorityClassName : str, required, default is ""
        -- Priority class for the dex pods
        # @default -- `""` (defaults to global.priorityClassName)
    readinessProbe : ValuesDexReadinessProbe, optional
    resources : ValuesDexResources, required, default is {}
        -- Resource limits and requests for dex
        limits:
        #    cpu: 50m
        #    memory: 64Mi
        #  requests:
        #    cpu: 10m
        #    memory: 32Mi
    runtimeClassName : str, required, default is ""
        -- Runtime class name for Dex
        # @default -- `""` (defaults to global.runtimeClassName)
    serviceAccount : ValuesDexServiceAccount, optional
    servicePortGrpc : int, required, default is 5557
        -- Service port for gRPC access
    servicePortGrpcName : str, required, default is "grpc"
        -- Service port name for gRPC access
    servicePortHttp : int, required, default is 5556
        -- Service port for HTTP access
    servicePortHttpName : str, required, default is "http"
        -- Service port name for HTTP access
    servicePortMetrics : int, required, default is 5558
        -- Service port for metrics access
    terminationGracePeriodSeconds : int, required, default is 30
        -- terminationGracePeriodSeconds for container lifecycle hook
    tolerations : [any], required, default is []
        -- [Tolerations] for use with node taints
        # @default -- `[]` (defaults to global.tolerations)
    topologySpreadConstraints : [any], required, default is []
        -- Assign custom [TopologySpreadConstraints] rules to dex
        # @default -- `[]` (defaults to global.topologySpreadConstraints)
        ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/
        ## If labelSelector is left out, it will default to the labelSelector configuration of the deployment
        - maxSkew: 1
        #   topologyKey: topology.kubernetes.io/zone
        #   whenUnsatisfiable: DoNotSchedule
    volumeMounts : [any], required, default is []
        -- Additional volumeMounts to the dex main container
    volumes : [any], required, default is []
        -- Additional volumes to the dex pod
    """
    affinity: ValuesDexAffinity = {}
    automountServiceAccountToken: bool = True
    certificateSecret?: ValuesDexCertificateSecret
    containerPorts?: ValuesDexContainerPorts
    containerSecurityContext?: ValuesDexContainerSecurityContext
    deploymentAnnotations: ValuesDexDeploymentAnnotations = {}
    deploymentStrategy: ValuesDexDeploymentStrategy = {}
    dnsConfig: ValuesDexDnsConfig = {}
    dnsPolicy: str = "ClusterFirst"
    emptyDir?: ValuesDexEmptyDir
    enabled: bool = True
    env: [any] = []
    envFrom: [any] = []
    extraArgs: [any] = []
    extraContainers: [any] = []
    image?: ValuesDexImage
    imagePullSecrets: [any] = []
    initContainers: [any] = []
    initImage?: ValuesDexInitImage
    livenessProbe?: ValuesDexLivenessProbe
    logFormat: str = ""
    logLevel: str = ""
    metrics?: ValuesDexMetrics
    name: str = "dex-server"
    nodeSelector: ValuesDexNodeSelector = {}
    pdb?: ValuesDexPdb
    podAnnotations: ValuesDexPodAnnotations = {}
    podLabels: ValuesDexPodLabels = {}
    priorityClassName: str = ""
    readinessProbe?: ValuesDexReadinessProbe
    resources: ValuesDexResources = {}
    runtimeClassName: str = ""
    serviceAccount?: ValuesDexServiceAccount
    servicePortGrpc: int = 5557
    servicePortGrpcName: str = "grpc"
    servicePortHttp: int = 5556
    servicePortHttpName: str = "http"
    servicePortMetrics: int = 5558
    terminationGracePeriodSeconds: int = 30
    tolerations: [any] = []
    topologySpreadConstraints: [any] = []
    volumeMounts: [any] = []
    volumes: [any] = []

schema ValuesDexAffinity:
    r"""
    -- Assign custom [affinity] rules to the deployment
    # @default -- `{}` (defaults to global.affinity preset)
    """
    [...str]: any

schema ValuesDexCertificateSecret:
    r"""
    TLS certificate configuration via Secret
    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/#configuring-tls-to-argocd-dex-server
    ## Note: Issuing certificates via cert-manager in not supported right now because it's not possible to restart Dex automatically without extra controllers.

    Attributes
    ----------
    annotations : ValuesDexCertificateSecretAnnotations, required, default is {}
        -- Annotations to be added to argocd-dex-server-tls secret
    ca : str, required, default is ""
        -- Certificate authority. Required for self-signed certificates.
    crt : str, required, default is ""
        -- Certificate data. Must contain SANs of Dex service (ie: argocd-dex-server, argocd-dex-server.argo-cd.svc)
    enabled : bool, required, default is False
        -- Create argocd-dex-server-tls secret
    key : str, required, default is ""
        -- Certificate private key
    labels : ValuesDexCertificateSecretLabels, required, default is {}
        -- Labels to be added to argocd-dex-server-tls secret
    """
    annotations: ValuesDexCertificateSecretAnnotations = {}
    ca: str = ""
    crt: str = ""
    enabled: bool = False
    key: str = ""
    labels: ValuesDexCertificateSecretLabels = {}

schema ValuesDexCertificateSecretAnnotations:
    r"""
    -- Annotations to be added to argocd-dex-server-tls secret
    """
    [...str]: any

schema ValuesDexCertificateSecretLabels:
    r"""
    -- Labels to be added to argocd-dex-server-tls secret
    """
    [...str]: any

schema ValuesDexContainerPorts:
    r"""
    Dex container ports
    # NOTE: These ports are currently hardcoded and cannot be changed

    Attributes
    ----------
    grpc : int, required, default is 5557
        -- gRPC container port
    http : int, required, default is 5556
        -- HTTP container port
    metrics : int, required, default is 5558
        -- Metrics container port
    """
    grpc: int = 5557
    http: int = 5556
    metrics: int = 5558

schema ValuesDexContainerSecurityContext:
    r"""
    -- Dex container-level security context
    # @default -- See [values.yaml]

    Attributes
    ----------
    allowPrivilegeEscalation : bool, required, default is False
    capabilities : ValuesDexContainerSecurityContextCapabilities, optional
    readOnlyRootFilesystem : bool, required, default is True
    runAsNonRoot : bool, required, default is True
    seccompProfile : ValuesDexContainerSecurityContextSeccompProfile, optional
    """
    allowPrivilegeEscalation: bool = False
    capabilities?: ValuesDexContainerSecurityContextCapabilities
    readOnlyRootFilesystem: bool = True
    runAsNonRoot: bool = True
    seccompProfile?: ValuesDexContainerSecurityContextSeccompProfile

schema ValuesDexContainerSecurityContextCapabilities:
    r"""
    ValuesDexContainerSecurityContextCapabilities

    Attributes
    ----------
    drop : [str], optional
    """
    drop?: [str]

schema ValuesDexContainerSecurityContextSeccompProfile:
    r"""
    ValuesDexContainerSecurityContextSeccompProfile

    Attributes
    ----------
    $type : str, required, default is "RuntimeDefault"
    """
    $type: str = "RuntimeDefault"

schema ValuesDexDeploymentAnnotations:
    r"""
    -- Annotations to be added to the Dex server Deployment
    """
    [...str]: any

schema ValuesDexDeploymentStrategy:
    r"""
    -- Deployment strategy to be added to the Dex server Deployment
    type: RollingUpdate
    # rollingUpdate:
    #   maxSurge: 25%
    #   maxUnavailable: 25%
    """
    [...str]: any

schema ValuesDexDnsConfig:
    r"""
    -- [DNS configuration]
    """
    [...str]: any

schema ValuesDexEmptyDir:
    r"""
    # Dex server emptyDir volumes

    Attributes
    ----------
    sizeLimit : str, required, default is ""
        -- EmptyDir size limit for Dex server
        # @default -- `""` (defaults not set if not specified i.e. no size limit)
        sizeLimit: "1Gi"
    """
    sizeLimit: str = ""

schema ValuesDexImage:
    r"""
    # Dex image

    Attributes
    ----------
    imagePullPolicy : str, required, default is ""
        -- Dex imagePullPolicy
        # @default -- `""` (defaults to global.image.imagePullPolicy)
    repository : str, required, default is "ghcr.io/dexidp/dex"
        -- Dex image repository
    tag : str, required, default is "v2.41.1"
        -- Dex image tag
    """
    imagePullPolicy: str = ""
    repository: str = "ghcr.io/dexidp/dex"
    tag: str = "v2.41.1"

schema ValuesDexInitImage:
    r"""
    Argo CD init image that creates Dex config

    Attributes
    ----------
    imagePullPolicy : str, required, default is ""
        -- Argo CD init image imagePullPolicy
        # @default -- `""` (defaults to global.image.imagePullPolicy)
    repository : str, required, default is ""
        -- Argo CD init image repository
        # @default -- `""` (defaults to global.image.repository)
    resources : ValuesDexInitImageResources, required, default is {}
        -- Argo CD init image resources
        # @default -- `{}` (defaults to dex.resources)
        requests:
        #    cpu: 5m
        #    memory: 96Mi
        #  limits:
        #    cpu: 10m
        #    memory: 144Mi
    tag : str, required, default is ""
        -- Argo CD init image tag
        # @default -- `""` (defaults to global.image.tag)
    """
    imagePullPolicy: str = ""
    repository: str = ""
    resources: ValuesDexInitImageResources = {}
    tag: str = ""

schema ValuesDexInitImageResources:
    r"""
    -- Argo CD init image resources
    # @default -- `{}` (defaults to dex.resources)
    requests:
    #    cpu: 5m
    #    memory: 96Mi
    #  limits:
    #    cpu: 10m
    #    memory: 144Mi
    """
    [...str]: any

schema ValuesDexLivenessProbe:
    r"""
    # Probes for Dex server
    ## Supported from Dex >= 2.28.0

    Attributes
    ----------
    enabled : bool, required, default is False
        -- Enable Kubernetes liveness probe for Dex >= 2.28.0
    failureThreshold : int, required, default is 3
        -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
    httpPath : str, required, default is "/healthz/live"
        -- Http path to use for the liveness probe
    httpPort : str, required, default is "metrics"
        -- Http port to use for the liveness probe
    httpScheme : str, required, default is "HTTP"
        -- Scheme to use for for the liveness probe (can be HTTP or HTTPS)
    initialDelaySeconds : int, required, default is 10
        -- Number of seconds after the container has started before [probe] is initiated
    periodSeconds : int, required, default is 10
        -- How often (in seconds) to perform the [probe]
    successThreshold : int, required, default is 1
        -- Minimum consecutive successes for the [probe] to be considered successful after having failed
    timeoutSeconds : int, required, default is 1
        -- Number of seconds after which the [probe] times out
    """
    enabled: bool = False
    failureThreshold: int = 3
    httpPath: str = "/healthz/live"
    httpPort: str = "metrics"
    httpScheme: str = "HTTP"
    initialDelaySeconds: int = 10
    periodSeconds: int = 10
    successThreshold: int = 1
    timeoutSeconds: int = 1

schema ValuesDexMetrics:
    r"""
    ValuesDexMetrics

    Attributes
    ----------
    enabled : bool, required, default is False
        -- Deploy metrics service
    service : ValuesDexMetricsService, optional
    serviceMonitor : ValuesDexMetricsServiceMonitor, optional
    """
    enabled: bool = False
    service?: ValuesDexMetricsService
    serviceMonitor?: ValuesDexMetricsServiceMonitor

schema ValuesDexMetricsService:
    r"""
    ValuesDexMetricsService

    Attributes
    ----------
    annotations : ValuesDexMetricsServiceAnnotations, required, default is {}
        -- Metrics service annotations
    labels : ValuesDexMetricsServiceLabels, required, default is {}
        -- Metrics service labels
    portName : str, required, default is "http-metrics"
        -- Metrics service port name
    """
    annotations: ValuesDexMetricsServiceAnnotations = {}
    labels: ValuesDexMetricsServiceLabels = {}
    portName: str = "http-metrics"

schema ValuesDexMetricsServiceAnnotations:
    r"""
    -- Metrics service annotations
    """
    [...str]: any

schema ValuesDexMetricsServiceLabels:
    r"""
    -- Metrics service labels
    """
    [...str]: any

schema ValuesDexMetricsServiceMonitor:
    r"""
    ValuesDexMetricsServiceMonitor

    Attributes
    ----------
    additionalLabels : ValuesDexMetricsServiceMonitorAdditionalLabels, required, default is {}
        -- Prometheus ServiceMonitor labels
    annotations : ValuesDexMetricsServiceMonitorAnnotations, required, default is {}
        -- Prometheus ServiceMonitor annotations
    enabled : bool, required, default is False
        -- Enable a prometheus ServiceMonitor
    honorLabels : bool, required, default is False
        -- When true, honorLabels preserves the metric’s labels when they collide with the target’s labels.
    interval : str, required, default is "30s"
        -- Prometheus ServiceMonitor interval
    metricRelabelings : [any], required, default is []
        -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
    namespace : str, required, default is ""
        -- Prometheus ServiceMonitor namespace
        "monitoring"
    relabelings : [any], required, default is []
        -- Prometheus [RelabelConfigs] to apply to samples before scraping
    scheme : str, required, default is ""
        -- Prometheus ServiceMonitor scheme
    selector : ValuesDexMetricsServiceMonitorSelector, required, default is {}
        -- Prometheus ServiceMonitor selector
        prometheus: kube-prometheus
    tlsConfig : ValuesDexMetricsServiceMonitorTlsConfig, required, default is {}
        -- Prometheus ServiceMonitor tlsConfig
    """
    additionalLabels: ValuesDexMetricsServiceMonitorAdditionalLabels = {}
    annotations: ValuesDexMetricsServiceMonitorAnnotations = {}
    enabled: bool = False
    honorLabels: bool = False
    interval: str = "30s"
    metricRelabelings: [any] = []
    namespace: str = ""
    relabelings: [any] = []
    scheme: str = ""
    selector: ValuesDexMetricsServiceMonitorSelector = {}
    tlsConfig: ValuesDexMetricsServiceMonitorTlsConfig = {}

schema ValuesDexMetricsServiceMonitorAdditionalLabels:
    r"""
    -- Prometheus ServiceMonitor labels
    """
    [...str]: any

schema ValuesDexMetricsServiceMonitorAnnotations:
    r"""
    -- Prometheus ServiceMonitor annotations
    """
    [...str]: any

schema ValuesDexMetricsServiceMonitorSelector:
    r"""
    -- Prometheus ServiceMonitor selector
    prometheus: kube-prometheus
    """
    [...str]: any

schema ValuesDexMetricsServiceMonitorTlsConfig:
    r"""
    -- Prometheus ServiceMonitor tlsConfig
    """
    [...str]: any

schema ValuesDexNodeSelector:
    r"""
    -- [Node selector]
    # @default -- `{}` (defaults to global.nodeSelector)
    """
    [...str]: any

schema ValuesDexPdb:
    r"""
    # Dex Pod Disruption Budget
    ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/

    Attributes
    ----------
    annotations : ValuesDexPdbAnnotations, required, default is {}
        -- Annotations to be added to Dex server pdb
    enabled : bool, required, default is False
        -- Deploy a [PodDisruptionBudget] for the Dex server
    labels : ValuesDexPdbLabels, required, default is {}
        -- Labels to be added to Dex server pdb
    maxUnavailable : str, required, default is ""
        -- Number of pods that are unavailble after eviction as number or percentage (eg.: 50%).
        ## Has higher precedence over `dex.pdb.minAvailable`
    minAvailable : str, required, default is ""
        -- Number of pods that are available after eviction as number or percentage (eg.: 50%)
        # @default -- `""` (defaults to 0 if not specified)
    """
    annotations: ValuesDexPdbAnnotations = {}
    enabled: bool = False
    labels: ValuesDexPdbLabels = {}
    maxUnavailable: str = ""
    minAvailable: str = ""

schema ValuesDexPdbAnnotations:
    r"""
    -- Annotations to be added to Dex server pdb
    """
    [...str]: any

schema ValuesDexPdbLabels:
    r"""
    -- Labels to be added to Dex server pdb
    """
    [...str]: any

schema ValuesDexPodAnnotations:
    r"""
    -- Annotations to be added to the Dex server pods
    """
    [...str]: any

schema ValuesDexPodLabels:
    r"""
    -- Labels to be added to the Dex server pods
    """
    [...str]: any

schema ValuesDexReadinessProbe:
    r"""
    ValuesDexReadinessProbe

    Attributes
    ----------
    enabled : bool, required, default is False
        -- Enable Kubernetes readiness probe for Dex >= 2.28.0
    failureThreshold : int, required, default is 3
        -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
    httpPath : str, required, default is "/healthz/ready"
        -- Http path to use for the readiness probe
    httpPort : str, required, default is "metrics"
        -- Http port to use for the readiness probe
    httpScheme : str, required, default is "HTTP"
        -- Scheme to use for for the liveness probe (can be HTTP or HTTPS)
    initialDelaySeconds : int, required, default is 10
        -- Number of seconds after the container has started before [probe] is initiated
    periodSeconds : int, required, default is 10
        -- How often (in seconds) to perform the [probe]
    successThreshold : int, required, default is 1
        -- Minimum consecutive successes for the [probe] to be considered successful after having failed
    timeoutSeconds : int, required, default is 1
        -- Number of seconds after which the [probe] times out
    """
    enabled: bool = False
    failureThreshold: int = 3
    httpPath: str = "/healthz/ready"
    httpPort: str = "metrics"
    httpScheme: str = "HTTP"
    initialDelaySeconds: int = 10
    periodSeconds: int = 10
    successThreshold: int = 1
    timeoutSeconds: int = 1

schema ValuesDexResources:
    r"""
    -- Resource limits and requests for dex
    limits:
    #    cpu: 50m
    #    memory: 64Mi
    #  requests:
    #    cpu: 10m
    #    memory: 32Mi
    """
    [...str]: any

schema ValuesDexServiceAccount:
    r"""
    ValuesDexServiceAccount

    Attributes
    ----------
    annotations : ValuesDexServiceAccountAnnotations, required, default is {}
        -- Annotations applied to created service account
    automountServiceAccountToken : bool, required, default is True
        -- Automount API credentials for the Service Account
    create : bool, required, default is True
        -- Create dex service account
    name : str, required, default is "argocd-dex-server"
        -- Dex service account name
    """
    annotations: ValuesDexServiceAccountAnnotations = {}
    automountServiceAccountToken: bool = True
    create: bool = True
    name: str = "argocd-dex-server"

schema ValuesDexServiceAccountAnnotations:
    r"""
    -- Annotations applied to created service account
    """
    [...str]: any

schema ValuesExternalRedis:
    r"""
    External Redis parameters

    Attributes
    ----------
    existingSecret : str, required, default is ""
        -- The name of an existing secret with Redis (must contain key `redis-password`) and Sentinel credentials.
        # When it's set, the `externalRedis.password` parameter is ignored
    host : str, required, default is ""
        -- External Redis server host
    password : str, required, default is ""
        -- External Redis password
    port : int, required, default is 6379
        -- External Redis server port
    secretAnnotations : ValuesExternalRedisSecretAnnotations, required, default is {}
        -- External Redis Secret annotations
    username : str, required, default is ""
        -- External Redis username
    """
    existingSecret: str = ""
    host: str = ""
    password: str = ""
    port: int = 6379
    secretAnnotations: ValuesExternalRedisSecretAnnotations = {}
    username: str = ""

schema ValuesExternalRedisSecretAnnotations:
    r"""
    -- External Redis Secret annotations
    """
    [...str]: any

schema ValuesGlobal:
    r"""
    # Globally shared configuration

    Attributes
    ----------
    addPrometheusAnnotations : bool, required, default is False
        -- Add Prometheus scrape annotations to all metrics services. This can be used as an alternative to the ServiceMonitors.
    additionalLabels : ValuesGlobalAdditionalLabels, required, default is {}
        -- Common labels for the all resources
        app: argo-cd
    affinity : ValuesGlobalAffinity, optional
        Default affinity preset for all components
    certificateAnnotations : ValuesGlobalCertificateAnnotations, required, default is {}
        -- Annotations for the all deployed Certificates
    deploymentAnnotations : ValuesGlobalDeploymentAnnotations, required, default is {}
        -- Annotations for the all deployed Deployments
    deploymentStrategy : ValuesGlobalDeploymentStrategy, required, default is {}
        -- Deployment strategy for the all deployed Deployments
        type: RollingUpdate
        # rollingUpdate:
        #   maxSurge: 25%
        #   maxUnavailable: 25%
    domain : str, required, default is "argocd.example.com"
        -- Default domain used by all components
        ## Used for ingresses, certificates, SSO, notifications, etc.
    dualStack : ValuesGlobalDualStack, optional
        Configure dual-stack used by all component services
    env : [any], required, default is []
        -- Environment variables to pass to all deployed Deployments
    hostAliases : [any], required, default is []
        -- Mapping between IP and hostnames that will be injected as entries in the pod's hosts files
        - ip: 10.20.30.40
        #   hostnames:
        #   - git.myhostname
    image : ValuesGlobalImage, optional
        Default image used by all components
    imagePullSecrets : [any], required, default is []
        -- Secrets with credentials to pull images from a private registry
    logging : ValuesGlobalLogging, optional
        Default logging options used by all components
    networkPolicy : ValuesGlobalNetworkPolicy, optional
        Default network policy rules used by all components
    nodeSelector : ValuesGlobalNodeSelector, required, default is {}
        -- Default node selector for all components
    podAnnotations : ValuesGlobalPodAnnotations, required, default is {}
        -- Annotations for the all deployed pods
    podLabels : ValuesGlobalPodLabels, required, default is {}
        -- Labels for the all deployed pods
    priorityClassName : str, required, default is ""
        -- Default priority class for all components
    revisionHistoryLimit : int, required, default is 3
        -- Number of old deployment ReplicaSets to retain. The rest will be garbage collected.
    runtimeClassName : str, required, default is ""
        -- Runtime class name for all components
    securityContext : ValuesGlobalSecurityContext, required, default is {}
        -- Toggle and define pod-level security context.
        # @default -- `{}` (See [values.yaml])
        runAsUser: 999
        #  runAsGroup: 999
        #  fsGroup: 999
    statefulsetAnnotations : ValuesGlobalStatefulsetAnnotations, required, default is {}
        -- Annotations for the all deployed Statefulsets
    tolerations : [any], required, default is []
        -- Default tolerations for all components
    topologySpreadConstraints : [any], required, default is []
        -- Default [TopologySpreadConstraints] rules for all components
        ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/
        ## If labelSelector is left out, it will default to the labelSelector of the component
        - maxSkew: 1
        #   topologyKey: topology.kubernetes.io/zone
        #   whenUnsatisfiable: DoNotSchedule
    """
    addPrometheusAnnotations: bool = False
    additionalLabels: ValuesGlobalAdditionalLabels = {}
    affinity?: ValuesGlobalAffinity
    certificateAnnotations: ValuesGlobalCertificateAnnotations = {}
    deploymentAnnotations: ValuesGlobalDeploymentAnnotations = {}
    deploymentStrategy: ValuesGlobalDeploymentStrategy = {}
    domain: str = "argocd.example.com"
    dualStack?: ValuesGlobalDualStack
    env: [any] = []
    hostAliases: [any] = []
    image?: ValuesGlobalImage
    imagePullSecrets: [any] = []
    logging?: ValuesGlobalLogging
    networkPolicy?: ValuesGlobalNetworkPolicy
    nodeSelector: ValuesGlobalNodeSelector = {}
    podAnnotations: ValuesGlobalPodAnnotations = {}
    podLabels: ValuesGlobalPodLabels = {}
    priorityClassName: str = ""
    revisionHistoryLimit: int = 3
    runtimeClassName: str = ""
    securityContext: ValuesGlobalSecurityContext = {}
    statefulsetAnnotations: ValuesGlobalStatefulsetAnnotations = {}
    tolerations: [any] = []
    topologySpreadConstraints: [any] = []

schema ValuesGlobalAdditionalLabels:
    r"""
    -- Common labels for the all resources
    app: argo-cd
    """
    [...str]: any

schema ValuesGlobalAffinity:
    r"""
    Default affinity preset for all components

    Attributes
    ----------
    nodeAffinity : ValuesGlobalAffinityNodeAffinity, optional
        Node affinity rules
    podAntiAffinity : str, required, default is "soft"
        -- Default pod anti-affinity rules. Either: `none`, `soft` or `hard`
    """
    nodeAffinity?: ValuesGlobalAffinityNodeAffinity
    podAntiAffinity: str = "soft"

schema ValuesGlobalAffinityNodeAffinity:
    r"""
    Node affinity rules

    Attributes
    ----------
    matchExpressions : [any], required, default is []
        -- Default match expressions for node affinity
        - key: topology.kubernetes.io/zone
        #   operator: In
        #   values:
        #    - antarctica-east1
        #    - antarctica-west1
    $type : str, required, default is "hard"
        -- Default node affinity rules. Either: `none`, `soft` or `hard`
    """
    matchExpressions: [any] = []
    $type: str = "hard"

schema ValuesGlobalCertificateAnnotations:
    r"""
    -- Annotations for the all deployed Certificates
    """
    [...str]: any

schema ValuesGlobalDeploymentAnnotations:
    r"""
    -- Annotations for the all deployed Deployments
    """
    [...str]: any

schema ValuesGlobalDeploymentStrategy:
    r"""
    -- Deployment strategy for the all deployed Deployments
    type: RollingUpdate
    # rollingUpdate:
    #   maxSurge: 25%
    #   maxUnavailable: 25%
    """
    [...str]: any

schema ValuesGlobalDualStack:
    r"""
    Configure dual-stack used by all component services

    Attributes
    ----------
    ipFamilies : [any], required, default is []
        -- IP families that should be supported and the order in which they should be applied to ClusterIP as well. Can be IPv4 and/or IPv6.
    ipFamilyPolicy : str, required, default is ""
        -- IP family policy to configure dual-stack see [Configure dual-stack](https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services)
    """
    ipFamilies: [any] = []
    ipFamilyPolicy: str = ""

schema ValuesGlobalImage:
    r"""
    Default image used by all components

    Attributes
    ----------
    imagePullPolicy : str, required, default is "IfNotPresent"
        -- If defined, a imagePullPolicy applied to all Argo CD deployments
    repository : str, required, default is "quay.io/argoproj/argocd"
        -- If defined, a repository applied to all Argo CD deployments
    tag : str, required, default is ""
        -- Overrides the global Argo CD image tag whose default is the chart appVersion
    """
    imagePullPolicy: str = "IfNotPresent"
    repository: str = "quay.io/argoproj/argocd"
    tag: str = ""

schema ValuesGlobalLogging:
    r"""
    Default logging options used by all components

    Attributes
    ----------
    format : str, required, default is "text"
        -- Set the global logging format. Either: `text` or `json`
    level : str, required, default is "info"
        -- Set the global logging level. One of: `debug`, `info`, `warn` or `error`
    """
    format: str = "text"
    level: str = "info"

schema ValuesGlobalNetworkPolicy:
    r"""
    Default network policy rules used by all components

    Attributes
    ----------
    create : bool, required, default is False
        -- Create NetworkPolicy objects for all components
    defaultDenyIngress : bool, required, default is False
        -- Default deny all ingress traffic
    """
    create: bool = False
    defaultDenyIngress: bool = False

schema ValuesGlobalNodeSelector:
    r"""
    -- Default node selector for all components
    """
    [...str]: any

schema ValuesGlobalPodAnnotations:
    r"""
    -- Annotations for the all deployed pods
    """
    [...str]: any

schema ValuesGlobalPodLabels:
    r"""
    -- Labels for the all deployed pods
    """
    [...str]: any

schema ValuesGlobalSecurityContext:
    r"""
    -- Toggle and define pod-level security context.
    # @default -- `{}` (See [values.yaml])
    runAsUser: 999
    #  runAsGroup: 999
    #  fsGroup: 999
    """
    [...str]: any

schema ValuesGlobalStatefulsetAnnotations:
    r"""
    -- Annotations for the all deployed Statefulsets
    """
    [...str]: any

schema ValuesNotifications:
    r"""
    # Notifications controller

    Attributes
    ----------
    affinity : ValuesNotificationsAffinity, required, default is {}
        -- Assign custom [affinity] rules
        # @default -- `{}` (defaults to global.affinity preset)
    argocdUrl : str, required, default is ""
        -- Argo CD dashboard url; used in place of {{.context.argocdUrl}} in templates
        # @default -- `""` (defaults to https://`global.domain`)
    automountServiceAccountToken : bool, required, default is True
        -- Automount API credentials for the Service Account into the pod.
    clusterRoleRules : ValuesNotificationsClusterRoleRules, optional
        # Enable this and set the rules: to whatever custom rules you want for the Cluster Role resource.
        ## Defaults to off
    cm : ValuesNotificationsCm, optional
    containerPorts : ValuesNotificationsContainerPorts, optional
        Notification controller container ports
    containerSecurityContext : ValuesNotificationsContainerSecurityContext, optional
        -- Notification controller container-level security Context
        # @default -- See [values.yaml]
    context : ValuesNotificationsContext, required, default is {}
        -- Define user-defined context
        ## For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/templates/#defining-user-defined-context
        region: east
        # environmentName: staging
    deploymentAnnotations : ValuesNotificationsDeploymentAnnotations, required, default is {}
        -- Annotations to be applied to the notifications controller Deployment
    deploymentStrategy : ValuesNotificationsDeploymentStrategy, optional
        -- Deployment strategy to be added to the notifications controller Deployment
    dnsConfig : ValuesNotificationsDnsConfig, required, default is {}
        -- [DNS configuration]
    dnsPolicy : str, required, default is "ClusterFirst"
        -- Alternative DNS policy for notifications controller Pods
    enabled : bool, required, default is True
        -- Enable notifications controller
    extraArgs : [any], required, default is []
        -- Extra arguments to provide to the notifications controller
    extraContainers : [any], required, default is []
        -- Additional containers to be added to the notifications controller pod
        ## Note: Supports use of custom Helm templates
    extraEnv : [any], required, default is []
        -- Additional container environment variables
    extraEnvFrom : [any], required, default is []
        -- envFrom to pass to the notifications controller
        # @default -- `[]` (See [values.yaml])
        - configMapRef:
        #     name: config-map-name
        # - secretRef:
        #     name: secret-name
    extraVolumeMounts : [any], required, default is []
        -- List of extra mounts to add (normally used with extraVolumes)
    extraVolumes : [any], required, default is []
        -- List of extra volumes to add
    image : ValuesNotificationsImage, optional
        # Notifications controller image
    imagePullSecrets : [any], required, default is []
        -- Secrets with credentials to pull images from a private registry
        # @default -- `[]` (defaults to global.imagePullSecrets)
    initContainers : [any], required, default is []
        -- Init containers to add to the notifications controller pod
        ## Note: Supports use of custom Helm templates
    livenessProbe : ValuesNotificationsLivenessProbe, optional
    logFormat : str, required, default is ""
        -- Notifications controller log format. Either `text` or `json`
        # @default -- `""` (defaults to global.logging.format)
    logLevel : str, required, default is ""
        -- Notifications controller log level. One of: `debug`, `info`, `warn`, `error`
        # @default -- `""` (defaults to global.logging.level)
    metrics : ValuesNotificationsMetrics, optional
    name : str, required, default is "notifications-controller"
        -- Notifications controller name string
    nodeSelector : ValuesNotificationsNodeSelector, required, default is {}
        -- [Node selector]
        # @default -- `{}` (defaults to global.nodeSelector)
    notifiers : ValuesNotificationsNotifiers, required, default is {}
        -- Configures notification services such as slack, email or custom webhook
        # @default -- See [values.yaml]
        ## For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/overview/
        service.slack: |
        #   token: $slack-token
    pdb : ValuesNotificationsPdb, optional
        # Notifications controller Pod Disruption Budget
        ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
    podAnnotations : ValuesNotificationsPodAnnotations, required, default is {}
        -- Annotations to be applied to the notifications controller Pods
    podLabels : ValuesNotificationsPodLabels, required, default is {}
        -- Labels to be applied to the notifications controller Pods
    priorityClassName : str, required, default is ""
        -- Priority class for the notifications controller pods
        # @default -- `""` (defaults to global.priorityClassName)
    readinessProbe : ValuesNotificationsReadinessProbe, optional
        # Probes for notifications controller Pods (optional)
        ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    resources : ValuesNotificationsResources, required, default is {}
        -- Resource limits and requests for the notifications controller
        limits:
        #   cpu: 100m
        #   memory: 128Mi
        # requests:
        #   cpu: 100m
        #   memory: 128Mi
    runtimeClassName : str, required, default is ""
        -- Runtime class name for the notifications controller
        # @default -- `""` (defaults to global.runtimeClassName)
    secret : ValuesNotificationsSecret, optional
        grafana-apiKey:
        #   # For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/grafana/

        # webhooks-github-token:

        # email-username:
        # email-password:
        # For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/email/
    serviceAccount : ValuesNotificationsServiceAccount, optional
    subscriptions : [any], required, default is []
        -- Contains centrally managed global application subscriptions
        ## For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/subscriptions/
        # subscription for on-sync-status-unknown trigger notifications
        # - recipients:
        #   - slack:test2
        #   - email:test@gmail.com
        #   triggers:
        #   - on-sync-status-unknown
        # # subscription restricted to applications with matching labels only
        # - recipients:
        #   - slack:test3
        #   selector: test=true
        #   triggers:
        #   - on-sync-status-unknown
    templates : ValuesNotificationsTemplates, required, default is {}
        -- The notification template is used to generate the notification content
        ## For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/templates/
        template.app-deployed: |
        #   email:
        #     subject: New version of an application {{.app.metadata.name}} is up and running.
        #   message: |
        #     {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.
        #   slack:
        #     attachments: |
        #       [{
        #         "title": "{{ .app.metadata.name}}",
        #         "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
        #         "color": "#18be52",
        #         "fields": [
        #         {
        #           "title": "Sync Status",
        #           "value": "{{.app.status.sync.status}}",
        #           "short": true
        #         },
        #         {
        #           "title": "Repository",
        #           "value": "{{.app.spec.source.repoURL}}",
        #           "short": true
        #         },
        #         {
        #           "title": "Revision",
        #           "value": "{{.app.status.sync.revision}}",
        #           "short": true
        #         }
        #         {{range $index, $c := .app.status.conditions}}
        #         {{if not $index}},{{end}}
        #         {{if $index}},{{end}}
        #         {
        #           "title": "{{$c.type}}",
        #           "value": "{{$c.message}}",
        #           "short": true
        #         }
        #         {{end}}
        #         ]
        #       }]
        # template.app-health-degraded: |
        #   email:
        #     subject: Application {{.app.metadata.name}} has degraded.
        #   message: |
        #     {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.
        #     Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
        #   slack:
        #     attachments: |-
        #       [{
        #         "title": "{{ .app.metadata.name}}",
        #         "title_link": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
        #         "color": "#f4c030",
        #         "fields": [
        #         {
        #           "title": "Sync Status",
        #           "value": "{{.app.status.sync.status}}",
        #           "short": true
        #         },
        #         {
        #           "title": "Repository",
        #           "value": "{{.app.spec.source.repoURL}}",
        #           "short": true
        #         }
        #         {{range $index, $c := .app.status.conditions}}
        #         {{if not $index}},{{end}}
        #         {{if $index}},{{end}}
        #         {
        #           "title": "{{$c.type}}",
        #           "value": "{{$c.message}}",
        #           "short": true
        #         }
        #         {{end}}
        #         ]
        #       }]
        # template.app-sync-failed: |
        #   email:
        #     subject: Failed to sync application {{.app.metadata.name}}.
        #   message: |
        #     {{if eq .serviceType "slack"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}
        #     Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
        #   slack:
        #     attachments: |-
        #       [{
        #         "title": "{{ .app.metadata.name}}",
        #         "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
        #         "color": "#E96D76",
        #         "fields": [
        #         {
        #           "title": "Sync Status",
        #           "value": "{{.app.status.sync.status}}",
        #           "short": true
        #         },
        #         {
        #           "title": "Repository",
        #           "value": "{{.app.spec.source.repoURL}}",
        #           "short": true
        #         }
        #         {{range $index, $c := .app.status.conditions}}
        #         {{if not $index}},{{end}}
        #         {{if $index}},{{end}}
        #         {
        #           "title": "{{$c.type}}",
        #           "value": "{{$c.message}}",
        #           "short": true
        #         }
        #         {{end}}
        #         ]
        #       }]
        # template.app-sync-running: |
        #   email:
        #     subject: Start syncing application {{.app.metadata.name}}.
        #   message: |
        #     The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.
        #     Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
        #   slack:
        #     attachments: |-
        #       [{
        #         "title": "{{ .app.metadata.name}}",
        #         "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
        #         "color": "#0DADEA",
        #         "fields": [
        #         {
        #           "title": "Sync Status",
        #           "value": "{{.app.status.sync.status}}",
        #           "short": true
        #         },
        #         {
        #           "title": "Repository",
        #           "value": "{{.app.spec.source.repoURL}}",
        #           "short": true
        #         }
        #         {{range $index, $c := .app.status.conditions}}
        #         {{if not $index}},{{end}}
        #         {{if $index}},{{end}}
        #         {
        #           "title": "{{$c.type}}",
        #           "value": "{{$c.message}}",
        #           "short": true
        #         }
        #         {{end}}
        #         ]
        #       }]
        # template.app-sync-status-unknown: |
        #   email:
        #     subject: Application {{.app.metadata.name}} sync status is 'Unknown'
        #   message: |
        #     {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.
        #     Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
        #     {{if ne .serviceType "slack"}}
        #     {{range $c := .app.status.conditions}}
        #         * {{$c.message}}
        #     {{end}}
        #     {{end}}
        #   slack:
        #     attachments: |-
        #       [{
        #         "title": "{{ .app.metadata.name}}",
        #         "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
        #         "color": "#E96D76",
        #         "fields": [
        #         {
        #           "title": "Sync Status",
        #           "value": "{{.app.status.sync.status}}",
        #           "short": true
        #         },
        #         {
        #           "title": "Repository",
        #           "value": "{{.app.spec.source.repoURL}}",
        #           "short": true
        #         }
        #         {{range $index, $c := .app.status.conditions}}
        #         {{if not $index}},{{end}}
        #         {{if $index}},{{end}}
        #         {
        #           "title": "{{$c.type}}",
        #           "value": "{{$c.message}}",
        #           "short": true
        #         }
        #         {{end}}
        #         ]
        #       }]
        # template.app-sync-succeeded: |
        #   email:
        #     subject: Application {{.app.metadata.name}} has been successfully synced.
        #   message: |
        #     {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.
        #     Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
        #   slack:
        #     attachments: |-
        #       [{
        #         "title": "{{ .app.metadata.name}}",
        #         "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
        #         "color": "#18be52",
        #         "fields": [
        #         {
        #           "title": "Sync Status",
        #           "value": "{{.app.status.sync.status}}",
        #           "short": true
        #         },
        #         {
        #           "title": "Repository",
        #           "value": "{{.app.spec.source.repoURL}}",
        #           "short": true
        #         }
        #         {{range $index, $c := .app.status.conditions}}
        #         {{if not $index}},{{end}}
        #         {{if $index}},{{end}}
        #         {
        #           "title": "{{$c.type}}",
        #           "value": "{{$c.message}}",
        #           "short": true
        #         }
        #         {{end}}
        #         ]
        #       }]
    terminationGracePeriodSeconds : int, required, default is 30
        -- terminationGracePeriodSeconds for container lifecycle hook
    tolerations : [any], required, default is []
        -- [Tolerations] for use with node taints
        # @default -- `[]` (defaults to global.tolerations)
    topologySpreadConstraints : [any], required, default is []
        -- Assign custom [TopologySpreadConstraints] rules to the application controller
        # @default -- `[]` (defaults to global.topologySpreadConstraints)
        ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/
        ## If labelSelector is left out, it will default to the labelSelector configuration of the deployment
        - maxSkew: 1
        #   topologyKey: topology.kubernetes.io/zone
        #   whenUnsatisfiable: DoNotSchedule
    triggers : ValuesNotificationsTriggers, required, default is {}
        -- The trigger defines the condition when the notification should be sent
        ## For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/triggers/
        trigger.on-deployed: |
        #   - description: Application is synced and healthy. Triggered once per commit.
        #     oncePer: app.status.sync.revision
        #     send:
        #     - app-deployed
        #     when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
        # trigger.on-health-degraded: |
        #   - description: Application has degraded
        #     send:
        #     - app-health-degraded
        #     when: app.status.health.status == 'Degraded'
        # trigger.on-sync-failed: |
        #   - description: Application syncing has failed
        #     send:
        #     - app-sync-failed
        #     when: app.status.operationState.phase in ['Error', 'Failed']
        # trigger.on-sync-running: |
        #   - description: Application is being synced
        #     send:
        #     - app-sync-running
        #     when: app.status.operationState.phase in ['Running']
        # trigger.on-sync-status-unknown: |
        #   - description: Application status is 'Unknown'
        #     send:
        #     - app-sync-status-unknown
        #     when: app.status.sync.status == 'Unknown'
        # trigger.on-sync-succeeded: |
        #   - description: Application syncing has succeeded
        #     send:
        #     - app-sync-succeeded
        #     when: app.status.operationState.phase in ['Succeeded']
        #
        # For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/triggers/#default-triggers
        # defaultTriggers: |
        #   - on-sync-status-unknown
    """
    affinity: ValuesNotificationsAffinity = {}
    argocdUrl: str = ""
    automountServiceAccountToken: bool = True
    clusterRoleRules?: ValuesNotificationsClusterRoleRules
    cm?: ValuesNotificationsCm
    containerPorts?: ValuesNotificationsContainerPorts
    containerSecurityContext?: ValuesNotificationsContainerSecurityContext
    context: ValuesNotificationsContext = {}
    deploymentAnnotations: ValuesNotificationsDeploymentAnnotations = {}
    deploymentStrategy?: ValuesNotificationsDeploymentStrategy
    dnsConfig: ValuesNotificationsDnsConfig = {}
    dnsPolicy: str = "ClusterFirst"
    enabled: bool = True
    extraArgs: [any] = []
    extraContainers: [any] = []
    extraEnv: [any] = []
    extraEnvFrom: [any] = []
    extraVolumeMounts: [any] = []
    extraVolumes: [any] = []
    image?: ValuesNotificationsImage
    imagePullSecrets: [any] = []
    initContainers: [any] = []
    livenessProbe?: ValuesNotificationsLivenessProbe
    logFormat: str = ""
    logLevel: str = ""
    metrics?: ValuesNotificationsMetrics
    name: str = "notifications-controller"
    nodeSelector: ValuesNotificationsNodeSelector = {}
    notifiers: ValuesNotificationsNotifiers = {}
    pdb?: ValuesNotificationsPdb
    podAnnotations: ValuesNotificationsPodAnnotations = {}
    podLabels: ValuesNotificationsPodLabels = {}
    priorityClassName: str = ""
    readinessProbe?: ValuesNotificationsReadinessProbe
    resources: ValuesNotificationsResources = {}
    runtimeClassName: str = ""
    secret?: ValuesNotificationsSecret
    serviceAccount?: ValuesNotificationsServiceAccount
    subscriptions: [any] = []
    templates: ValuesNotificationsTemplates = {}
    terminationGracePeriodSeconds: int = 30
    tolerations: [any] = []
    topologySpreadConstraints: [any] = []
    triggers: ValuesNotificationsTriggers = {}

schema ValuesNotificationsAffinity:
    r"""
    -- Assign custom [affinity] rules
    # @default -- `{}` (defaults to global.affinity preset)
    """
    [...str]: any

schema ValuesNotificationsClusterRoleRules:
    r"""
    # Enable this and set the rules: to whatever custom rules you want for the Cluster Role resource.
    ## Defaults to off

    Attributes
    ----------
    rules : [any], required, default is []
        -- List of custom rules for the notifications controller's ClusterRole resource
    """
    rules: [any] = []

schema ValuesNotificationsCm:
    r"""
    ValuesNotificationsCm

    Attributes
    ----------
    create : bool, required, default is True
        -- Whether helm chart creates notifications controller config map
    """
    create: bool = True

schema ValuesNotificationsContainerPorts:
    r"""
    Notification controller container ports

    Attributes
    ----------
    metrics : int, required, default is 9001
        -- Metrics container port
    """
    metrics: int = 9001

schema ValuesNotificationsContainerSecurityContext:
    r"""
    -- Notification controller container-level security Context
    # @default -- See [values.yaml]

    Attributes
    ----------
    allowPrivilegeEscalation : bool, required, default is False
    capabilities : ValuesNotificationsContainerSecurityContextCapabilities, optional
    readOnlyRootFilesystem : bool, required, default is True
    runAsNonRoot : bool, required, default is True
    seccompProfile : ValuesNotificationsContainerSecurityContextSeccompProfile, optional
    """
    allowPrivilegeEscalation: bool = False
    capabilities?: ValuesNotificationsContainerSecurityContextCapabilities
    readOnlyRootFilesystem: bool = True
    runAsNonRoot: bool = True
    seccompProfile?: ValuesNotificationsContainerSecurityContextSeccompProfile

schema ValuesNotificationsContainerSecurityContextCapabilities:
    r"""
    ValuesNotificationsContainerSecurityContextCapabilities

    Attributes
    ----------
    drop : [str], optional
    """
    drop?: [str]

schema ValuesNotificationsContainerSecurityContextSeccompProfile:
    r"""
    ValuesNotificationsContainerSecurityContextSeccompProfile

    Attributes
    ----------
    $type : str, required, default is "RuntimeDefault"
    """
    $type: str = "RuntimeDefault"

schema ValuesNotificationsContext:
    r"""
    -- Define user-defined context
    ## For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/templates/#defining-user-defined-context
    region: east
    # environmentName: staging
    """
    [...str]: any

schema ValuesNotificationsDeploymentAnnotations:
    r"""
    -- Annotations to be applied to the notifications controller Deployment
    """
    [...str]: any

schema ValuesNotificationsDeploymentStrategy:
    r"""
    -- Deployment strategy to be added to the notifications controller Deployment

    Attributes
    ----------
    $type : str, required, default is "Recreate"
    """
    $type: str = "Recreate"

schema ValuesNotificationsDnsConfig:
    r"""
    -- [DNS configuration]
    """
    [...str]: any

schema ValuesNotificationsImage:
    r"""
    # Notifications controller image

    Attributes
    ----------
    imagePullPolicy : str, required, default is ""
        -- Image pull policy for the notifications controller
        # @default -- `""` (defaults to global.image.imagePullPolicy)
    repository : str, required, default is ""
        -- Repository to use for the notifications controller
        # @default -- `""` (defaults to global.image.repository)
    tag : str, required, default is ""
        -- Tag to use for the notifications controller
        # @default -- `""` (defaults to global.image.tag)
    """
    imagePullPolicy: str = ""
    repository: str = ""
    tag: str = ""

schema ValuesNotificationsLivenessProbe:
    r"""
    ValuesNotificationsLivenessProbe

    Attributes
    ----------
    enabled : bool, required, default is False
        -- Enable Kubernetes liveness probe for notifications controller Pods
    failureThreshold : int, required, default is 3
        -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
    initialDelaySeconds : int, required, default is 10
        -- Number of seconds after the container has started before [probe] is initiated
    periodSeconds : int, required, default is 10
        -- How often (in seconds) to perform the [probe]
    successThreshold : int, required, default is 1
        -- Minimum consecutive successes for the [probe] to be considered successful after having failed
    timeoutSeconds : int, required, default is 1
        -- Number of seconds after which the [probe] times out
    """
    enabled: bool = False
    failureThreshold: int = 3
    initialDelaySeconds: int = 10
    periodSeconds: int = 10
    successThreshold: int = 1
    timeoutSeconds: int = 1

schema ValuesNotificationsMetrics:
    r"""
    ValuesNotificationsMetrics

    Attributes
    ----------
    enabled : bool, required, default is False
        -- Enables prometheus metrics server
    port : int, required, default is 9001
        -- Metrics port
    service : ValuesNotificationsMetricsService, optional
    serviceMonitor : ValuesNotificationsMetricsServiceMonitor, optional
    """
    enabled: bool = False
    port: int = 9001
    service?: ValuesNotificationsMetricsService
    serviceMonitor?: ValuesNotificationsMetricsServiceMonitor

schema ValuesNotificationsMetricsService:
    r"""
    ValuesNotificationsMetricsService

    Attributes
    ----------
    annotations : ValuesNotificationsMetricsServiceAnnotations, required, default is {}
        -- Metrics service annotations
    clusterIP : str, required, default is ""
        -- Metrics service clusterIP. `None` makes a "headless service" (no virtual IP)
    labels : ValuesNotificationsMetricsServiceLabels, required, default is {}
        -- Metrics service labels
    portName : str, required, default is "http-metrics"
        -- Metrics service port name
    $type : str, required, default is "ClusterIP"
        -- Metrics service type
    """
    annotations: ValuesNotificationsMetricsServiceAnnotations = {}
    clusterIP: str = ""
    labels: ValuesNotificationsMetricsServiceLabels = {}
    portName: str = "http-metrics"
    $type: str = "ClusterIP"

schema ValuesNotificationsMetricsServiceAnnotations:
    r"""
    -- Metrics service annotations
    """
    [...str]: any

schema ValuesNotificationsMetricsServiceLabels:
    r"""
    -- Metrics service labels
    """
    [...str]: any

schema ValuesNotificationsMetricsServiceMonitor:
    r"""
    ValuesNotificationsMetricsServiceMonitor

    Attributes
    ----------
    additionalLabels : ValuesNotificationsMetricsServiceMonitorAdditionalLabels, required, default is {}
        prometheus: kube-prometheus
        # -- Prometheus ServiceMonitor labels
    annotations : ValuesNotificationsMetricsServiceMonitorAnnotations, required, default is {}
        -- Prometheus ServiceMonitor annotations
    enabled : bool, required, default is False
        -- Enable a prometheus ServiceMonitor
    honorLabels : bool, required, default is False
        -- When true, honorLabels preserves the metric’s labels when they collide with the target’s labels.
    metricRelabelings : [any], required, default is []
        -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
    relabelings : [any], required, default is []
        -- Prometheus [RelabelConfigs] to apply to samples before scraping
    scheme : str, required, default is ""
        namespace: monitoring
        # interval: 30s
        # scrapeTimeout: 10s
        # -- Prometheus ServiceMonitor scheme
    selector : ValuesNotificationsMetricsServiceMonitorSelector, required, default is {}
        -- Prometheus ServiceMonitor selector
    tlsConfig : ValuesNotificationsMetricsServiceMonitorTlsConfig, required, default is {}
        -- Prometheus ServiceMonitor tlsConfig
    """
    additionalLabels: ValuesNotificationsMetricsServiceMonitorAdditionalLabels = {}
    annotations: ValuesNotificationsMetricsServiceMonitorAnnotations = {}
    enabled: bool = False
    honorLabels: bool = False
    metricRelabelings: [any] = []
    relabelings: [any] = []
    scheme: str = ""
    selector: ValuesNotificationsMetricsServiceMonitorSelector = {}
    tlsConfig: ValuesNotificationsMetricsServiceMonitorTlsConfig = {}

schema ValuesNotificationsMetricsServiceMonitorAdditionalLabels:
    r"""
    prometheus: kube-prometheus
    # -- Prometheus ServiceMonitor labels
    """
    [...str]: any

schema ValuesNotificationsMetricsServiceMonitorAnnotations:
    r"""
    -- Prometheus ServiceMonitor annotations
    """
    [...str]: any

schema ValuesNotificationsMetricsServiceMonitorSelector:
    r"""
    -- Prometheus ServiceMonitor selector
    """
    [...str]: any

schema ValuesNotificationsMetricsServiceMonitorTlsConfig:
    r"""
    -- Prometheus ServiceMonitor tlsConfig
    """
    [...str]: any

schema ValuesNotificationsNodeSelector:
    r"""
    -- [Node selector]
    # @default -- `{}` (defaults to global.nodeSelector)
    """
    [...str]: any

schema ValuesNotificationsNotifiers:
    r"""
    -- Configures notification services such as slack, email or custom webhook
    # @default -- See [values.yaml]
    ## For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/overview/
    service.slack: |
    #   token: $slack-token
    """
    [...str]: any

schema ValuesNotificationsPdb:
    r"""
    # Notifications controller Pod Disruption Budget
    ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/

    Attributes
    ----------
    annotations : ValuesNotificationsPdbAnnotations, required, default is {}
        -- Annotations to be added to notifications controller pdb
    enabled : bool, required, default is False
        -- Deploy a [PodDisruptionBudget] for the notifications controller
    labels : ValuesNotificationsPdbLabels, required, default is {}
        -- Labels to be added to notifications controller pdb
    maxUnavailable : str, required, default is ""
        -- Number of pods that are unavailable after eviction as number or percentage (eg.: 50%).
        ## Has higher precedence over `notifications.pdb.minAvailable`
    minAvailable : str, required, default is ""
        -- Number of pods that are available after eviction as number or percentage (eg.: 50%)
        # @default -- `""` (defaults to 0 if not specified)
    """
    annotations: ValuesNotificationsPdbAnnotations = {}
    enabled: bool = False
    labels: ValuesNotificationsPdbLabels = {}
    maxUnavailable: str = ""
    minAvailable: str = ""

schema ValuesNotificationsPdbAnnotations:
    r"""
    -- Annotations to be added to notifications controller pdb
    """
    [...str]: any

schema ValuesNotificationsPdbLabels:
    r"""
    -- Labels to be added to notifications controller pdb
    """
    [...str]: any

schema ValuesNotificationsPodAnnotations:
    r"""
    -- Annotations to be applied to the notifications controller Pods
    """
    [...str]: any

schema ValuesNotificationsPodLabels:
    r"""
    -- Labels to be applied to the notifications controller Pods
    """
    [...str]: any

schema ValuesNotificationsReadinessProbe:
    r"""
    # Probes for notifications controller Pods (optional)
    ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/

    Attributes
    ----------
    enabled : bool, required, default is False
        -- Enable Kubernetes liveness probe for notifications controller Pods
    failureThreshold : int, required, default is 3
        -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
    initialDelaySeconds : int, required, default is 10
        -- Number of seconds after the container has started before [probe] is initiated
    periodSeconds : int, required, default is 10
        -- How often (in seconds) to perform the [probe]
    successThreshold : int, required, default is 1
        -- Minimum consecutive successes for the [probe] to be considered successful after having failed
    timeoutSeconds : int, required, default is 1
        -- Number of seconds after which the [probe] times out
    """
    enabled: bool = False
    failureThreshold: int = 3
    initialDelaySeconds: int = 10
    periodSeconds: int = 10
    successThreshold: int = 1
    timeoutSeconds: int = 1

schema ValuesNotificationsResources:
    r"""
    -- Resource limits and requests for the notifications controller
    limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
    """
    [...str]: any

schema ValuesNotificationsSecret:
    r"""
    grafana-apiKey:
    #   # For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/grafana/

    # webhooks-github-token:

    # email-username:
    # email-password:
    # For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/email/

    Attributes
    ----------
    annotations : ValuesNotificationsSecretAnnotations, required, default is {}
        -- key:value pairs of annotations to be added to the secret
    create : bool, required, default is True
        -- Whether helm chart creates notifications controller secret
        ## If true, will create a secret with the name below. Otherwise, will assume existence of a secret with that name.
    items : ValuesNotificationsSecretItems, required, default is {}
        -- Generic key:value pairs to be inserted into the secret
        ## Can be used for templates, notification services etc. Some examples given below.
        ## For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/overview/
        slack-token:
        #   # For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/slack/
    labels : ValuesNotificationsSecretLabels, required, default is {}
        -- key:value pairs of labels to be added to the secret
    name : str, required, default is "argocd-notifications-secret"
        -- notifications controller Secret name
    """
    annotations: ValuesNotificationsSecretAnnotations = {}
    create: bool = True
    items: ValuesNotificationsSecretItems = {}
    labels: ValuesNotificationsSecretLabels = {}
    name: str = "argocd-notifications-secret"

schema ValuesNotificationsSecretAnnotations:
    r"""
    -- key:value pairs of annotations to be added to the secret
    """
    [...str]: any

schema ValuesNotificationsSecretItems:
    r"""
    -- Generic key:value pairs to be inserted into the secret
    ## Can be used for templates, notification services etc. Some examples given below.
    ## For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/overview/
    slack-token:
    #   # For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/services/slack/
    """
    [...str]: any

schema ValuesNotificationsSecretLabels:
    r"""
    -- key:value pairs of labels to be added to the secret
    """
    [...str]: any

schema ValuesNotificationsServiceAccount:
    r"""
    ValuesNotificationsServiceAccount

    Attributes
    ----------
    annotations : ValuesNotificationsServiceAccountAnnotations, required, default is {}
        -- Annotations applied to created service account
    automountServiceAccountToken : bool, required, default is True
        -- Automount API credentials for the Service Account
    create : bool, required, default is True
        -- Create notifications controller service account
    labels : ValuesNotificationsServiceAccountLabels, required, default is {}
        -- Labels applied to created service account
    name : str, required, default is "argocd-notifications-controller"
        -- Notification controller service account name
    """
    annotations: ValuesNotificationsServiceAccountAnnotations = {}
    automountServiceAccountToken: bool = True
    create: bool = True
    labels: ValuesNotificationsServiceAccountLabels = {}
    name: str = "argocd-notifications-controller"

schema ValuesNotificationsServiceAccountAnnotations:
    r"""
    -- Annotations applied to created service account
    """
    [...str]: any

schema ValuesNotificationsServiceAccountLabels:
    r"""
    -- Labels applied to created service account
    """
    [...str]: any

schema ValuesNotificationsTemplates:
    r"""
    -- The notification template is used to generate the notification content
    ## For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/templates/
    template.app-deployed: |
    #   email:
    #     subject: New version of an application {{.app.metadata.name}} is up and running.
    #   message: |
    #     {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.
    #   slack:
    #     attachments: |
    #       [{
    #         "title": "{{ .app.metadata.name}}",
    #         "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
    #         "color": "#18be52",
    #         "fields": [
    #         {
    #           "title": "Sync Status",
    #           "value": "{{.app.status.sync.status}}",
    #           "short": true
    #         },
    #         {
    #           "title": "Repository",
    #           "value": "{{.app.spec.source.repoURL}}",
    #           "short": true
    #         },
    #         {
    #           "title": "Revision",
    #           "value": "{{.app.status.sync.revision}}",
    #           "short": true
    #         }
    #         {{range $index, $c := .app.status.conditions}}
    #         {{if not $index}},{{end}}
    #         {{if $index}},{{end}}
    #         {
    #           "title": "{{$c.type}}",
    #           "value": "{{$c.message}}",
    #           "short": true
    #         }
    #         {{end}}
    #         ]
    #       }]
    # template.app-health-degraded: |
    #   email:
    #     subject: Application {{.app.metadata.name}} has degraded.
    #   message: |
    #     {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.
    #     Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
    #   slack:
    #     attachments: |-
    #       [{
    #         "title": "{{ .app.metadata.name}}",
    #         "title_link": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
    #         "color": "#f4c030",
    #         "fields": [
    #         {
    #           "title": "Sync Status",
    #           "value": "{{.app.status.sync.status}}",
    #           "short": true
    #         },
    #         {
    #           "title": "Repository",
    #           "value": "{{.app.spec.source.repoURL}}",
    #           "short": true
    #         }
    #         {{range $index, $c := .app.status.conditions}}
    #         {{if not $index}},{{end}}
    #         {{if $index}},{{end}}
    #         {
    #           "title": "{{$c.type}}",
    #           "value": "{{$c.message}}",
    #           "short": true
    #         }
    #         {{end}}
    #         ]
    #       }]
    # template.app-sync-failed: |
    #   email:
    #     subject: Failed to sync application {{.app.metadata.name}}.
    #   message: |
    #     {{if eq .serviceType "slack"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}
    #     Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
    #   slack:
    #     attachments: |-
    #       [{
    #         "title": "{{ .app.metadata.name}}",
    #         "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
    #         "color": "#E96D76",
    #         "fields": [
    #         {
    #           "title": "Sync Status",
    #           "value": "{{.app.status.sync.status}}",
    #           "short": true
    #         },
    #         {
    #           "title": "Repository",
    #           "value": "{{.app.spec.source.repoURL}}",
    #           "short": true
    #         }
    #         {{range $index, $c := .app.status.conditions}}
    #         {{if not $index}},{{end}}
    #         {{if $index}},{{end}}
    #         {
    #           "title": "{{$c.type}}",
    #           "value": "{{$c.message}}",
    #           "short": true
    #         }
    #         {{end}}
    #         ]
    #       }]
    # template.app-sync-running: |
    #   email:
    #     subject: Start syncing application {{.app.metadata.name}}.
    #   message: |
    #     The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.
    #     Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
    #   slack:
    #     attachments: |-
    #       [{
    #         "title": "{{ .app.metadata.name}}",
    #         "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
    #         "color": "#0DADEA",
    #         "fields": [
    #         {
    #           "title": "Sync Status",
    #           "value": "{{.app.status.sync.status}}",
    #           "short": true
    #         },
    #         {
    #           "title": "Repository",
    #           "value": "{{.app.spec.source.repoURL}}",
    #           "short": true
    #         }
    #         {{range $index, $c := .app.status.conditions}}
    #         {{if not $index}},{{end}}
    #         {{if $index}},{{end}}
    #         {
    #           "title": "{{$c.type}}",
    #           "value": "{{$c.message}}",
    #           "short": true
    #         }
    #         {{end}}
    #         ]
    #       }]
    # template.app-sync-status-unknown: |
    #   email:
    #     subject: Application {{.app.metadata.name}} sync status is 'Unknown'
    #   message: |
    #     {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.
    #     Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
    #     {{if ne .serviceType "slack"}}
    #     {{range $c := .app.status.conditions}}
    #         * {{$c.message}}
    #     {{end}}
    #     {{end}}
    #   slack:
    #     attachments: |-
    #       [{
    #         "title": "{{ .app.metadata.name}}",
    #         "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
    #         "color": "#E96D76",
    #         "fields": [
    #         {
    #           "title": "Sync Status",
    #           "value": "{{.app.status.sync.status}}",
    #           "short": true
    #         },
    #         {
    #           "title": "Repository",
    #           "value": "{{.app.spec.source.repoURL}}",
    #           "short": true
    #         }
    #         {{range $index, $c := .app.status.conditions}}
    #         {{if not $index}},{{end}}
    #         {{if $index}},{{end}}
    #         {
    #           "title": "{{$c.type}}",
    #           "value": "{{$c.message}}",
    #           "short": true
    #         }
    #         {{end}}
    #         ]
    #       }]
    # template.app-sync-succeeded: |
    #   email:
    #     subject: Application {{.app.metadata.name}} has been successfully synced.
    #   message: |
    #     {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.
    #     Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
    #   slack:
    #     attachments: |-
    #       [{
    #         "title": "{{ .app.metadata.name}}",
    #         "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
    #         "color": "#18be52",
    #         "fields": [
    #         {
    #           "title": "Sync Status",
    #           "value": "{{.app.status.sync.status}}",
    #           "short": true
    #         },
    #         {
    #           "title": "Repository",
    #           "value": "{{.app.spec.source.repoURL}}",
    #           "short": true
    #         }
    #         {{range $index, $c := .app.status.conditions}}
    #         {{if not $index}},{{end}}
    #         {{if $index}},{{end}}
    #         {
    #           "title": "{{$c.type}}",
    #           "value": "{{$c.message}}",
    #           "short": true
    #         }
    #         {{end}}
    #         ]
    #       }]
    """
    [...str]: any

schema ValuesNotificationsTriggers:
    r"""
    -- The trigger defines the condition when the notification should be sent
    ## For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/triggers/
    trigger.on-deployed: |
    #   - description: Application is synced and healthy. Triggered once per commit.
    #     oncePer: app.status.sync.revision
    #     send:
    #     - app-deployed
    #     when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
    # trigger.on-health-degraded: |
    #   - description: Application has degraded
    #     send:
    #     - app-health-degraded
    #     when: app.status.health.status == 'Degraded'
    # trigger.on-sync-failed: |
    #   - description: Application syncing has failed
    #     send:
    #     - app-sync-failed
    #     when: app.status.operationState.phase in ['Error', 'Failed']
    # trigger.on-sync-running: |
    #   - description: Application is being synced
    #     send:
    #     - app-sync-running
    #     when: app.status.operationState.phase in ['Running']
    # trigger.on-sync-status-unknown: |
    #   - description: Application status is 'Unknown'
    #     send:
    #     - app-sync-status-unknown
    #     when: app.status.sync.status == 'Unknown'
    # trigger.on-sync-succeeded: |
    #   - description: Application syncing has succeeded
    #     send:
    #     - app-sync-succeeded
    #     when: app.status.operationState.phase in ['Succeeded']
    #
    # For more information: https://argo-cd.readthedocs.io/en/stable/operator-manual/notifications/triggers/#default-triggers
    # defaultTriggers: |
    #   - on-sync-status-unknown
    """
    [...str]: any

schema ValuesOpenshift:
    r"""
    ValuesOpenshift

    Attributes
    ----------
    enabled : bool, required, default is False
        -- enables using arbitrary uid for argo repo server
    """
    enabled: bool = False

schema ValuesRedis:
    r"""
    # Redis

    Attributes
    ----------
    affinity : ValuesRedisAffinity, required, default is {}
        -- Assign custom [affinity] rules to the deployment
        # @default -- `{}` (defaults to global.affinity preset)
    automountServiceAccountToken : bool, required, default is True
        -- Automount API credentials for the Service Account into the pod.
    containerPorts : ValuesRedisContainerPorts, optional
        Redis container ports
    containerSecurityContext : ValuesRedisContainerSecurityContext, optional
        -- Redis container-level security context
        # @default -- See [values.yaml]
    deploymentAnnotations : ValuesRedisDeploymentAnnotations, required, default is {}
        -- Annotations to be added to the Redis server Deployment
    dnsConfig : ValuesRedisDnsConfig, required, default is {}
        -- [DNS configuration]
    dnsPolicy : str, required, default is "ClusterFirst"
        -- Alternative DNS policy for Redis server pods
    enabled : bool, required, default is True
        -- Enable redis
    env : [any], required, default is []
        -- Environment variables to pass to the Redis server
    envFrom : [any], required, default is []
        -- envFrom to pass to the Redis server
        # @default -- `[]` (See [values.yaml])
        - configMapRef:
        #     name: config-map-name
        # - secretRef:
        #     name: secret-name
    exporter : ValuesRedisExporter, optional
        # Prometheus redis-exporter sidecar
    extraArgs : [any], required, default is []
        -- Additional command line arguments to pass to redis-server
        - --bind
        # - "0.0.0.0"
    extraContainers : [any], required, default is []
        -- Additional containers to be added to the redis pod
        ## Note: Supports use of custom Helm templates
    image : ValuesRedisImage, optional
        # Redis image
    imagePullSecrets : [any], required, default is []
        -- Secrets with credentials to pull images from a private registry
        # @default -- `[]` (defaults to global.imagePullSecrets)
    initContainers : [any], required, default is []
        -- Init containers to add to the redis pod
        ## Note: Supports use of custom Helm templates
    livenessProbe : ValuesRedisLivenessProbe, optional
    metrics : ValuesRedisMetrics, optional
    name : str, required, default is "redis"
        -- Redis name
    nodeSelector : ValuesRedisNodeSelector, required, default is {}
        -- [Node selector]
        # @default -- `{}` (defaults to global.nodeSelector)
    pdb : ValuesRedisPdb, optional
        # Redis Pod Disruption Budget
        ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
    podAnnotations : ValuesRedisPodAnnotations, required, default is {}
        -- Annotations to be added to the Redis server pods
    podLabels : ValuesRedisPodLabels, required, default is {}
        -- Labels to be added to the Redis server pods
    priorityClassName : str, required, default is ""
        -- Priority class for redis pods
        # @default -- `""` (defaults to global.priorityClassName)
    readinessProbe : ValuesRedisReadinessProbe, optional
        # Probes for Redis server (optional)
        ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    resources : ValuesRedisResources, required, default is {}
        -- Resource limits and requests for redis
        limits:
        #    cpu: 200m
        #    memory: 128Mi
        #  requests:
        #    cpu: 100m
        #    memory: 64Mi
    runtimeClassName : str, required, default is ""
        -- Runtime class name for redis
        # @default -- `""` (defaults to global.runtimeClassName)
    securityContext : ValuesRedisSecurityContext, optional
        -- Redis pod-level security context
        # @default -- See [values.yaml]
    service : ValuesRedisService, optional
    serviceAccount : ValuesRedisServiceAccount, optional
    servicePort : int, required, default is 6379
        -- Redis service port
    terminationGracePeriodSeconds : int, required, default is 30
        -- terminationGracePeriodSeconds for container lifecycle hook
    tolerations : [any], required, default is []
        -- [Tolerations] for use with node taints
        # @default -- `[]` (defaults to global.tolerations)
    topologySpreadConstraints : [any], required, default is []
        -- Assign custom [TopologySpreadConstraints] rules to redis
        # @default -- `[]` (defaults to global.topologySpreadConstraints)
        ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/
        ## If labelSelector is left out, it will default to the labelSelector configuration of the deployment
        - maxSkew: 1
        #   topologyKey: topology.kubernetes.io/zone
        #   whenUnsatisfiable: DoNotSchedule
    volumeMounts : [any], required, default is []
        -- Additional volumeMounts to the redis container
    volumes : [any], required, default is []
        -- Additional volumes to the redis pod
    """
    affinity: ValuesRedisAffinity = {}
    automountServiceAccountToken: bool = True
    containerPorts?: ValuesRedisContainerPorts
    containerSecurityContext?: ValuesRedisContainerSecurityContext
    deploymentAnnotations: ValuesRedisDeploymentAnnotations = {}
    dnsConfig: ValuesRedisDnsConfig = {}
    dnsPolicy: str = "ClusterFirst"
    enabled: bool = True
    env: [any] = []
    envFrom: [any] = []
    exporter?: ValuesRedisExporter
    extraArgs: [any] = []
    extraContainers: [any] = []
    image?: ValuesRedisImage
    imagePullSecrets: [any] = []
    initContainers: [any] = []
    livenessProbe?: ValuesRedisLivenessProbe
    metrics?: ValuesRedisMetrics
    name: str = "redis"
    nodeSelector: ValuesRedisNodeSelector = {}
    pdb?: ValuesRedisPdb
    podAnnotations: ValuesRedisPodAnnotations = {}
    podLabels: ValuesRedisPodLabels = {}
    priorityClassName: str = ""
    readinessProbe?: ValuesRedisReadinessProbe
    resources: ValuesRedisResources = {}
    runtimeClassName: str = ""
    securityContext?: ValuesRedisSecurityContext
    service?: ValuesRedisService
    serviceAccount?: ValuesRedisServiceAccount
    servicePort: int = 6379
    terminationGracePeriodSeconds: int = 30
    tolerations: [any] = []
    topologySpreadConstraints: [any] = []
    volumeMounts: [any] = []
    volumes: [any] = []

schema ValuesRedisAffinity:
    r"""
    -- Assign custom [affinity] rules to the deployment
    # @default -- `{}` (defaults to global.affinity preset)
    """
    [...str]: any

schema ValuesRedisContainerPorts:
    r"""
    Redis container ports

    Attributes
    ----------
    metrics : int, required, default is 9121
        -- Metrics container port
    redis : int, required, default is 6379
        -- Redis container port
    """
    metrics: int = 9121
    redis: int = 6379

schema ValuesRedisContainerSecurityContext:
    r"""
    -- Redis container-level security context
    # @default -- See [values.yaml]

    Attributes
    ----------
    allowPrivilegeEscalation : bool, required, default is False
    capabilities : ValuesRedisContainerSecurityContextCapabilities, optional
    readOnlyRootFilesystem : bool, required, default is True
    """
    allowPrivilegeEscalation: bool = False
    capabilities?: ValuesRedisContainerSecurityContextCapabilities
    readOnlyRootFilesystem: bool = True

schema ValuesRedisContainerSecurityContextCapabilities:
    r"""
    ValuesRedisContainerSecurityContextCapabilities

    Attributes
    ----------
    drop : [str], optional
    """
    drop?: [str]

schema ValuesRedisDeploymentAnnotations:
    r"""
    -- Annotations to be added to the Redis server Deployment
    """
    [...str]: any

schema ValuesRedisDnsConfig:
    r"""
    -- [DNS configuration]
    """
    [...str]: any

schema ValuesRedisExporter:
    r"""
    # Prometheus redis-exporter sidecar

    Attributes
    ----------
    containerSecurityContext : ValuesRedisExporterContainerSecurityContext, optional
        -- Redis exporter security context
        # @default -- See [values.yaml]
    enabled : bool, required, default is False
        -- Enable Prometheus redis-exporter sidecar
    env : [any], required, default is []
        -- Environment variables to pass to the Redis exporter
    image : ValuesRedisExporterImage, optional
        # Prometheus redis-exporter image
    livenessProbe : ValuesRedisExporterLivenessProbe, optional
    readinessProbe : ValuesRedisExporterReadinessProbe, optional
        # Probes for Redis exporter (optional)
        ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    resources : ValuesRedisExporterResources, required, default is {}
        -- Resource limits and requests for redis-exporter sidecar
        limits:
        #   cpu: 50m
        #   memory: 64Mi
        # requests:
        #   cpu: 10m
        #   memory: 32Mi
    """
    containerSecurityContext?: ValuesRedisExporterContainerSecurityContext
    enabled: bool = False
    env: [any] = []
    image?: ValuesRedisExporterImage
    livenessProbe?: ValuesRedisExporterLivenessProbe
    readinessProbe?: ValuesRedisExporterReadinessProbe
    resources: ValuesRedisExporterResources = {}

schema ValuesRedisExporterContainerSecurityContext:
    r"""
    -- Redis exporter security context
    # @default -- See [values.yaml]

    Attributes
    ----------
    allowPrivilegeEscalation : bool, required, default is False
    capabilities : ValuesRedisExporterContainerSecurityContextCapabilities, optional
    readOnlyRootFilesystem : bool, required, default is True
    runAsNonRoot : bool, required, default is True
    seccompProfile : ValuesRedisExporterContainerSecurityContextSeccompProfile, optional
    """
    allowPrivilegeEscalation: bool = False
    capabilities?: ValuesRedisExporterContainerSecurityContextCapabilities
    readOnlyRootFilesystem: bool = True
    runAsNonRoot: bool = True
    seccompProfile?: ValuesRedisExporterContainerSecurityContextSeccompProfile

schema ValuesRedisExporterContainerSecurityContextCapabilities:
    r"""
    ValuesRedisExporterContainerSecurityContextCapabilities

    Attributes
    ----------
    drop : [str], optional
    """
    drop?: [str]

schema ValuesRedisExporterContainerSecurityContextSeccompProfile:
    r"""
    ValuesRedisExporterContainerSecurityContextSeccompProfile

    Attributes
    ----------
    $type : str, required, default is "RuntimeDefault"
    """
    $type: str = "RuntimeDefault"

schema ValuesRedisExporterImage:
    r"""
    # Prometheus redis-exporter image

    Attributes
    ----------
    imagePullPolicy : str, required, default is ""
        -- Image pull policy for the redis-exporter
        # @default -- `""` (defaults to global.image.imagePullPolicy)
    repository : str, required, default is "public.ecr.aws/bitnami/redis-exporter"
        -- Repository to use for the redis-exporter
    tag : str, required, default is "1.58.0"
        -- Tag to use for the redis-exporter
    """
    imagePullPolicy: str = ""
    repository: str = "public.ecr.aws/bitnami/redis-exporter"
    tag: str = "1.58.0"

schema ValuesRedisExporterLivenessProbe:
    r"""
    ValuesRedisExporterLivenessProbe

    Attributes
    ----------
    enabled : bool, required, default is False
        -- Enable Kubernetes liveness probe for Redis exporter
    failureThreshold : int, required, default is 5
        -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
    initialDelaySeconds : int, required, default is 30
        -- Number of seconds after the container has started before [probe] is initiated
    periodSeconds : int, required, default is 15
        -- How often (in seconds) to perform the [probe]
    successThreshold : int, required, default is 1
        -- Minimum consecutive successes for the [probe] to be considered successful after having failed
    timeoutSeconds : int, required, default is 15
        -- Number of seconds after which the [probe] times out
    """
    enabled: bool = False
    failureThreshold: int = 5
    initialDelaySeconds: int = 30
    periodSeconds: int = 15
    successThreshold: int = 1
    timeoutSeconds: int = 15

schema ValuesRedisExporterReadinessProbe:
    r"""
    # Probes for Redis exporter (optional)
    ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/

    Attributes
    ----------
    enabled : bool, required, default is False
        -- Enable Kubernetes liveness probe for Redis exporter (optional)
    failureThreshold : int, required, default is 5
        -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
    initialDelaySeconds : int, required, default is 30
        -- Number of seconds after the container has started before [probe] is initiated
    periodSeconds : int, required, default is 15
        -- How often (in seconds) to perform the [probe]
    successThreshold : int, required, default is 1
        -- Minimum consecutive successes for the [probe] to be considered successful after having failed
    timeoutSeconds : int, required, default is 15
        -- Number of seconds after which the [probe] times out
    """
    enabled: bool = False
    failureThreshold: int = 5
    initialDelaySeconds: int = 30
    periodSeconds: int = 15
    successThreshold: int = 1
    timeoutSeconds: int = 15

schema ValuesRedisExporterResources:
    r"""
    -- Resource limits and requests for redis-exporter sidecar
    limits:
    #   cpu: 50m
    #   memory: 64Mi
    # requests:
    #   cpu: 10m
    #   memory: 32Mi
    """
    [...str]: any

schema ValuesRedisHa:
    r"""
    # Redis-HA subchart replaces custom redis deployment when `redis-ha.enabled=true`
    # Ref: https://github.com/DandyDeveloper/charts/blob/master/charts/redis-ha/values.yaml

    Attributes
    ----------
    additionalAffinities : ValuesRedisHaAdditionalAffinities, required, default is {}
        -- Additional affinities to add to the Redis server pods.
    affinity : str, required, default is ""
        -- Assign custom [affinity] rules to the Redis pods.
    auth : bool, required, default is True
        -- Configures redis-ha with AUTH
    containerSecurityContext : ValuesRedisHaContainerSecurityContext, optional
        -- Redis HA statefulset container-level security context
        # @default -- See [values.yaml]
    enabled : bool, required, default is False
        -- Enables the Redis HA subchart and disables the custom Redis single node deployment
    existingSecret : str, required, default is "argocd-redis"
        -- Existing Secret to use for redis-ha authentication.
        # By default the redis-secret-init Job is generating this Secret.
    exporter : ValuesRedisHaExporter, optional
        # Prometheus redis-exporter sidecar
    haproxy : ValuesRedisHaHaproxy, optional
        # Enables a HA Proxy for better LoadBalancing / Sentinel Master support. Automatically proxies to Redis master.
    hardAntiAffinity : bool, required, default is True
        -- Whether the Redis server pods should be forced to run on separate nodes.
    image : ValuesRedisHaImage, optional
        # Redis image
    persistentVolume : ValuesRedisHaPersistentVolume, optional
    redis : ValuesRedisHaRedis, optional
        # Redis specific configuration options
    tolerations : [any], required, default is []
        -- [Tolerations] for use with node taints for Redis pods.
    topologySpreadConstraints : ValuesRedisHaTopologySpreadConstraints, optional
        -- Assign custom [TopologySpreadConstraints] rules to the Redis pods.
        ## https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/
    """
    additionalAffinities: ValuesRedisHaAdditionalAffinities = {}
    affinity: str = ""
    auth: bool = True
    containerSecurityContext?: ValuesRedisHaContainerSecurityContext
    enabled: bool = False
    existingSecret: str = "argocd-redis"
    exporter?: ValuesRedisHaExporter
    haproxy?: ValuesRedisHaHaproxy
    hardAntiAffinity: bool = True
    image?: ValuesRedisHaImage
    persistentVolume?: ValuesRedisHaPersistentVolume
    redis?: ValuesRedisHaRedis
    tolerations: [any] = []
    topologySpreadConstraints?: ValuesRedisHaTopologySpreadConstraints

schema ValuesRedisHaAdditionalAffinities:
    r"""
    -- Additional affinities to add to the Redis server pods.
    """
    [...str]: any

schema ValuesRedisHaContainerSecurityContext:
    r"""
    -- Redis HA statefulset container-level security context
    # @default -- See [values.yaml]

    Attributes
    ----------
    readOnlyRootFilesystem : bool, required, default is True
    """
    readOnlyRootFilesystem: bool = True

schema ValuesRedisHaExporter:
    r"""
    # Prometheus redis-exporter sidecar

    Attributes
    ----------
    enabled : bool, required, default is False
        -- Enable Prometheus redis-exporter sidecar
    image : str, required, default is "public.ecr.aws/bitnami/redis-exporter"
        -- Repository to use for the redis-exporter
    tag : str, required, default is "1.58.0"
        -- Tag to use for the redis-exporter
    """
    enabled: bool = False
    image: str = "public.ecr.aws/bitnami/redis-exporter"
    tag: str = "1.58.0"

schema ValuesRedisHaHaproxy:
    r"""
    # Enables a HA Proxy for better LoadBalancing / Sentinel Master support. Automatically proxies to Redis master.

    Attributes
    ----------
    additionalAffinities : ValuesRedisHaHaproxyAdditionalAffinities, required, default is {}
        -- Additional affinities to add to the haproxy pods.
    affinity : str, required, default is ""
        -- Assign custom [affinity] rules to the haproxy pods.
    containerSecurityContext : ValuesRedisHaHaproxyContainerSecurityContext, optional
        -- HAProxy container-level security context
        # @default -- See [values.yaml]
    enabled : bool, required, default is True
        -- Enabled HAProxy LoadBalancing/Proxy
    hardAntiAffinity : bool, required, default is True
        -- Whether the haproxy pods should be forced to run on separate nodes.
    labels : ValuesRedisHaHaproxyLabels, optional
        --  Custom labels for the haproxy pod. This is relevant for Argo CD CLI.
    metrics : ValuesRedisHaHaproxyMetrics, optional
    tolerations : [any], required, default is []
        -- [Tolerations] for use with node taints for haproxy pods.
    """
    additionalAffinities: ValuesRedisHaHaproxyAdditionalAffinities = {}
    affinity: str = ""
    containerSecurityContext?: ValuesRedisHaHaproxyContainerSecurityContext
    enabled: bool = True
    hardAntiAffinity: bool = True
    labels?: ValuesRedisHaHaproxyLabels
    metrics?: ValuesRedisHaHaproxyMetrics
    tolerations: [any] = []

schema ValuesRedisHaHaproxyAdditionalAffinities:
    r"""
    -- Additional affinities to add to the haproxy pods.
    """
    [...str]: any

schema ValuesRedisHaHaproxyContainerSecurityContext:
    r"""
    -- HAProxy container-level security context
    # @default -- See [values.yaml]

    Attributes
    ----------
    readOnlyRootFilesystem : bool, required, default is True
    """
    readOnlyRootFilesystem: bool = True

schema ValuesRedisHaHaproxyLabels:
    r"""
    --  Custom labels for the haproxy pod. This is relevant for Argo CD CLI.

    Attributes
    ----------
    "app.kubernetes.io/name" : str, required, default is "argocd-redis-ha-haproxy"
    """
    "app.kubernetes.io/name": str = "argocd-redis-ha-haproxy"

schema ValuesRedisHaHaproxyMetrics:
    r"""
    ValuesRedisHaHaproxyMetrics

    Attributes
    ----------
    enabled : bool, required, default is True
        -- HAProxy enable prometheus metric scraping
    """
    enabled: bool = True

schema ValuesRedisHaImage:
    r"""
    # Redis image

    Attributes
    ----------
    repository : str, required, default is "public.ecr.aws/docker/library/redis"
        -- Redis repository
    tag : str, required, default is "7.4.1-alpine"
        -- Redis tag
    """
    repository: str = "public.ecr.aws/docker/library/redis"
    tag: str = "7.4.1-alpine"

schema ValuesRedisHaPersistentVolume:
    r"""
    ValuesRedisHaPersistentVolume

    Attributes
    ----------
    enabled : bool, required, default is False
        -- Configures persistence on Redis nodes
    """
    enabled: bool = False

schema ValuesRedisHaRedis:
    r"""
    # Redis specific configuration options

    Attributes
    ----------
    config : ValuesRedisHaRedisConfig, optional
        -- Any valid redis config options in this section will be applied to each server (see `redis-ha` chart)
        # @default -- See [values.yaml]
    masterGroupName : str, required, default is "argocd"
        -- Redis convention for naming the cluster group: must match `^[\\w-\\.]+$` and can be templated
    """
    config?: ValuesRedisHaRedisConfig
    masterGroupName: str = "argocd"

schema ValuesRedisHaRedisConfig:
    r"""
    -- Any valid redis config options in this section will be applied to each server (see `redis-ha` chart)
    # @default -- See [values.yaml]

    Attributes
    ----------
    save : str, required, default is r"""
    ""
    """
        -- Will save the DB if both the given number of seconds and the given number of write operations against the DB occurred. `""`  is disabled
        # @default -- `'""'`
    """

    save: str = r""""" """

schema ValuesRedisHaTopologySpreadConstraints:
    r"""
    -- Assign custom [TopologySpreadConstraints] rules to the Redis pods.
    ## https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/

    Attributes
    ----------
    enabled : bool, required, default is False
        -- Enable Redis HA topology spread constraints
    maxSkew : str, required, default is ""
        -- Max skew of pods tolerated
        # @default -- `""` (defaults to `1`)
    topologyKey : str, required, default is ""
        -- Topology key for spread
        # @default -- `""` (defaults to `topology.kubernetes.io/zone`)
    whenUnsatisfiable : str, required, default is ""
        -- Enforcement policy, hard or soft
        # @default -- `""` (defaults to `ScheduleAnyway`)
    """
    enabled: bool = False
    maxSkew: str = ""
    topologyKey: str = ""
    whenUnsatisfiable: str = ""

schema ValuesRedisImage:
    r"""
    # Redis image

    Attributes
    ----------
    imagePullPolicy : str, required, default is ""
        -- Redis image pull policy
        # @default -- `""` (defaults to global.image.imagePullPolicy)
    repository : str, required, default is "public.ecr.aws/docker/library/redis"
        -- Redis repository
    tag : str, required, default is "7.4.1-alpine"
        -- Redis tag
    """
    imagePullPolicy: str = ""
    repository: str = "public.ecr.aws/docker/library/redis"
    tag: str = "7.4.1-alpine"

schema ValuesRedisLivenessProbe:
    r"""
    ValuesRedisLivenessProbe

    Attributes
    ----------
    enabled : bool, required, default is False
        -- Enable Kubernetes liveness probe for Redis server
    failureThreshold : int, required, default is 5
        -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
    initialDelaySeconds : int, required, default is 30
        -- Number of seconds after the container has started before [probe] is initiated
    periodSeconds : int, required, default is 15
        -- How often (in seconds) to perform the [probe]
    successThreshold : int, required, default is 1
        -- Minimum consecutive successes for the [probe] to be considered successful after having failed
    timeoutSeconds : int, required, default is 15
        -- Number of seconds after which the [probe] times out
    """
    enabled: bool = False
    failureThreshold: int = 5
    initialDelaySeconds: int = 30
    periodSeconds: int = 15
    successThreshold: int = 1
    timeoutSeconds: int = 15

schema ValuesRedisMetrics:
    r"""
    ValuesRedisMetrics

    Attributes
    ----------
    enabled : bool, required, default is False
        -- Deploy metrics service
    service : ValuesRedisMetricsService, optional
        Redis metrics service configuration
    serviceMonitor : ValuesRedisMetricsServiceMonitor, optional
    """
    enabled: bool = False
    service?: ValuesRedisMetricsService
    serviceMonitor?: ValuesRedisMetricsServiceMonitor

schema ValuesRedisMetricsService:
    r"""
    Redis metrics service configuration

    Attributes
    ----------
    annotations : ValuesRedisMetricsServiceAnnotations, required, default is {}
        -- Metrics service annotations
    clusterIP : str, required, default is "None"
        -- Metrics service clusterIP. `None` makes a "headless service" (no virtual IP)
    labels : ValuesRedisMetricsServiceLabels, required, default is {}
        -- Metrics service labels
    portName : str, required, default is "http-metrics"
        -- Metrics service port name
    servicePort : int, required, default is 9121
        -- Metrics service port
    $type : str, required, default is "ClusterIP"
        -- Metrics service type
    """
    annotations: ValuesRedisMetricsServiceAnnotations = {}
    clusterIP: str = "None"
    labels: ValuesRedisMetricsServiceLabels = {}
    portName: str = "http-metrics"
    servicePort: int = 9121
    $type: str = "ClusterIP"

schema ValuesRedisMetricsServiceAnnotations:
    r"""
    -- Metrics service annotations
    """
    [...str]: any

schema ValuesRedisMetricsServiceLabels:
    r"""
    -- Metrics service labels
    """
    [...str]: any

schema ValuesRedisMetricsServiceMonitor:
    r"""
    ValuesRedisMetricsServiceMonitor

    Attributes
    ----------
    additionalLabels : ValuesRedisMetricsServiceMonitorAdditionalLabels, required, default is {}
        -- Prometheus ServiceMonitor labels
    annotations : ValuesRedisMetricsServiceMonitorAnnotations, required, default is {}
        -- Prometheus ServiceMonitor annotations
    enabled : bool, required, default is False
        -- Enable a prometheus ServiceMonitor
    honorLabels : bool, required, default is False
        -- When true, honorLabels preserves the metric’s labels when they collide with the target’s labels.
    interval : str, required, default is "30s"
        -- Interval at which metrics should be scraped
    metricRelabelings : [any], required, default is []
        -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
    namespace : str, required, default is ""
        -- Prometheus ServiceMonitor namespace
        "monitoring"
    relabelings : [any], required, default is []
        -- Prometheus [RelabelConfigs] to apply to samples before scraping
    scheme : str, required, default is ""
        -- Prometheus ServiceMonitor scheme
    selector : ValuesRedisMetricsServiceMonitorSelector, required, default is {}
        -- Prometheus ServiceMonitor selector
        prometheus: kube-prometheus
    tlsConfig : ValuesRedisMetricsServiceMonitorTlsConfig, required, default is {}
        -- Prometheus ServiceMonitor tlsConfig
    """
    additionalLabels: ValuesRedisMetricsServiceMonitorAdditionalLabels = {}
    annotations: ValuesRedisMetricsServiceMonitorAnnotations = {}
    enabled: bool = False
    honorLabels: bool = False
    interval: str = "30s"
    metricRelabelings: [any] = []
    namespace: str = ""
    relabelings: [any] = []
    scheme: str = ""
    selector: ValuesRedisMetricsServiceMonitorSelector = {}
    tlsConfig: ValuesRedisMetricsServiceMonitorTlsConfig = {}

schema ValuesRedisMetricsServiceMonitorAdditionalLabels:
    r"""
    -- Prometheus ServiceMonitor labels
    """
    [...str]: any

schema ValuesRedisMetricsServiceMonitorAnnotations:
    r"""
    -- Prometheus ServiceMonitor annotations
    """
    [...str]: any

schema ValuesRedisMetricsServiceMonitorSelector:
    r"""
    -- Prometheus ServiceMonitor selector
    prometheus: kube-prometheus
    """
    [...str]: any

schema ValuesRedisMetricsServiceMonitorTlsConfig:
    r"""
    -- Prometheus ServiceMonitor tlsConfig
    """
    [...str]: any

schema ValuesRedisNodeSelector:
    r"""
    -- [Node selector]
    # @default -- `{}` (defaults to global.nodeSelector)
    """
    [...str]: any

schema ValuesRedisPdb:
    r"""
    # Redis Pod Disruption Budget
    ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/

    Attributes
    ----------
    annotations : ValuesRedisPdbAnnotations, required, default is {}
        -- Annotations to be added to Redis pdb
    enabled : bool, required, default is False
        -- Deploy a [PodDisruptionBudget] for the Redis
    labels : ValuesRedisPdbLabels, required, default is {}
        -- Labels to be added to Redis pdb
    maxUnavailable : str, required, default is ""
        -- Number of pods that are unavailble after eviction as number or percentage (eg.: 50%).
        ## Has higher precedence over `redis.pdb.minAvailable`
    minAvailable : str, required, default is ""
        -- Number of pods that are available after eviction as number or percentage (eg.: 50%)
        # @default -- `""` (defaults to 0 if not specified)
    """
    annotations: ValuesRedisPdbAnnotations = {}
    enabled: bool = False
    labels: ValuesRedisPdbLabels = {}
    maxUnavailable: str = ""
    minAvailable: str = ""

schema ValuesRedisPdbAnnotations:
    r"""
    -- Annotations to be added to Redis pdb
    """
    [...str]: any

schema ValuesRedisPdbLabels:
    r"""
    -- Labels to be added to Redis pdb
    """
    [...str]: any

schema ValuesRedisPodAnnotations:
    r"""
    -- Annotations to be added to the Redis server pods
    """
    [...str]: any

schema ValuesRedisPodLabels:
    r"""
    -- Labels to be added to the Redis server pods
    """
    [...str]: any

schema ValuesRedisReadinessProbe:
    r"""
    # Probes for Redis server (optional)
    ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/

    Attributes
    ----------
    enabled : bool, required, default is False
        -- Enable Kubernetes liveness probe for Redis server
    failureThreshold : int, required, default is 5
        -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
    initialDelaySeconds : int, required, default is 30
        -- Number of seconds after the container has started before [probe] is initiated
    periodSeconds : int, required, default is 15
        -- How often (in seconds) to perform the [probe]
    successThreshold : int, required, default is 1
        -- Minimum consecutive successes for the [probe] to be considered successful after having failed
    timeoutSeconds : int, required, default is 15
        -- Number of seconds after which the [probe] times out
    """
    enabled: bool = False
    failureThreshold: int = 5
    initialDelaySeconds: int = 30
    periodSeconds: int = 15
    successThreshold: int = 1
    timeoutSeconds: int = 15

schema ValuesRedisResources:
    r"""
    -- Resource limits and requests for redis
    limits:
    #    cpu: 200m
    #    memory: 128Mi
    #  requests:
    #    cpu: 100m
    #    memory: 64Mi
    """
    [...str]: any

schema ValuesRedisSecretInit:
    r"""
    ValuesRedisSecretInit

    Attributes
    ----------
    affinity : ValuesRedisSecretInitAffinity, required, default is {}
        -- Assign custom [affinity] rules to the Redis secret-init Job
    containerSecurityContext : ValuesRedisSecretInitContainerSecurityContext, optional
        -- Application controller container-level security context
        # @default -- See [values.yaml]
    enabled : bool, required, default is True
        -- Enable Redis secret initialization. If disabled, secret must be provisioned by alternative methods
    image : ValuesRedisSecretInitImage, optional
    imagePullSecrets : [any], required, default is []
        -- Secrets with credentials to pull images from a private registry
        # @default -- `[]` (defaults to global.imagePullSecrets)
    jobAnnotations : ValuesRedisSecretInitJobAnnotations, required, default is {}
        -- Annotations to be added to the Redis secret-init Job
    name : str, required, default is "redis-secret-init"
        -- Redis secret-init name
    nodeSelector : ValuesRedisSecretInitNodeSelector, required, default is {}
        -- Node selector to be added to the Redis secret-init Job
        # @default -- `{}` (defaults to global.nodeSelector)
    podAnnotations : ValuesRedisSecretInitPodAnnotations, required, default is {}
        -- Annotations to be added to the Redis secret-init Job
    podLabels : ValuesRedisSecretInitPodLabels, required, default is {}
        -- Labels to be added to the Redis secret-init Job
    priorityClassName : str, required, default is ""
        -- Priority class for Redis secret-init Job
        # @default -- `""` (defaults to global.priorityClassName)
    resources : ValuesRedisSecretInitResources, required, default is {}
        -- Resource limits and requests for Redis secret-init Job
        limits:
        #    cpu: 200m
        #    memory: 128Mi
        #  requests:
        #    cpu: 100m
        #    memory: 64Mi
    securityContext : ValuesRedisSecretInitSecurityContext, required, default is {}
        -- Redis secret-init Job pod-level security context
    serviceAccount : ValuesRedisSecretInitServiceAccount, optional
    tolerations : [any], required, default is []
        -- Tolerations to be added to the Redis secret-init Job
        # @default -- `[]` (defaults to global.tolerations)
    """
    affinity: ValuesRedisSecretInitAffinity = {}
    containerSecurityContext?: ValuesRedisSecretInitContainerSecurityContext
    enabled: bool = True
    image?: ValuesRedisSecretInitImage
    imagePullSecrets: [any] = []
    jobAnnotations: ValuesRedisSecretInitJobAnnotations = {}
    name: str = "redis-secret-init"
    nodeSelector: ValuesRedisSecretInitNodeSelector = {}
    podAnnotations: ValuesRedisSecretInitPodAnnotations = {}
    podLabels: ValuesRedisSecretInitPodLabels = {}
    priorityClassName: str = ""
    resources: ValuesRedisSecretInitResources = {}
    securityContext: ValuesRedisSecretInitSecurityContext = {}
    serviceAccount?: ValuesRedisSecretInitServiceAccount
    tolerations: [any] = []

schema ValuesRedisSecretInitAffinity:
    r"""
    -- Assign custom [affinity] rules to the Redis secret-init Job
    """
    [...str]: any

schema ValuesRedisSecretInitContainerSecurityContext:
    r"""
    -- Application controller container-level security context
    # @default -- See [values.yaml]

    Attributes
    ----------
    allowPrivilegeEscalation : bool, required, default is False
    capabilities : ValuesRedisSecretInitContainerSecurityContextCapabilities, optional
    readOnlyRootFilesystem : bool, required, default is True
    runAsNonRoot : bool, required, default is True
    seccompProfile : ValuesRedisSecretInitContainerSecurityContextSeccompProfile, optional
    """
    allowPrivilegeEscalation: bool = False
    capabilities?: ValuesRedisSecretInitContainerSecurityContextCapabilities
    readOnlyRootFilesystem: bool = True
    runAsNonRoot: bool = True
    seccompProfile?: ValuesRedisSecretInitContainerSecurityContextSeccompProfile

schema ValuesRedisSecretInitContainerSecurityContextCapabilities:
    r"""
    ValuesRedisSecretInitContainerSecurityContextCapabilities

    Attributes
    ----------
    drop : [str], optional
    """
    drop?: [str]

schema ValuesRedisSecretInitContainerSecurityContextSeccompProfile:
    r"""
    ValuesRedisSecretInitContainerSecurityContextSeccompProfile

    Attributes
    ----------
    $type : str, required, default is "RuntimeDefault"
    """
    $type: str = "RuntimeDefault"

schema ValuesRedisSecretInitImage:
    r"""
    ValuesRedisSecretInitImage

    Attributes
    ----------
    imagePullPolicy : str, required, default is ""
        -- Image pull policy for the Redis secret-init Job
        # @default -- `""` (defaults to global.image.imagePullPolicy)
        IfNotPresent
    repository : str, required, default is ""
        -- Repository to use for the Redis secret-init Job
        # @default -- `""` (defaults to global.image.repository)
        defaults to global.image.repository
    tag : str, required, default is ""
        -- Tag to use for the Redis secret-init Job
        # @default -- `""` (defaults to global.image.tag)
        defaults to global.image.tag
    """
    imagePullPolicy: str = ""
    repository: str = ""
    tag: str = ""

schema ValuesRedisSecretInitJobAnnotations:
    r"""
    -- Annotations to be added to the Redis secret-init Job
    """
    [...str]: any

schema ValuesRedisSecretInitNodeSelector:
    r"""
    -- Node selector to be added to the Redis secret-init Job
    # @default -- `{}` (defaults to global.nodeSelector)
    """
    [...str]: any

schema ValuesRedisSecretInitPodAnnotations:
    r"""
    -- Annotations to be added to the Redis secret-init Job
    """
    [...str]: any

schema ValuesRedisSecretInitPodLabels:
    r"""
    -- Labels to be added to the Redis secret-init Job
    """
    [...str]: any

schema ValuesRedisSecretInitResources:
    r"""
    -- Resource limits and requests for Redis secret-init Job
    limits:
    #    cpu: 200m
    #    memory: 128Mi
    #  requests:
    #    cpu: 100m
    #    memory: 64Mi
    """
    [...str]: any

schema ValuesRedisSecretInitSecurityContext:
    r"""
    -- Redis secret-init Job pod-level security context
    """
    [...str]: any

schema ValuesRedisSecretInitServiceAccount:
    r"""
    ValuesRedisSecretInitServiceAccount

    Attributes
    ----------
    annotations : ValuesRedisSecretInitServiceAccountAnnotations, required, default is {}
        -- Annotations applied to created service account
    automountServiceAccountToken : bool, required, default is True
        -- Automount API credentials for the Service Account
    create : bool, required, default is True
        -- Create a service account for the redis pod
    name : str, required, default is ""
        -- Service account name for redis pod
    """
    annotations: ValuesRedisSecretInitServiceAccountAnnotations = {}
    automountServiceAccountToken: bool = True
    create: bool = True
    name: str = ""

schema ValuesRedisSecretInitServiceAccountAnnotations:
    r"""
    -- Annotations applied to created service account
    """
    [...str]: any

schema ValuesRedisSecurityContext:
    r"""
    -- Redis pod-level security context
    # @default -- See [values.yaml]

    Attributes
    ----------
    runAsNonRoot : bool, required, default is True
    runAsUser : int, required, default is 999
    seccompProfile : ValuesRedisSecurityContextSeccompProfile, optional
    """
    runAsNonRoot: bool = True
    runAsUser: int = 999
    seccompProfile?: ValuesRedisSecurityContextSeccompProfile

schema ValuesRedisSecurityContextSeccompProfile:
    r"""
    ValuesRedisSecurityContextSeccompProfile

    Attributes
    ----------
    $type : str, required, default is "RuntimeDefault"
    """
    $type: str = "RuntimeDefault"

schema ValuesRedisService:
    r"""
    ValuesRedisService

    Attributes
    ----------
    annotations : ValuesRedisServiceAnnotations, required, default is {}
        -- Redis service annotations
    labels : ValuesRedisServiceLabels, required, default is {}
        -- Additional redis service labels
    """
    annotations: ValuesRedisServiceAnnotations = {}
    labels: ValuesRedisServiceLabels = {}

schema ValuesRedisServiceAccount:
    r"""
    ValuesRedisServiceAccount

    Attributes
    ----------
    annotations : ValuesRedisServiceAccountAnnotations, required, default is {}
        -- Annotations applied to created service account
    automountServiceAccountToken : bool, required, default is False
        -- Automount API credentials for the Service Account
    create : bool, required, default is False
        -- Create a service account for the redis pod
    name : str, required, default is ""
        -- Service account name for redis pod
    """
    annotations: ValuesRedisServiceAccountAnnotations = {}
    automountServiceAccountToken: bool = False
    create: bool = False
    name: str = ""

schema ValuesRedisServiceAccountAnnotations:
    r"""
    -- Annotations applied to created service account
    """
    [...str]: any

schema ValuesRedisServiceAnnotations:
    r"""
    -- Redis service annotations
    """
    [...str]: any

schema ValuesRedisServiceLabels:
    r"""
    -- Additional redis service labels
    """
    [...str]: any

schema ValuesRepoServer:
    r"""
    # Repo Server

    Attributes
    ----------
    affinity : ValuesRepoServerAffinity, required, default is {}
        -- Assign custom [affinity] rules to the deployment
        # @default -- `{}` (defaults to global.affinity preset)
    automountServiceAccountToken : bool, required, default is True
        -- Automount API credentials for the Service Account into the pod.
    autoscaling : ValuesRepoServerAutoscaling, optional
        # Repo server Horizontal Pod Autoscaler
    certificateSecret : ValuesRepoServerCertificateSecret, optional
        TLS certificate configuration via Secret
        ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/#configuring-tls-to-argocd-repo-server
        ## Note: Issuing certificates via cert-manager in not supported right now because it's not possible to restart repo server automatically without extra controllers.
    clusterRoleRules : ValuesRepoServerClusterRoleRules, optional
        # Enable Custom Rules for the Repo server's Cluster Role resource
        ## Enable this and set the rules: to whatever custom rules you want for the Cluster Role resource.
        ## Defaults to off
    containerPorts : ValuesRepoServerContainerPorts, optional
        Repo server container ports
    containerSecurityContext : ValuesRepoServerContainerSecurityContext, optional
        -- Repo server container-level security context
        # @default -- See [values.yaml]
    deploymentAnnotations : ValuesRepoServerDeploymentAnnotations, required, default is {}
        -- Annotations to be added to repo server Deployment
    deploymentStrategy : ValuesRepoServerDeploymentStrategy, required, default is {}
        -- Deployment strategy to be added to the repo server Deployment
        type: RollingUpdate
        # rollingUpdate:
        #   maxSurge: 25%
        #   maxUnavailable: 25%
    dnsConfig : ValuesRepoServerDnsConfig, required, default is {}
        -- [DNS configuration]
    dnsPolicy : str, required, default is "ClusterFirst"
        -- Alternative DNS policy for Repo server pods
    emptyDir : ValuesRepoServerEmptyDir, optional
        # RepoServer emptyDir volumes
    env : [any], required, default is []
        -- Environment variables to pass to repo server
    envFrom : [any], required, default is []
        -- envFrom to pass to repo server
        # @default -- `[]` (See [values.yaml])
        - configMapRef:
        #     name: config-map-name
        # - secretRef:
        #     name: secret-name
    existingVolumes : ValuesRepoServerExistingVolumes, required, default is {}
        -- Volumes to be used in replacement of emptydir on default volumes
        gpgKeyring:
        #    persistentVolumeClaim:
        #      claimName: pvc-argocd-repo-server-keyring
        #  helmWorkingDir:
        #    persistentVolumeClaim:
        #      claimName: pvc-argocd-repo-server-workdir
        #  tmp:
        #    persistentVolumeClaim:
        #      claimName: pvc-argocd-repo-server-tmp
        #  varFiles:
        #    persistentVolumeClaim:
        #      claimName: pvc-argocd-repo-server-varfiles
        #  plugins:
        #    persistentVolumeClaim:
        #      claimName: pvc-argocd-repo-server-plugins
    extraArgs : [any], required, default is []
        -- Additional command line arguments to pass to repo server
    extraContainers : [any], required, default is []
        -- Additional containers to be added to the repo server pod
        ## Ref: https://argo-cd.readthedocs.io/en/stable/user-guide/config-management-plugins/
        ## Note: Supports use of custom Helm templates
        - name: cmp-my-plugin
        #   command:
        #     - "/var/run/argocd/argocd-cmp-server"
        #   image: busybox
        #   securityContext:
        #     runAsNonRoot: true
        #     runAsUser: 999
        #   volumeMounts:
        #     - mountPath: /var/run/argocd
        #       name: var-files
        #     - mountPath: /home/argocd/cmp-server/plugins
        #       name: plugins
        #     # Remove this volumeMount if you've chosen to bake the config file into the sidecar image.
        #     - mountPath: /home/argocd/cmp-server/config/plugin.yaml
        #       subPath: my-plugin.yaml
        #       name: argocd-cmp-cm
        #     # Starting with v2.4, do NOT mount the same tmp volume as the repo-server container. The filesystem separation helps
        #     # mitigate path traversal attacks.
        #     - mountPath: /tmp
        #       name: cmp-tmp
        # - name: cmp-my-plugin2
        #   command:
        #     - "/var/run/argocd/argocd-cmp-server"
        #   image: busybox
        #   securityContext:
        #     runAsNonRoot: true
        #     runAsUser: 999
        #   volumeMounts:
        #     - mountPath: /var/run/argocd
        #       name: var-files
        #     # Remove this volumeMount if you've chosen to bake the config file into the sidecar image.
        #     - mountPath: /home/argocd/cmp-server/plugins
        #       name: plugins
        #     - mountPath: /home/argocd/cmp-server/config/plugin.yaml
        #       subPath: my-plugin2.yaml
        #       name: argocd-cmp-cm
        #     # Starting with v2.4, do NOT mount the same tmp volume as the repo-server container. The filesystem separation helps
        #     # mitigate path traversal attacks.
        #     - mountPath: /tmp
        #       name: cmp-tmp
    hostNetwork : bool, required, default is False
        -- Host Network for Repo server pods
    image : ValuesRepoServerImage, optional
        # Repo server image
    imagePullSecrets : [any], required, default is []
        -- Secrets with credentials to pull images from a private registry
        # @default -- `[]` (defaults to global.imagePullSecrets)
    initContainers : [any], required, default is []
        -- Init containers to add to the repo server pods
    lifecycle : ValuesRepoServerLifecycle, required, default is {}
        -- Specify postStart and preStop lifecycle hooks for your argo-repo-server container
    livenessProbe : ValuesRepoServerLivenessProbe, optional
    metrics : ValuesRepoServerMetrics, optional
        # Repo server metrics service configuration
    name : str, required, default is "repo-server"
        -- Repo server name
    nodeSelector : ValuesRepoServerNodeSelector, required, default is {}
        -- [Node selector]
        # @default -- `{}` (defaults to global.nodeSelector)
    pdb : ValuesRepoServerPdb, optional
        # Repo server Pod Disruption Budget
        ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
    podAnnotations : ValuesRepoServerPodAnnotations, required, default is {}
        -- Annotations to be added to repo server pods
    podLabels : ValuesRepoServerPodLabels, required, default is {}
        -- Labels to be added to repo server pods
    priorityClassName : str, required, default is ""
        -- Priority class for the repo server pods
        # @default -- `""` (defaults to global.priorityClassName)
    rbac : [any], required, default is []
        -- Repo server rbac rules
        - apiGroups:
        #     - argoproj.io
        #     resources:
        #     - applications
        #     verbs:
        #     - get
        #     - list
        #     - watch
    readinessProbe : ValuesRepoServerReadinessProbe, optional
        # Readiness and liveness probes for default backend
        ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    replicas : int, required, default is 1
        -- The number of repo server pods to run
    resources : ValuesRepoServerResources, required, default is {}
        -- Resource limits and requests for the repo server pods
        limits:
        #    cpu: 50m
        #    memory: 128Mi
        #  requests:
        #    cpu: 10m
        #    memory: 64Mi
    runtimeClassName : str, required, default is ""
        -- Runtime class name for the repo server
        # @default -- `""` (defaults to global.runtimeClassName)
    service : ValuesRepoServerService, optional
        # Repo server service configuration
    serviceAccount : ValuesRepoServerServiceAccount, optional
        # Repo server service account
        ## If create is set to true, make sure to uncomment the name and update the rbac section below
    terminationGracePeriodSeconds : int, required, default is 30
        -- terminationGracePeriodSeconds for container lifecycle hook
    tolerations : [any], required, default is []
        -- [Tolerations] for use with node taints
        # @default -- `[]` (defaults to global.tolerations)
    topologySpreadConstraints : [any], required, default is []
        -- Assign custom [TopologySpreadConstraints] rules to the repo server
        # @default -- `[]` (defaults to global.topologySpreadConstraints)
        ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/
        ## If labelSelector is left out, it will default to the labelSelector configuration of the deployment
        - maxSkew: 1
        #   topologyKey: topology.kubernetes.io/zone
        #   whenUnsatisfiable: DoNotSchedule
    useEphemeralHelmWorkingDir : bool, required, default is True
        -- Toggle the usage of a ephemeral Helm working directory
    volumeMounts : [any], required, default is []
        -- Additional volumeMounts to the repo server main container
    volumes : [any], required, default is []
        -- Additional volumes to the repo server pod
        - name: argocd-cmp-cm
        #    configMap:
        #      name: argocd-cmp-cm
        #  - name: cmp-tmp
        #    emptyDir: {}
    """
    affinity: ValuesRepoServerAffinity = {}
    automountServiceAccountToken: bool = True
    autoscaling?: ValuesRepoServerAutoscaling
    certificateSecret?: ValuesRepoServerCertificateSecret
    clusterRoleRules?: ValuesRepoServerClusterRoleRules
    containerPorts?: ValuesRepoServerContainerPorts
    containerSecurityContext?: ValuesRepoServerContainerSecurityContext
    deploymentAnnotations: ValuesRepoServerDeploymentAnnotations = {}
    deploymentStrategy: ValuesRepoServerDeploymentStrategy = {}
    dnsConfig: ValuesRepoServerDnsConfig = {}
    dnsPolicy: str = "ClusterFirst"
    emptyDir?: ValuesRepoServerEmptyDir
    env: [any] = []
    envFrom: [any] = []
    existingVolumes: ValuesRepoServerExistingVolumes = {}
    extraArgs: [any] = []
    extraContainers: [any] = []
    hostNetwork: bool = False
    image?: ValuesRepoServerImage
    imagePullSecrets: [any] = []
    initContainers: [any] = []
    lifecycle: ValuesRepoServerLifecycle = {}
    livenessProbe?: ValuesRepoServerLivenessProbe
    metrics?: ValuesRepoServerMetrics
    name: str = "repo-server"
    nodeSelector: ValuesRepoServerNodeSelector = {}
    pdb?: ValuesRepoServerPdb
    podAnnotations: ValuesRepoServerPodAnnotations = {}
    podLabels: ValuesRepoServerPodLabels = {}
    priorityClassName: str = ""
    rbac: [any] = []
    readinessProbe?: ValuesRepoServerReadinessProbe
    replicas: int = 1
    resources: ValuesRepoServerResources = {}
    runtimeClassName: str = ""
    service?: ValuesRepoServerService
    serviceAccount?: ValuesRepoServerServiceAccount
    terminationGracePeriodSeconds: int = 30
    tolerations: [any] = []
    topologySpreadConstraints: [any] = []
    useEphemeralHelmWorkingDir: bool = True
    volumeMounts: [any] = []
    volumes: [any] = []

schema ValuesRepoServerAffinity:
    r"""
    -- Assign custom [affinity] rules to the deployment
    # @default -- `{}` (defaults to global.affinity preset)
    """
    [...str]: any

schema ValuesRepoServerAutoscaling:
    r"""
    # Repo server Horizontal Pod Autoscaler

    Attributes
    ----------
    behavior : ValuesRepoServerAutoscalingBehavior, required, default is {}
        -- Configures the scaling behavior of the target in both Up and Down directions.
    enabled : bool, required, default is False
        -- Enable Horizontal Pod Autoscaler ([HPA]) for the repo server
    maxReplicas : int, required, default is 5
        -- Maximum number of replicas for the repo server [HPA]
    metrics : [any], required, default is []
        scaleDown:
        #  stabilizationWindowSeconds: 300
        #  policies:
        #   - type: Pods
        #     value: 1
        #     periodSeconds: 180
        # scaleUp:
        #   stabilizationWindowSeconds: 300
        #   policies:
        #   - type: Pods
        #     value: 2
        #     periodSeconds: 60
        # -- Configures custom HPA metrics for the Argo CD repo server
        # Ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
    minReplicas : int, required, default is 1
        -- Minimum number of replicas for the repo server [HPA]
    targetCPUUtilizationPercentage : int, required, default is 50
        -- Average CPU utilization percentage for the repo server [HPA]
    targetMemoryUtilizationPercentage : int, required, default is 50
        -- Average memory utilization percentage for the repo server [HPA]
    """
    behavior: ValuesRepoServerAutoscalingBehavior = {}
    enabled: bool = False
    maxReplicas: int = 5
    metrics: [any] = []
    minReplicas: int = 1
    targetCPUUtilizationPercentage: int = 50
    targetMemoryUtilizationPercentage: int = 50

schema ValuesRepoServerAutoscalingBehavior:
    r"""
    -- Configures the scaling behavior of the target in both Up and Down directions.
    """
    [...str]: any

schema ValuesRepoServerCertificateSecret:
    r"""
    TLS certificate configuration via Secret
    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/#configuring-tls-to-argocd-repo-server
    ## Note: Issuing certificates via cert-manager in not supported right now because it's not possible to restart repo server automatically without extra controllers.

    Attributes
    ----------
    annotations : ValuesRepoServerCertificateSecretAnnotations, required, default is {}
        -- Annotations to be added to argocd-repo-server-tls secret
    ca : str, required, default is ""
        -- Certificate authority. Required for self-signed certificates.
    crt : str, required, default is ""
        -- Certificate data. Must contain SANs of Repo service (ie: argocd-repo-server, argocd-repo-server.argo-cd.svc)
    enabled : bool, required, default is False
        -- Create argocd-repo-server-tls secret
    key : str, required, default is ""
        -- Certificate private key
    labels : ValuesRepoServerCertificateSecretLabels, required, default is {}
        -- Labels to be added to argocd-repo-server-tls secret
    """
    annotations: ValuesRepoServerCertificateSecretAnnotations = {}
    ca: str = ""
    crt: str = ""
    enabled: bool = False
    key: str = ""
    labels: ValuesRepoServerCertificateSecretLabels = {}

schema ValuesRepoServerCertificateSecretAnnotations:
    r"""
    -- Annotations to be added to argocd-repo-server-tls secret
    """
    [...str]: any

schema ValuesRepoServerCertificateSecretLabels:
    r"""
    -- Labels to be added to argocd-repo-server-tls secret
    """
    [...str]: any

schema ValuesRepoServerClusterRoleRules:
    r"""
    # Enable Custom Rules for the Repo server's Cluster Role resource
    ## Enable this and set the rules: to whatever custom rules you want for the Cluster Role resource.
    ## Defaults to off

    Attributes
    ----------
    enabled : bool, required, default is False
        -- Enable custom rules for the Repo server's Cluster Role resource
    rules : [any], required, default is []
        -- List of custom rules for the Repo server's Cluster Role resource
    """
    enabled: bool = False
    rules: [any] = []

schema ValuesRepoServerContainerPorts:
    r"""
    Repo server container ports

    Attributes
    ----------
    metrics : int, required, default is 8084
        -- Metrics container port
    server : int, required, default is 8081
        -- Repo server container port
    """
    metrics: int = 8084
    server: int = 8081

schema ValuesRepoServerContainerSecurityContext:
    r"""
    -- Repo server container-level security context
    # @default -- See [values.yaml]

    Attributes
    ----------
    allowPrivilegeEscalation : bool, required, default is False
    capabilities : ValuesRepoServerContainerSecurityContextCapabilities, optional
    readOnlyRootFilesystem : bool, required, default is True
    runAsNonRoot : bool, required, default is True
    seccompProfile : ValuesRepoServerContainerSecurityContextSeccompProfile, optional
    """
    allowPrivilegeEscalation: bool = False
    capabilities?: ValuesRepoServerContainerSecurityContextCapabilities
    readOnlyRootFilesystem: bool = True
    runAsNonRoot: bool = True
    seccompProfile?: ValuesRepoServerContainerSecurityContextSeccompProfile

schema ValuesRepoServerContainerSecurityContextCapabilities:
    r"""
    ValuesRepoServerContainerSecurityContextCapabilities

    Attributes
    ----------
    drop : [str], optional
    """
    drop?: [str]

schema ValuesRepoServerContainerSecurityContextSeccompProfile:
    r"""
    ValuesRepoServerContainerSecurityContextSeccompProfile

    Attributes
    ----------
    $type : str, required, default is "RuntimeDefault"
    """
    $type: str = "RuntimeDefault"

schema ValuesRepoServerDeploymentAnnotations:
    r"""
    -- Annotations to be added to repo server Deployment
    """
    [...str]: any

schema ValuesRepoServerDeploymentStrategy:
    r"""
    -- Deployment strategy to be added to the repo server Deployment
    type: RollingUpdate
    # rollingUpdate:
    #   maxSurge: 25%
    #   maxUnavailable: 25%
    """
    [...str]: any

schema ValuesRepoServerDnsConfig:
    r"""
    -- [DNS configuration]
    """
    [...str]: any

schema ValuesRepoServerEmptyDir:
    r"""
    # RepoServer emptyDir volumes

    Attributes
    ----------
    sizeLimit : str, required, default is ""
        -- EmptyDir size limit for repo server
        # @default -- `""` (defaults not set if not specified i.e. no size limit)
        sizeLimit: "1Gi"
    """
    sizeLimit: str = ""

schema ValuesRepoServerExistingVolumes:
    r"""
    -- Volumes to be used in replacement of emptydir on default volumes
    gpgKeyring:
    #    persistentVolumeClaim:
    #      claimName: pvc-argocd-repo-server-keyring
    #  helmWorkingDir:
    #    persistentVolumeClaim:
    #      claimName: pvc-argocd-repo-server-workdir
    #  tmp:
    #    persistentVolumeClaim:
    #      claimName: pvc-argocd-repo-server-tmp
    #  varFiles:
    #    persistentVolumeClaim:
    #      claimName: pvc-argocd-repo-server-varfiles
    #  plugins:
    #    persistentVolumeClaim:
    #      claimName: pvc-argocd-repo-server-plugins
    """
    [...str]: any

schema ValuesRepoServerImage:
    r"""
    # Repo server image

    Attributes
    ----------
    imagePullPolicy : str, required, default is ""
        -- Image pull policy for the repo server
        # @default -- `""` (defaults to global.image.imagePullPolicy)
    repository : str, required, default is ""
        -- Repository to use for the repo server
        # @default -- `""` (defaults to global.image.repository)
    tag : str, required, default is ""
        -- Tag to use for the repo server
        # @default -- `""` (defaults to global.image.tag)
    """
    imagePullPolicy: str = ""
    repository: str = ""
    tag: str = ""

schema ValuesRepoServerLifecycle:
    r"""
    -- Specify postStart and preStop lifecycle hooks for your argo-repo-server container
    """
    [...str]: any

schema ValuesRepoServerLivenessProbe:
    r"""
    ValuesRepoServerLivenessProbe

    Attributes
    ----------
    failureThreshold : int, required, default is 3
        -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
    initialDelaySeconds : int, required, default is 10
        -- Number of seconds after the container has started before [probe] is initiated
    periodSeconds : int, required, default is 10
        -- How often (in seconds) to perform the [probe]
    successThreshold : int, required, default is 1
        -- Minimum consecutive successes for the [probe] to be considered successful after having failed
    timeoutSeconds : int, required, default is 1
        -- Number of seconds after which the [probe] times out
    """
    failureThreshold: int = 3
    initialDelaySeconds: int = 10
    periodSeconds: int = 10
    successThreshold: int = 1
    timeoutSeconds: int = 1

schema ValuesRepoServerMetrics:
    r"""
    # Repo server metrics service configuration

    Attributes
    ----------
    enabled : bool, required, default is False
        -- Deploy metrics service
    service : ValuesRepoServerMetricsService, optional
    serviceMonitor : ValuesRepoServerMetricsServiceMonitor, optional
    """
    enabled: bool = False
    service?: ValuesRepoServerMetricsService
    serviceMonitor?: ValuesRepoServerMetricsServiceMonitor

schema ValuesRepoServerMetricsService:
    r"""
    ValuesRepoServerMetricsService

    Attributes
    ----------
    annotations : ValuesRepoServerMetricsServiceAnnotations, required, default is {}
        -- Metrics service annotations
    clusterIP : str, required, default is ""
        -- Metrics service clusterIP. `None` makes a "headless service" (no virtual IP)
    labels : ValuesRepoServerMetricsServiceLabels, required, default is {}
        -- Metrics service labels
    portName : str, required, default is "http-metrics"
        -- Metrics service port name
    servicePort : int, required, default is 8084
        -- Metrics service port
    $type : str, required, default is "ClusterIP"
        -- Metrics service type
    """
    annotations: ValuesRepoServerMetricsServiceAnnotations = {}
    clusterIP: str = ""
    labels: ValuesRepoServerMetricsServiceLabels = {}
    portName: str = "http-metrics"
    servicePort: int = 8084
    $type: str = "ClusterIP"

schema ValuesRepoServerMetricsServiceAnnotations:
    r"""
    -- Metrics service annotations
    """
    [...str]: any

schema ValuesRepoServerMetricsServiceLabels:
    r"""
    -- Metrics service labels
    """
    [...str]: any

schema ValuesRepoServerMetricsServiceMonitor:
    r"""
    ValuesRepoServerMetricsServiceMonitor

    Attributes
    ----------
    additionalLabels : ValuesRepoServerMetricsServiceMonitorAdditionalLabels, required, default is {}
        -- Prometheus ServiceMonitor labels
    annotations : ValuesRepoServerMetricsServiceMonitorAnnotations, required, default is {}
        -- Prometheus ServiceMonitor annotations
    enabled : bool, required, default is False
        -- Enable a prometheus ServiceMonitor
    honorLabels : bool, required, default is False
        -- When true, honorLabels preserves the metric’s labels when they collide with the target’s labels.
    interval : str, required, default is "30s"
        -- Prometheus ServiceMonitor interval
    metricRelabelings : [any], required, default is []
        -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
    namespace : str, required, default is ""
        -- Prometheus ServiceMonitor namespace
        "monitoring"
    relabelings : [any], required, default is []
        -- Prometheus [RelabelConfigs] to apply to samples before scraping
    scheme : str, required, default is ""
        -- Prometheus ServiceMonitor scheme
    scrapeTimeout : str, required, default is ""
        -- Prometheus ServiceMonitor scrapeTimeout. If empty, Prometheus uses the global scrape timeout unless it is less than the target's scrape interval value in which the latter is used.
    selector : ValuesRepoServerMetricsServiceMonitorSelector, required, default is {}
        -- Prometheus ServiceMonitor selector
        prometheus: kube-prometheus
    tlsConfig : ValuesRepoServerMetricsServiceMonitorTlsConfig, required, default is {}
        -- Prometheus ServiceMonitor tlsConfig
    """
    additionalLabels: ValuesRepoServerMetricsServiceMonitorAdditionalLabels = {}
    annotations: ValuesRepoServerMetricsServiceMonitorAnnotations = {}
    enabled: bool = False
    honorLabels: bool = False
    interval: str = "30s"
    metricRelabelings: [any] = []
    namespace: str = ""
    relabelings: [any] = []
    scheme: str = ""
    scrapeTimeout: str = ""
    selector: ValuesRepoServerMetricsServiceMonitorSelector = {}
    tlsConfig: ValuesRepoServerMetricsServiceMonitorTlsConfig = {}

schema ValuesRepoServerMetricsServiceMonitorAdditionalLabels:
    r"""
    -- Prometheus ServiceMonitor labels
    """
    [...str]: any

schema ValuesRepoServerMetricsServiceMonitorAnnotations:
    r"""
    -- Prometheus ServiceMonitor annotations
    """
    [...str]: any

schema ValuesRepoServerMetricsServiceMonitorSelector:
    r"""
    -- Prometheus ServiceMonitor selector
    prometheus: kube-prometheus
    """
    [...str]: any

schema ValuesRepoServerMetricsServiceMonitorTlsConfig:
    r"""
    -- Prometheus ServiceMonitor tlsConfig
    """
    [...str]: any

schema ValuesRepoServerNodeSelector:
    r"""
    -- [Node selector]
    # @default -- `{}` (defaults to global.nodeSelector)
    """
    [...str]: any

schema ValuesRepoServerPdb:
    r"""
    # Repo server Pod Disruption Budget
    ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/

    Attributes
    ----------
    annotations : ValuesRepoServerPdbAnnotations, required, default is {}
        -- Annotations to be added to repo server pdb
    enabled : bool, required, default is False
        -- Deploy a [PodDisruptionBudget] for the repo server
    labels : ValuesRepoServerPdbLabels, required, default is {}
        -- Labels to be added to repo server pdb
    maxUnavailable : str, required, default is ""
        -- Number of pods that are unavailable after eviction as number or percentage (eg.: 50%).
        ## Has higher precedence over `repoServer.pdb.minAvailable`
    minAvailable : str, required, default is ""
        -- Number of pods that are available after eviction as number or percentage (eg.: 50%)
        # @default -- `""` (defaults to 0 if not specified)
    """
    annotations: ValuesRepoServerPdbAnnotations = {}
    enabled: bool = False
    labels: ValuesRepoServerPdbLabels = {}
    maxUnavailable: str = ""
    minAvailable: str = ""

schema ValuesRepoServerPdbAnnotations:
    r"""
    -- Annotations to be added to repo server pdb
    """
    [...str]: any

schema ValuesRepoServerPdbLabels:
    r"""
    -- Labels to be added to repo server pdb
    """
    [...str]: any

schema ValuesRepoServerPodAnnotations:
    r"""
    -- Annotations to be added to repo server pods
    """
    [...str]: any

schema ValuesRepoServerPodLabels:
    r"""
    -- Labels to be added to repo server pods
    """
    [...str]: any

schema ValuesRepoServerReadinessProbe:
    r"""
    # Readiness and liveness probes for default backend
    ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/

    Attributes
    ----------
    failureThreshold : int, required, default is 3
        -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
    initialDelaySeconds : int, required, default is 10
        -- Number of seconds after the container has started before [probe] is initiated
    periodSeconds : int, required, default is 10
        -- How often (in seconds) to perform the [probe]
    successThreshold : int, required, default is 1
        -- Minimum consecutive successes for the [probe] to be considered successful after having failed
    timeoutSeconds : int, required, default is 1
        -- Number of seconds after which the [probe] times out
    """
    failureThreshold: int = 3
    initialDelaySeconds: int = 10
    periodSeconds: int = 10
    successThreshold: int = 1
    timeoutSeconds: int = 1

schema ValuesRepoServerResources:
    r"""
    -- Resource limits and requests for the repo server pods
    limits:
    #    cpu: 50m
    #    memory: 128Mi
    #  requests:
    #    cpu: 10m
    #    memory: 64Mi
    """
    [...str]: any

schema ValuesRepoServerService:
    r"""
    # Repo server service configuration

    Attributes
    ----------
    annotations : ValuesRepoServerServiceAnnotations, required, default is {}
        -- Repo server service annotations
    labels : ValuesRepoServerServiceLabels, required, default is {}
        -- Repo server service labels
    port : int, required, default is 8081
        -- Repo server service port
    portName : str, required, default is "tcp-repo-server"
        -- Repo server service port name
    """
    annotations: ValuesRepoServerServiceAnnotations = {}
    labels: ValuesRepoServerServiceLabels = {}
    port: int = 8081
    portName: str = "tcp-repo-server"

schema ValuesRepoServerServiceAccount:
    r"""
    # Repo server service account
    ## If create is set to true, make sure to uncomment the name and update the rbac section below

    Attributes
    ----------
    annotations : ValuesRepoServerServiceAccountAnnotations, required, default is {}
        -- Annotations applied to created service account
    automountServiceAccountToken : bool, required, default is True
        -- Automount API credentials for the Service Account
    create : bool, required, default is True
        -- Create repo server service account
    labels : ValuesRepoServerServiceAccountLabels, required, default is {}
        -- Labels applied to created service account
    name : str, required, default is ""
        -- Repo server service account name
        "argocd-repo-server"
    """
    annotations: ValuesRepoServerServiceAccountAnnotations = {}
    automountServiceAccountToken: bool = True
    create: bool = True
    labels: ValuesRepoServerServiceAccountLabels = {}
    name: str = ""

schema ValuesRepoServerServiceAccountAnnotations:
    r"""
    -- Annotations applied to created service account
    """
    [...str]: any

schema ValuesRepoServerServiceAccountLabels:
    r"""
    -- Labels applied to created service account
    """
    [...str]: any

schema ValuesRepoServerServiceAnnotations:
    r"""
    -- Repo server service annotations
    """
    [...str]: any

schema ValuesRepoServerServiceLabels:
    r"""
    -- Repo server service labels
    """
    [...str]: any

schema ValuesServer:
    r"""
    # Server

    Attributes
    ----------
    affinity : ValuesServerAffinity, required, default is {}
        -- Assign custom [affinity] rules to the deployment
        # @default -- `{}` (defaults to global.affinity preset)
    automountServiceAccountToken : bool, required, default is True
        -- Automount API credentials for the Service Account into the pod.
    autoscaling : ValuesServerAutoscaling, optional
        # Argo CD server Horizontal Pod Autoscaler
    certificate : ValuesServerCertificate, optional
        TLS certificate configuration via cert-manager
        ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/#tls-certificates-used-by-argocd-server
    certificateSecret : ValuesServerCertificateSecret, optional
        TLS certificate configuration via Secret
        ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/#tls-certificates-used-by-argocd-server
    clusterRoleRules : ValuesServerClusterRoleRules, optional
        # Enable this and set the rules: to whatever custom rules you want for the Cluster Role resource.
        ## Defaults to off
    containerPorts : ValuesServerContainerPorts, optional
        Server container ports
    containerSecurityContext : ValuesServerContainerSecurityContext, optional
        -- Server container-level security context
        # @default -- See [values.yaml]
    deploymentAnnotations : ValuesServerDeploymentAnnotations, required, default is {}
        -- Annotations to be added to server Deployment
    deploymentStrategy : ValuesServerDeploymentStrategy, required, default is {}
        -- Deployment strategy to be added to the server Deployment
        type: RollingUpdate
        # rollingUpdate:
        #   maxSurge: 25%
        #   maxUnavailable: 25%
    dnsConfig : ValuesServerDnsConfig, required, default is {}
        -- [DNS configuration]
    dnsPolicy : str, required, default is "ClusterFirst"
        -- Alternative DNS policy for Server pods
    emptyDir : ValuesServerEmptyDir, optional
        # Argo CD server emptyDir volumes
    env : [any], required, default is []
        -- Environment variables to pass to Argo CD server
    envFrom : [any], required, default is []
        -- envFrom to pass to Argo CD server
        # @default -- `[]` (See [values.yaml])
        - configMapRef:
        #     name: config-map-name
        # - secretRef:
        #     name: secret-name
    extensions : ValuesServerExtensions, optional
        # Argo CD extensions
        ## This function in tech preview stage, do expect instability or breaking changes in newer versions.
        ## Ref: https://github.com/argoproj-labs/argocd-extension-installer
        ## When you enable extensions, you need to configure RBAC of logged in Argo CD user.
        ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/#the-extensions-resource
    extraArgs : [any], required, default is []
        -- Additional command line arguments to pass to Argo CD server
    extraContainers : [any], required, default is []
        -- Additional containers to be added to the server pod
        ## Note: Supports use of custom Helm templates
        - name: my-sidecar
        #   image: nginx:latest
        # - name: lemonldap-ng-controller
        #   image: lemonldapng/lemonldap-ng-controller:0.2.0
        #   args:
        #     - /lemonldap-ng-controller
        #     - --alsologtostderr
        #     - --configmap=$(POD_NAMESPACE)/lemonldap-ng-configuration
        #   env:
        #     - name: POD_NAME
        #       valueFrom:
        #         fieldRef:
        #           fieldPath: metadata.name
        #     - name: POD_NAMESPACE
        #       valueFrom:
        #         fieldRef:
        #           fieldPath: metadata.namespace
        #   volumeMounts:
        #   - name: copy-portal-skins
        #     mountPath: /srv/var/lib/lemonldap-ng/portal/skins
    hostNetwork : bool, required, default is False
        -- Host Network for Server pods
    image : ValuesServerImage, optional
        # Argo CD server image
    imagePullSecrets : [any], required, default is []
        -- Secrets with credentials to pull images from a private registry
        # @default -- `[]` (defaults to global.imagePullSecrets)
    ingress : ValuesServerIngress, optional
        Argo CD server ingress configuration
    ingressGrpc : ValuesServerIngressGrpc, optional
        Dedicated gRPC ingress for ingress controllers that supports only single backend protocol per Ingress resource
        # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#option-2-multiple-ingress-objects-and-hosts
    initContainers : [any], required, default is []
        -- Init containers to add to the server pod
        ## If your target Kubernetes cluster(s) require a custom credential (exec) plugin
        ## you could use this (and the same in the application controller pod) to provide such executable
        ## Ref: https://kubernetes.io/docs/reference/access-authn-authz/authentication/#client-go-credential-plugins
        - name: download-tools
        #    image: alpine:3
        #    command: [sh, -c]
        #    args:
        #      - wget -qO kubelogin.zip https://github.com/Azure/kubelogin/releases/download/v0.0.25/kubelogin-linux-amd64.zip &&
        #        unzip kubelogin.zip && mv bin/linux_amd64/kubelogin /custom-tools/
        #    volumeMounts:
        #      - mountPath: /custom-tools
        #        name: custom-tools
    lifecycle : ValuesServerLifecycle, required, default is {}
        -- Specify postStart and preStop lifecycle hooks for your argo-cd-server container
    livenessProbe : ValuesServerLivenessProbe, optional
    metrics : ValuesServerMetrics, optional
        # Server metrics service configuration
    name : str, required, default is "server"
        -- Argo CD server name
    nodeSelector : ValuesServerNodeSelector, required, default is {}
        -- [Node selector]
        # @default -- `{}` (defaults to global.nodeSelector)
    pdb : ValuesServerPdb, optional
        # Argo CD server Pod Disruption Budget
        ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
    podAnnotations : ValuesServerPodAnnotations, required, default is {}
        -- Annotations to be added to server pods
    podLabels : ValuesServerPodLabels, required, default is {}
        -- Labels to be added to server pods
    priorityClassName : str, required, default is ""
        -- Priority class for the Argo CD server pods
        # @default -- `""` (defaults to global.priorityClassName)
    readinessProbe : ValuesServerReadinessProbe, optional
        # Readiness and liveness probes for default backend
        ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    replicas : int, required, default is 1
        -- The number of server pods to run
    resources : ValuesServerResources, required, default is {}
        -- Resource limits and requests for the Argo CD server
        limits:
        #    cpu: 100m
        #    memory: 128Mi
        #  requests:
        #    cpu: 50m
        #    memory: 64Mi
    route : ValuesServerRoute, optional
        Create a OpenShift Route with SSL passthrough for UI and CLI
        # Consider setting 'hostname' e.g. https://argocd.apps-crc.testing/ using your Default Ingress Controller Domain
        # Find your domain with: kubectl describe --namespace=openshift-ingress-operator ingresscontroller/default | grep Domain:
        # If 'hostname' is an empty string "" OpenShift will create a hostname for you.
    runtimeClassName : str, required, default is ""
        -- Runtime class name for the Argo CD server
        # @default -- `""` (defaults to global.runtimeClassName)
    service : ValuesServerService, optional
        # Server service configuration
    serviceAccount : ValuesServerServiceAccount, optional
    terminationGracePeriodSeconds : int, required, default is 30
        -- terminationGracePeriodSeconds for container lifecycle hook
    tolerations : [any], required, default is []
        -- [Tolerations] for use with node taints
        # @default -- `[]` (defaults to global.tolerations)
    topologySpreadConstraints : [any], required, default is []
        -- Assign custom [TopologySpreadConstraints] rules to the Argo CD server
        # @default -- `[]` (defaults to global.topologySpreadConstraints)
        ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/
        ## If labelSelector is left out, it will default to the labelSelector configuration of the deployment
        - maxSkew: 1
        #   topologyKey: topology.kubernetes.io/zone
        #   whenUnsatisfiable: DoNotSchedule
    volumeMounts : [any], required, default is []
        -- Additional volumeMounts to the server main container
        - mountPath: /usr/local/bin/kubelogin
        #    name: custom-tools
        #    subPath: kubelogin
    volumes : [any], required, default is []
        -- Additional volumes to the server pod
        - name: custom-tools
        #    emptyDir: {}
    """
    affinity: ValuesServerAffinity = {}
    automountServiceAccountToken: bool = True
    autoscaling?: ValuesServerAutoscaling
    certificate?: ValuesServerCertificate
    certificateSecret?: ValuesServerCertificateSecret
    clusterRoleRules?: ValuesServerClusterRoleRules
    containerPorts?: ValuesServerContainerPorts
    containerSecurityContext?: ValuesServerContainerSecurityContext
    deploymentAnnotations: ValuesServerDeploymentAnnotations = {}
    deploymentStrategy: ValuesServerDeploymentStrategy = {}
    dnsConfig: ValuesServerDnsConfig = {}
    dnsPolicy: str = "ClusterFirst"
    emptyDir?: ValuesServerEmptyDir
    env: [any] = []
    envFrom: [any] = []
    extensions?: ValuesServerExtensions
    extraArgs: [any] = []
    extraContainers: [any] = []
    hostNetwork: bool = False
    image?: ValuesServerImage
    imagePullSecrets: [any] = []
    ingress?: ValuesServerIngress
    ingressGrpc?: ValuesServerIngressGrpc
    initContainers: [any] = []
    lifecycle: ValuesServerLifecycle = {}
    livenessProbe?: ValuesServerLivenessProbe
    metrics?: ValuesServerMetrics
    name: str = "server"
    nodeSelector: ValuesServerNodeSelector = {}
    pdb?: ValuesServerPdb
    podAnnotations: ValuesServerPodAnnotations = {}
    podLabels: ValuesServerPodLabels = {}
    priorityClassName: str = ""
    readinessProbe?: ValuesServerReadinessProbe
    replicas: int = 1
    resources: ValuesServerResources = {}
    route?: ValuesServerRoute
    runtimeClassName: str = ""
    service?: ValuesServerService
    serviceAccount?: ValuesServerServiceAccount
    terminationGracePeriodSeconds: int = 30
    tolerations: [any] = []
    topologySpreadConstraints: [any] = []
    volumeMounts: [any] = []
    volumes: [any] = []

schema ValuesServerAffinity:
    r"""
    -- Assign custom [affinity] rules to the deployment
    # @default -- `{}` (defaults to global.affinity preset)
    """
    [...str]: any

schema ValuesServerAutoscaling:
    r"""
    # Argo CD server Horizontal Pod Autoscaler

    Attributes
    ----------
    behavior : ValuesServerAutoscalingBehavior, required, default is {}
        -- Configures the scaling behavior of the target in both Up and Down directions.
    enabled : bool, required, default is False
        -- Enable Horizontal Pod Autoscaler ([HPA]) for the Argo CD server
    maxReplicas : int, required, default is 5
        -- Maximum number of replicas for the Argo CD server [HPA]
    metrics : [any], required, default is []
        scaleDown:
        #  stabilizationWindowSeconds: 300
        #  policies:
        #   - type: Pods
        #     value: 1
        #     periodSeconds: 180
        # scaleUp:
        #   stabilizationWindowSeconds: 300
        #   policies:
        #   - type: Pods
        #     value: 2
        #     periodSeconds: 60
        # -- Configures custom HPA metrics for the Argo CD server
        # Ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
    minReplicas : int, required, default is 1
        -- Minimum number of replicas for the Argo CD server [HPA]
    targetCPUUtilizationPercentage : int, required, default is 50
        -- Average CPU utilization percentage for the Argo CD server [HPA]
    targetMemoryUtilizationPercentage : int, required, default is 50
        -- Average memory utilization percentage for the Argo CD server [HPA]
    """
    behavior: ValuesServerAutoscalingBehavior = {}
    enabled: bool = False
    maxReplicas: int = 5
    metrics: [any] = []
    minReplicas: int = 1
    targetCPUUtilizationPercentage: int = 50
    targetMemoryUtilizationPercentage: int = 50

schema ValuesServerAutoscalingBehavior:
    r"""
    -- Configures the scaling behavior of the target in both Up and Down directions.
    """
    [...str]: any

schema ValuesServerCertificate:
    r"""
    TLS certificate configuration via cert-manager
    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/#tls-certificates-used-by-argocd-server

    Attributes
    ----------
    additionalHosts : [any], required, default is []
        -- Certificate Subject Alternate Names (SANs)
    annotations : ValuesServerCertificateAnnotations, required, default is {}
        -- Annotations to be applied to the Server Certificate
    domain : str, required, default is ""
        -- Certificate primary domain (commonName)
        # @default -- `""` (defaults to global.domain)
    duration : str, required, default is ""
        -- The requested 'duration' (i.e. lifetime) of the certificate.
        # @default -- `""` (defaults to 2160h = 90d if not specified)
        ## Ref: https://cert-manager.io/docs/usage/certificate/#renewal
    enabled : bool, required, default is False
        -- Deploy a Certificate resource (requires cert-manager)
    issuer : ValuesServerCertificateIssuer, optional
        Certificate issuer
        ## Ref: https://cert-manager.io/docs/concepts/issuer
    privateKey : ValuesServerCertificatePrivateKey, optional
        Private key of the certificate
    renewBefore : str, required, default is ""
        -- How long before the expiry a certificate should be renewed.
        # @default -- `""` (defaults to 360h = 15d if not specified)
        ## Ref: https://cert-manager.io/docs/usage/certificate/#renewal
    secretTemplateAnnotations : ValuesServerCertificateSecretTemplateAnnotations, required, default is {}
        -- Annotations that allow the certificate to be composed from data residing in existing Kubernetes Resources
    usages : [any], required, default is []
        -- Usages for the certificate
        ### Ref: https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1.KeyUsage
    """
    additionalHosts: [any] = []
    annotations: ValuesServerCertificateAnnotations = {}
    domain: str = ""
    duration: str = ""
    enabled: bool = False
    issuer?: ValuesServerCertificateIssuer
    privateKey?: ValuesServerCertificatePrivateKey
    renewBefore: str = ""
    secretTemplateAnnotations: ValuesServerCertificateSecretTemplateAnnotations = {}
    usages: [any] = []

schema ValuesServerCertificateAnnotations:
    r"""
    -- Annotations to be applied to the Server Certificate
    """
    [...str]: any

schema ValuesServerCertificateIssuer:
    r"""
    Certificate issuer
    ## Ref: https://cert-manager.io/docs/concepts/issuer

    Attributes
    ----------
    group : str, required, default is ""
        -- Certificate issuer group. Set if using an external issuer. Eg. `cert-manager.io`
    kind : str, required, default is ""
        -- Certificate issuer kind. Either `Issuer` or `ClusterIssuer`
    name : str, required, default is ""
        -- Certificate issuer name. Eg. `letsencrypt`
    """
    group: str = ""
    kind: str = ""
    name: str = ""

schema ValuesServerCertificatePrivateKey:
    r"""
    Private key of the certificate

    Attributes
    ----------
    algorithm : str, required, default is "RSA"
        -- Algorithm used to generate certificate private key. One of: `RSA`, `Ed25519` or `ECDSA`
    encoding : str, required, default is "PKCS1"
        -- The private key cryptography standards (PKCS) encoding for private key. Either: `PCKS1` or `PKCS8`
    rotationPolicy : str, required, default is "Never"
        -- Rotation policy of private key when certificate is re-issued. Either: `Never` or `Always`
    size : int, required, default is 2048
        -- Key bit size of the private key. If algorithm is set to `Ed25519`, size is ignored.
    """
    algorithm: str = "RSA"
    encoding: str = "PKCS1"
    rotationPolicy: str = "Never"
    size: int = 2048

schema ValuesServerCertificateSecret:
    r"""
    TLS certificate configuration via Secret
    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/tls/#tls-certificates-used-by-argocd-server

    Attributes
    ----------
    annotations : ValuesServerCertificateSecretAnnotations, required, default is {}
        -- Annotations to be added to argocd-server-tls secret
    crt : str, required, default is ""
        -- Certificate data
    enabled : bool, required, default is False
        -- Create argocd-server-tls secret
    key : str, required, default is ""
        -- Private Key of the certificate
    labels : ValuesServerCertificateSecretLabels, required, default is {}
        -- Labels to be added to argocd-server-tls secret
    """
    annotations: ValuesServerCertificateSecretAnnotations = {}
    crt: str = ""
    enabled: bool = False
    key: str = ""
    labels: ValuesServerCertificateSecretLabels = {}

schema ValuesServerCertificateSecretAnnotations:
    r"""
    -- Annotations to be added to argocd-server-tls secret
    """
    [...str]: any

schema ValuesServerCertificateSecretLabels:
    r"""
    -- Labels to be added to argocd-server-tls secret
    """
    [...str]: any

schema ValuesServerCertificateSecretTemplateAnnotations:
    r"""
    -- Annotations that allow the certificate to be composed from data residing in existing Kubernetes Resources
    """
    [...str]: any

schema ValuesServerClusterRoleRules:
    r"""
    # Enable this and set the rules: to whatever custom rules you want for the Cluster Role resource.
    ## Defaults to off

    Attributes
    ----------
    enabled : bool, required, default is False
        -- Enable custom rules for the server's ClusterRole resource
    rules : [any], required, default is []
        -- List of custom rules for the server's ClusterRole resource
    """
    enabled: bool = False
    rules: [any] = []

schema ValuesServerContainerPorts:
    r"""
    Server container ports

    Attributes
    ----------
    metrics : int, required, default is 8083
        -- Metrics container port
    server : int, required, default is 8080
        -- Server container port
    """
    metrics: int = 8083
    server: int = 8080

schema ValuesServerContainerSecurityContext:
    r"""
    -- Server container-level security context
    # @default -- See [values.yaml]

    Attributes
    ----------
    allowPrivilegeEscalation : bool, required, default is False
    capabilities : ValuesServerContainerSecurityContextCapabilities, optional
    readOnlyRootFilesystem : bool, required, default is True
    runAsNonRoot : bool, required, default is True
    seccompProfile : ValuesServerContainerSecurityContextSeccompProfile, optional
    """
    allowPrivilegeEscalation: bool = False
    capabilities?: ValuesServerContainerSecurityContextCapabilities
    readOnlyRootFilesystem: bool = True
    runAsNonRoot: bool = True
    seccompProfile?: ValuesServerContainerSecurityContextSeccompProfile

schema ValuesServerContainerSecurityContextCapabilities:
    r"""
    ValuesServerContainerSecurityContextCapabilities

    Attributes
    ----------
    drop : [str], optional
    """
    drop?: [str]

schema ValuesServerContainerSecurityContextSeccompProfile:
    r"""
    ValuesServerContainerSecurityContextSeccompProfile

    Attributes
    ----------
    $type : str, required, default is "RuntimeDefault"
    """
    $type: str = "RuntimeDefault"

schema ValuesServerDeploymentAnnotations:
    r"""
    -- Annotations to be added to server Deployment
    """
    [...str]: any

schema ValuesServerDeploymentStrategy:
    r"""
    -- Deployment strategy to be added to the server Deployment
    type: RollingUpdate
    # rollingUpdate:
    #   maxSurge: 25%
    #   maxUnavailable: 25%
    """
    [...str]: any

schema ValuesServerDnsConfig:
    r"""
    -- [DNS configuration]
    """
    [...str]: any

schema ValuesServerEmptyDir:
    r"""
    # Argo CD server emptyDir volumes

    Attributes
    ----------
    sizeLimit : str, required, default is ""
        -- EmptyDir size limit for the Argo CD server
        # @default -- `""` (defaults not set if not specified i.e. no size limit)
        sizeLimit: "1Gi"
    """
    sizeLimit: str = ""

schema ValuesServerExtensions:
    r"""
    # Argo CD extensions
    ## This function in tech preview stage, do expect instability or breaking changes in newer versions.
    ## Ref: https://github.com/argoproj-labs/argocd-extension-installer
    ## When you enable extensions, you need to configure RBAC of logged in Argo CD user.
    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/#the-extensions-resource

    Attributes
    ----------
    containerSecurityContext : ValuesServerExtensionsContainerSecurityContext, optional
        -- Server UI extensions container-level security context
        # @default -- See [values.yaml]
    enabled : bool, required, default is False
        -- Enable support for Argo CD extensions
    extensionList : [any], required, default is []
        -- Extensions for Argo CD
        # @default -- `[]` (See [values.yaml])
        ## Ref: https://github.com/argoproj-labs/argocd-extension-metrics#install-ui-extension
        - name: extension-metrics
        #    env:
        #      - name: EXTENSION_URL
        #        value: https://github.com/argoproj-labs/argocd-extension-metrics/releases/download/v1.0.0/extension.tar.gz
        #      - name: EXTENSION_CHECKSUM_URL
        #        value: https://github.com/argoproj-labs/argocd-extension-metrics/releases/download/v1.0.0/extension_checksums.txt
    image : ValuesServerExtensionsImage, optional
        # Argo CD extension installer image
    resources : ValuesServerExtensionsResources, required, default is {}
        -- Resource limits and requests for the argocd-extensions container
        limits:
        #    cpu: 50m
        #    memory: 128Mi
        #  requests:
        #    cpu: 10m
        #    memory: 64Mi
    """
    containerSecurityContext?: ValuesServerExtensionsContainerSecurityContext
    enabled: bool = False
    extensionList: [any] = []
    image?: ValuesServerExtensionsImage
    resources: ValuesServerExtensionsResources = {}

schema ValuesServerExtensionsContainerSecurityContext:
    r"""
    -- Server UI extensions container-level security context
    # @default -- See [values.yaml]

    Attributes
    ----------
    allowPrivilegeEscalation : bool, required, default is False
    capabilities : ValuesServerExtensionsContainerSecurityContextCapabilities, optional
    readOnlyRootFilesystem : bool, required, default is True
    runAsNonRoot : bool, required, default is True
    runAsUser : int, required, default is 1000
    seccompProfile : ValuesServerExtensionsContainerSecurityContextSeccompProfile, optional
    """
    allowPrivilegeEscalation: bool = False
    capabilities?: ValuesServerExtensionsContainerSecurityContextCapabilities
    readOnlyRootFilesystem: bool = True
    runAsNonRoot: bool = True
    runAsUser: int = 1000
    seccompProfile?: ValuesServerExtensionsContainerSecurityContextSeccompProfile

schema ValuesServerExtensionsContainerSecurityContextCapabilities:
    r"""
    ValuesServerExtensionsContainerSecurityContextCapabilities

    Attributes
    ----------
    drop : [str], optional
    """
    drop?: [str]

schema ValuesServerExtensionsContainerSecurityContextSeccompProfile:
    r"""
    ValuesServerExtensionsContainerSecurityContextSeccompProfile

    Attributes
    ----------
    $type : str, required, default is "RuntimeDefault"
    """
    $type: str = "RuntimeDefault"

schema ValuesServerExtensionsImage:
    r"""
    # Argo CD extension installer image

    Attributes
    ----------
    imagePullPolicy : str, required, default is ""
        -- Image pull policy for extensions
        # @default -- `""` (defaults to global.image.imagePullPolicy)
    repository : str, required, default is "quay.io/argoprojlabs/argocd-extension-installer"
        -- Repository to use for extension installer image
    tag : str, required, default is "v0.0.8"
        -- Tag to use for extension installer image
    """
    imagePullPolicy: str = ""
    repository: str = "quay.io/argoprojlabs/argocd-extension-installer"
    tag: str = "v0.0.8"

schema ValuesServerExtensionsResources:
    r"""
    -- Resource limits and requests for the argocd-extensions container
    limits:
    #    cpu: 50m
    #    memory: 128Mi
    #  requests:
    #    cpu: 10m
    #    memory: 64Mi
    """
    [...str]: any

schema ValuesServerImage:
    r"""
    # Argo CD server image

    Attributes
    ----------
    imagePullPolicy : str, required, default is ""
        -- Image pull policy for the Argo CD server
        # @default -- `""` (defaults to global.image.imagePullPolicy)
        IfNotPresent
    repository : str, required, default is ""
        -- Repository to use for the Argo CD server
        # @default -- `""` (defaults to global.image.repository)
        defaults to global.image.repository
    tag : str, required, default is ""
        -- Tag to use for the Argo CD server
        # @default -- `""` (defaults to global.image.tag)
        defaults to global.image.tag
    """
    imagePullPolicy: str = ""
    repository: str = ""
    tag: str = ""

schema ValuesServerIngress:
    r"""
    Argo CD server ingress configuration

    Attributes
    ----------
    annotations : ValuesServerIngressAnnotations, required, default is {}
        -- Additional ingress annotations
        ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#option-1-ssl-passthrough
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        # nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    aws : ValuesServerIngressAws, optional
        AWS specific options for Application Load Balancer
        # Applies only when `serv.ingress.controller` is set to `aws`
        ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#aws-application-load-balancers-albs-and-classic-elb-http-mode
    controller : str, required, default is "generic"
        -- Specific implementation for ingress controller. One of `generic`, `aws` or `gke`
        ## Additional configuration might be required in related configuration sections
    enabled : bool, required, default is False
        -- Enable an ingress resource for the Argo CD server
    extraHosts : [any], required, default is []
        -- The list of additional hostnames to be covered by ingress record
        # @default -- `[]` (See [values.yaml])
        - name: argocd.example.com
        #   path: /
    extraPaths : [any], required, default is []
        -- Additional ingress paths
        # @default -- `[]` (See [values.yaml])
        ## Note: Supports use of custom Helm templates
        - path: /*
        #   pathType: Prefix
        #   backend:
        #     service:
        #       name: ssl-redirect
        #       port:
        #         name: use-annotation
    extraRules : [any], required, default is []
        -- Additional ingress rules
        # @default -- `[]` (See [values.yaml])
        ## Note: Supports use of custom Helm templates
        - http:
        #     paths:
        #     - path: /
        #       pathType: Prefix
        #       backend:
        #         service:
        #           name: '{{ include "argo-cd.server.fullname" . }}'
        #           port:
        #             name: '{{ .Values.server.service.servicePortHttpsName }}'
    extraTls : [any], required, default is []
        -- Additional TLS configuration
        # @default -- `[]` (See [values.yaml])
        - hosts:
        #   - argocd.example.com
        #   secretName: your-certificate-name
    gke : ValuesServerIngressGke, optional
        Google specific options for Google Application Load Balancer
        # Applies only when `server.ingress.controller` is set to `gke`
        ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#google-cloud-load-balancers-with-kubernetes-ingress
    hostname : str, required, default is ""
        -- Argo CD server hostname
        # @default -- `""` (defaults to global.domain)
    ingressClassName : str, required, default is ""
        -- Defines which ingress controller will implement the resource
    labels : ValuesServerIngressLabels, required, default is {}
        -- Additional ingress labels
    path : str, required, default is "/"
        -- The path to Argo CD server
    pathType : str, required, default is "Prefix"
        -- Ingress path type. One of `Exact`, `Prefix` or `ImplementationSpecific`
    tls : bool, required, default is False
        -- Enable TLS configuration for the hostname defined at `server.ingress.hostname`
        ## TLS certificate will be retrieved from a TLS secret `argocd-server-tls`
        ## You can create this secret via `certificate` or `certificateSecret` option
    """
    annotations: ValuesServerIngressAnnotations = {}
    aws?: ValuesServerIngressAws
    controller: str = "generic"
    enabled: bool = False
    extraHosts: [any] = []
    extraPaths: [any] = []
    extraRules: [any] = []
    extraTls: [any] = []
    gke?: ValuesServerIngressGke
    hostname: str = ""
    ingressClassName: str = ""
    labels: ValuesServerIngressLabels = {}
    path: str = "/"
    pathType: str = "Prefix"
    tls: bool = False

schema ValuesServerIngressAnnotations:
    r"""
    -- Additional ingress annotations
    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#option-1-ssl-passthrough
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    # nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    """
    [...str]: any

schema ValuesServerIngressAws:
    r"""
    AWS specific options for Application Load Balancer
    # Applies only when `serv.ingress.controller` is set to `aws`
    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#aws-application-load-balancers-albs-and-classic-elb-http-mode

    Attributes
    ----------
    backendProtocolVersion : str, required, default is "GRPC"
        -- Backend protocol version for the AWS ALB gRPC service
        ## This tells AWS to send traffic from the ALB using gRPC.
        ## For more information: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/target-group-health-checks.html#health-check-settings
    serviceType : str, required, default is "NodePort"
        -- Service type for the AWS ALB gRPC service
        ## Can be of type NodePort or ClusterIP depending on which mode you are running.
        ## Instance mode needs type NodePort, IP mode needs type ClusterIP
        ## Ref: https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.2/how-it-works/#ingress-traffic
    """
    backendProtocolVersion: str = "GRPC"
    serviceType: str = "NodePort"

schema ValuesServerIngressGke:
    r"""
    Google specific options for Google Application Load Balancer
    # Applies only when `server.ingress.controller` is set to `gke`
    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#google-cloud-load-balancers-with-kubernetes-ingress

    Attributes
    ----------
    backendConfig : ValuesServerIngressGkeBackendConfig, required, default is {}
        -- Google [BackendConfig] resource, for use with the GKE Ingress Controller
        # @default -- `{}` (See [values.yaml])
        ## Ref: https://cloud.google.com/kubernetes-engine/docs/how-to/ingress-features#configuring_ingress_features_through_frontendconfig_parameters
        iap:
        #  enabled: true
        #  oauthclientCredentials:
        #    secretName: argocd-secret
    frontendConfig : ValuesServerIngressGkeFrontendConfig, required, default is {}
        -- Google [FrontendConfig] resource, for use with the GKE Ingress Controller
        # @default -- `{}` (See [values.yaml])
        ## Ref: https://cloud.google.com/kubernetes-engine/docs/how-to/ingress-features#configuring_ingress_features_through_frontendconfig_parameters
        redirectToHttps:
        #   enabled: true
        #   responseCodeName: RESPONSE_CODE
    managedCertificate : ValuesServerIngressGkeManagedCertificate, optional
        Managed GKE certificate for ingress hostname
    """
    backendConfig: ValuesServerIngressGkeBackendConfig = {}
    frontendConfig: ValuesServerIngressGkeFrontendConfig = {}
    managedCertificate?: ValuesServerIngressGkeManagedCertificate

schema ValuesServerIngressGkeBackendConfig:
    r"""
    -- Google [BackendConfig] resource, for use with the GKE Ingress Controller
    # @default -- `{}` (See [values.yaml])
    ## Ref: https://cloud.google.com/kubernetes-engine/docs/how-to/ingress-features#configuring_ingress_features_through_frontendconfig_parameters
    iap:
    #  enabled: true
    #  oauthclientCredentials:
    #    secretName: argocd-secret
    """
    [...str]: any

schema ValuesServerIngressGkeFrontendConfig:
    r"""
    -- Google [FrontendConfig] resource, for use with the GKE Ingress Controller
    # @default -- `{}` (See [values.yaml])
    ## Ref: https://cloud.google.com/kubernetes-engine/docs/how-to/ingress-features#configuring_ingress_features_through_frontendconfig_parameters
    redirectToHttps:
    #   enabled: true
    #   responseCodeName: RESPONSE_CODE
    """
    [...str]: any

schema ValuesServerIngressGkeManagedCertificate:
    r"""
    Managed GKE certificate for ingress hostname

    Attributes
    ----------
    create : bool, required, default is True
        -- Create ManagedCertificate resource and annotations for Google Load balancer
        ## Ref: https://cloud.google.com/kubernetes-engine/docs/how-to/managed-certs
    extraDomains : [any], required, default is []
        -- Additional domains for ManagedCertificate resource
        - argocd.example.com
    """
    create: bool = True
    extraDomains: [any] = []

schema ValuesServerIngressGrpc:
    r"""
    Dedicated gRPC ingress for ingress controllers that supports only single backend protocol per Ingress resource
    # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#option-2-multiple-ingress-objects-and-hosts

    Attributes
    ----------
    annotations : ValuesServerIngressGrpcAnnotations, required, default is {}
        -- Additional ingress annotations for dedicated [gRPC-ingress]
    enabled : bool, required, default is False
        -- Enable an ingress resource for the Argo CD server for dedicated [gRPC-ingress]
    extraHosts : [any], required, default is []
        -- The list of additional hostnames to be covered by ingress record
        # @default -- `[]` (See [values.yaml])
        - name: grpc.argocd.example.com
        #   path: /
    extraPaths : [any], required, default is []
        -- Additional ingress paths for dedicated [gRPC-ingress]
        # @default -- `[]` (See [values.yaml])
        ## Note: Supports use of custom Helm templates
        - path: /*
        #   pathType: Prefix
        #   backend:
        #     service:
        #       name: ssl-redirect
        #       port:
        #         name: use-annotation
    extraRules : [any], required, default is []
        -- Additional ingress rules
        # @default -- `[]` (See [values.yaml])
        ## Note: Supports use of custom Helm templates
        - http:
        #     paths:
        #     - path: /
        #       pathType: Prefix
        #       backend:
        #         service:
        #           name: '{{ include "argo-cd.server.fullname" . }}'
        #           port:
        #             name: '{{ .Values.server.service.servicePortHttpName }}'
    extraTls : [any], required, default is []
        -- Additional TLS configuration for dedicated [gRPC-ingress]
        # @default -- `[]` (See [values.yaml])
        - secretName: your-certificate-name
        #   hosts:
        #     - argocd.example.com
    hostname : str, required, default is ""
        -- Argo CD server hostname for dedicated [gRPC-ingress]
        # @default -- `""` (defaults to grpc.`server.ingress.hostname`)
    ingressClassName : str, required, default is ""
        -- Defines which ingress controller will implement the resource [gRPC-ingress]
    labels : ValuesServerIngressGrpcLabels, required, default is {}
        -- Additional ingress labels for dedicated [gRPC-ingress]
    path : str, required, default is "/"
        -- Argo CD server ingress path for dedicated [gRPC-ingress]
    pathType : str, required, default is "Prefix"
        -- Ingress path type for dedicated [gRPC-ingress]. One of `Exact`, `Prefix` or `ImplementationSpecific`
    tls : bool, required, default is False
        -- Enable TLS configuration for the hostname defined at `server.ingressGrpc.hostname`
        ## TLS certificate will be retrieved from a TLS secret with name: `argocd-server-grpc-tls`
    """
    annotations: ValuesServerIngressGrpcAnnotations = {}
    enabled: bool = False
    extraHosts: [any] = []
    extraPaths: [any] = []
    extraRules: [any] = []
    extraTls: [any] = []
    hostname: str = ""
    ingressClassName: str = ""
    labels: ValuesServerIngressGrpcLabels = {}
    path: str = "/"
    pathType: str = "Prefix"
    tls: bool = False

schema ValuesServerIngressGrpcAnnotations:
    r"""
    -- Additional ingress annotations for dedicated [gRPC-ingress]
    """
    [...str]: any

schema ValuesServerIngressGrpcLabels:
    r"""
    -- Additional ingress labels for dedicated [gRPC-ingress]
    """
    [...str]: any

schema ValuesServerIngressLabels:
    r"""
    -- Additional ingress labels
    """
    [...str]: any

schema ValuesServerLifecycle:
    r"""
    -- Specify postStart and preStop lifecycle hooks for your argo-cd-server container
    """
    [...str]: any

schema ValuesServerLivenessProbe:
    r"""
    ValuesServerLivenessProbe

    Attributes
    ----------
    failureThreshold : int, required, default is 3
        -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
    initialDelaySeconds : int, required, default is 10
        -- Number of seconds after the container has started before [probe] is initiated
    periodSeconds : int, required, default is 10
        -- How often (in seconds) to perform the [probe]
    successThreshold : int, required, default is 1
        -- Minimum consecutive successes for the [probe] to be considered successful after having failed
    timeoutSeconds : int, required, default is 1
        -- Number of seconds after which the [probe] times out
    """
    failureThreshold: int = 3
    initialDelaySeconds: int = 10
    periodSeconds: int = 10
    successThreshold: int = 1
    timeoutSeconds: int = 1

schema ValuesServerMetrics:
    r"""
    # Server metrics service configuration

    Attributes
    ----------
    enabled : bool, required, default is False
        -- Deploy metrics service
    service : ValuesServerMetricsService, optional
    serviceMonitor : ValuesServerMetricsServiceMonitor, optional
    """
    enabled: bool = False
    service?: ValuesServerMetricsService
    serviceMonitor?: ValuesServerMetricsServiceMonitor

schema ValuesServerMetricsService:
    r"""
    ValuesServerMetricsService

    Attributes
    ----------
    annotations : ValuesServerMetricsServiceAnnotations, required, default is {}
        -- Metrics service annotations
    clusterIP : str, required, default is ""
        -- Metrics service clusterIP. `None` makes a "headless service" (no virtual IP)
    labels : ValuesServerMetricsServiceLabels, required, default is {}
        -- Metrics service labels
    portName : str, required, default is "http-metrics"
        -- Metrics service port name
    servicePort : int, required, default is 8083
        -- Metrics service port
    $type : str, required, default is "ClusterIP"
        -- Metrics service type
    """
    annotations: ValuesServerMetricsServiceAnnotations = {}
    clusterIP: str = ""
    labels: ValuesServerMetricsServiceLabels = {}
    portName: str = "http-metrics"
    servicePort: int = 8083
    $type: str = "ClusterIP"

schema ValuesServerMetricsServiceAnnotations:
    r"""
    -- Metrics service annotations
    """
    [...str]: any

schema ValuesServerMetricsServiceLabels:
    r"""
    -- Metrics service labels
    """
    [...str]: any

schema ValuesServerMetricsServiceMonitor:
    r"""
    ValuesServerMetricsServiceMonitor

    Attributes
    ----------
    additionalLabels : ValuesServerMetricsServiceMonitorAdditionalLabels, required, default is {}
        -- Prometheus ServiceMonitor labels
    annotations : ValuesServerMetricsServiceMonitorAnnotations, required, default is {}
        -- Prometheus ServiceMonitor annotations
    enabled : bool, required, default is False
        -- Enable a prometheus ServiceMonitor
    honorLabels : bool, required, default is False
        -- When true, honorLabels preserves the metric’s labels when they collide with the target’s labels.
    interval : str, required, default is "30s"
        -- Prometheus ServiceMonitor interval
    metricRelabelings : [any], required, default is []
        -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
    namespace : str, required, default is ""
        -- Prometheus ServiceMonitor namespace
        monitoring
    relabelings : [any], required, default is []
        -- Prometheus [RelabelConfigs] to apply to samples before scraping
    scheme : str, required, default is ""
        -- Prometheus ServiceMonitor scheme
    scrapeTimeout : str, required, default is ""
        -- Prometheus ServiceMonitor scrapeTimeout. If empty, Prometheus uses the global scrape timeout unless it is less than the target's scrape interval value in which the latter is used.
    selector : ValuesServerMetricsServiceMonitorSelector, required, default is {}
        -- Prometheus ServiceMonitor selector
        prometheus: kube-prometheus
    tlsConfig : ValuesServerMetricsServiceMonitorTlsConfig, required, default is {}
        -- Prometheus ServiceMonitor tlsConfig
    """
    additionalLabels: ValuesServerMetricsServiceMonitorAdditionalLabels = {}
    annotations: ValuesServerMetricsServiceMonitorAnnotations = {}
    enabled: bool = False
    honorLabels: bool = False
    interval: str = "30s"
    metricRelabelings: [any] = []
    namespace: str = ""
    relabelings: [any] = []
    scheme: str = ""
    scrapeTimeout: str = ""
    selector: ValuesServerMetricsServiceMonitorSelector = {}
    tlsConfig: ValuesServerMetricsServiceMonitorTlsConfig = {}

schema ValuesServerMetricsServiceMonitorAdditionalLabels:
    r"""
    -- Prometheus ServiceMonitor labels
    """
    [...str]: any

schema ValuesServerMetricsServiceMonitorAnnotations:
    r"""
    -- Prometheus ServiceMonitor annotations
    """
    [...str]: any

schema ValuesServerMetricsServiceMonitorSelector:
    r"""
    -- Prometheus ServiceMonitor selector
    prometheus: kube-prometheus
    """
    [...str]: any

schema ValuesServerMetricsServiceMonitorTlsConfig:
    r"""
    -- Prometheus ServiceMonitor tlsConfig
    """
    [...str]: any

schema ValuesServerNodeSelector:
    r"""
    -- [Node selector]
    # @default -- `{}` (defaults to global.nodeSelector)
    """
    [...str]: any

schema ValuesServerPdb:
    r"""
    # Argo CD server Pod Disruption Budget
    ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/

    Attributes
    ----------
    annotations : ValuesServerPdbAnnotations, required, default is {}
        -- Annotations to be added to Argo CD server pdb
    enabled : bool, required, default is False
        -- Deploy a [PodDisruptionBudget] for the Argo CD server
    labels : ValuesServerPdbLabels, required, default is {}
        -- Labels to be added to Argo CD server pdb
    maxUnavailable : str, required, default is ""
        -- Number of pods that are unavailable after eviction as number or percentage (eg.: 50%).
        ## Has higher precedence over `server.pdb.minAvailable`
    minAvailable : str, required, default is ""
        -- Number of pods that are available after eviction as number or percentage (eg.: 50%)
        # @default -- `""` (defaults to 0 if not specified)
    """
    annotations: ValuesServerPdbAnnotations = {}
    enabled: bool = False
    labels: ValuesServerPdbLabels = {}
    maxUnavailable: str = ""
    minAvailable: str = ""

schema ValuesServerPdbAnnotations:
    r"""
    -- Annotations to be added to Argo CD server pdb
    """
    [...str]: any

schema ValuesServerPdbLabels:
    r"""
    -- Labels to be added to Argo CD server pdb
    """
    [...str]: any

schema ValuesServerPodAnnotations:
    r"""
    -- Annotations to be added to server pods
    """
    [...str]: any

schema ValuesServerPodLabels:
    r"""
    -- Labels to be added to server pods
    """
    [...str]: any

schema ValuesServerReadinessProbe:
    r"""
    # Readiness and liveness probes for default backend
    ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/

    Attributes
    ----------
    failureThreshold : int, required, default is 3
        -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
    initialDelaySeconds : int, required, default is 10
        -- Number of seconds after the container has started before [probe] is initiated
    periodSeconds : int, required, default is 10
        -- How often (in seconds) to perform the [probe]
    successThreshold : int, required, default is 1
        -- Minimum consecutive successes for the [probe] to be considered successful after having failed
    timeoutSeconds : int, required, default is 1
        -- Number of seconds after which the [probe] times out
    """
    failureThreshold: int = 3
    initialDelaySeconds: int = 10
    periodSeconds: int = 10
    successThreshold: int = 1
    timeoutSeconds: int = 1

schema ValuesServerResources:
    r"""
    -- Resource limits and requests for the Argo CD server
    limits:
    #    cpu: 100m
    #    memory: 128Mi
    #  requests:
    #    cpu: 50m
    #    memory: 64Mi
    """
    [...str]: any

schema ValuesServerRoute:
    r"""
    Create a OpenShift Route with SSL passthrough for UI and CLI
    # Consider setting 'hostname' e.g. https://argocd.apps-crc.testing/ using your Default Ingress Controller Domain
    # Find your domain with: kubectl describe --namespace=openshift-ingress-operator ingresscontroller/default | grep Domain:
    # If 'hostname' is an empty string "" OpenShift will create a hostname for you.

    Attributes
    ----------
    annotations : ValuesServerRouteAnnotations, required, default is {}
        -- Openshift Route annotations
    enabled : bool, required, default is False
        -- Enable an OpenShift Route for the Argo CD server
    hostname : str, required, default is ""
        -- Hostname of OpenShift Route
    termination_policy : str, required, default is "None"
        -- Termination policy of Openshift Route
    termination_type : str, required, default is "passthrough"
        -- Termination type of Openshift Route
    """
    annotations: ValuesServerRouteAnnotations = {}
    enabled: bool = False
    hostname: str = ""
    termination_policy: str = "None"
    termination_type: str = "passthrough"

schema ValuesServerRouteAnnotations:
    r"""
    -- Openshift Route annotations
    """
    [...str]: any

schema ValuesServerService:
    r"""
    # Server service configuration

    Attributes
    ----------
    annotations : ValuesServerServiceAnnotations, required, default is {}
        -- Server service annotations
    externalIPs : [any], required, default is []
        -- Server service external IPs
    externalTrafficPolicy : str, required, default is "Cluster"
        -- Denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints
        ## Ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
    labels : ValuesServerServiceLabels, required, default is {}
        -- Server service labels
    loadBalancerClass : str, required, default is ""
        -- The class of the load balancer implementation
    loadBalancerIP : str, required, default is ""
        -- LoadBalancer will get created with the IP specified in this field
    loadBalancerSourceRanges : [any], required, default is []
        -- Source IP ranges to allow access to service from
        ## EKS Ref: https://repost.aws/knowledge-center/eks-cidr-ip-address-loadbalancer
        ## GKE Ref: https://cloud.google.com/kubernetes-engine/docs/concepts/network-overview#limit-connectivity-ext-lb
    nodePortHttp : int, required, default is 30080
        -- Server service http port for NodePort service type (only if `server.service.type` is set to "NodePort")
    nodePortHttps : int, required, default is 30443
        -- Server service https port for NodePort service type (only if `server.service.type` is set to "NodePort")
    servicePortHttp : int, required, default is 80
        -- Server service http port
    servicePortHttpName : str, required, default is "http"
        -- Server service http port name, can be used to route traffic via istio
    servicePortHttps : int, required, default is 443
        -- Server service https port
    servicePortHttpsAppProtocol : str, required, default is ""
        -- Server service https port appProtocol
        ## Ref: https://kubernetes.io/docs/concepts/services-networking/service/#application-protocol
    servicePortHttpsName : str, required, default is "https"
        -- Server service https port name, can be used to route traffic via istio
    sessionAffinity : str, required, default is "None"
        -- Used to maintain session affinity. Supports `ClientIP` and `None`
        ## Ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
    $type : str, required, default is "ClusterIP"
        -- Server service type
    """
    annotations: ValuesServerServiceAnnotations = {}
    externalIPs: [any] = []
    externalTrafficPolicy: str = "Cluster"
    labels: ValuesServerServiceLabels = {}
    loadBalancerClass: str = ""
    loadBalancerIP: str = ""
    loadBalancerSourceRanges: [any] = []
    nodePortHttp: int = 30080
    nodePortHttps: int = 30443
    servicePortHttp: int = 80
    servicePortHttpName: str = "http"
    servicePortHttps: int = 443
    servicePortHttpsAppProtocol: str = ""
    servicePortHttpsName: str = "https"
    sessionAffinity: str = "None"
    $type: str = "ClusterIP"

schema ValuesServerServiceAccount:
    r"""
    ValuesServerServiceAccount

    Attributes
    ----------
    annotations : ValuesServerServiceAccountAnnotations, required, default is {}
        -- Annotations applied to created service account
    automountServiceAccountToken : bool, required, default is True
        -- Automount API credentials for the Service Account
    create : bool, required, default is True
        -- Create server service account
    labels : ValuesServerServiceAccountLabels, required, default is {}
        -- Labels applied to created service account
    name : str, required, default is "argocd-server"
        -- Server service account name
    """
    annotations: ValuesServerServiceAccountAnnotations = {}
    automountServiceAccountToken: bool = True
    create: bool = True
    labels: ValuesServerServiceAccountLabels = {}
    name: str = "argocd-server"

schema ValuesServerServiceAccountAnnotations:
    r"""
    -- Annotations applied to created service account
    """
    [...str]: any

schema ValuesServerServiceAccountLabels:
    r"""
    -- Labels applied to created service account
    """
    [...str]: any

schema ValuesServerServiceAnnotations:
    r"""
    -- Server service annotations
    """
    [...str]: any

schema ValuesServerServiceLabels:
    r"""
    -- Server service labels
    """
    [...str]: any

